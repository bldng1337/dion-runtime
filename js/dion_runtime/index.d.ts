/// <reference types="dion-runtime-types" />
/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class CancelToken {
  cancel(): void
  get cancelled(): boolean
  getChild(): CancelToken
}
export type CancelTokenProxy = CancelToken

export declare class Extension {
  get enabled(): boolean
  /**
   * # Safety
   * Safety is handled by napi
   */
  setEnabled(enabled: boolean): Promise<void>
  /**
   * # Safety
   * Safety is handled by napi
   */
  reload(): Promise<void>
  browse(page: number, token?: CancelToken | undefined | null): Promise<EntryList>
  search(page: number, filter: string, token?: CancelToken | undefined | null): Promise<EntryList>
  fromurl(url: string, token?: CancelToken | undefined | null): Promise<boolean>
  detail(entryid: string, settings: Record<string, Setting>, token?: CancelToken): Promise<EntryDetailedResult>
  source(epid: string, settings: Record<string, Setting>, token?: CancelToken): Promise<SourceResult>
  mapEntry(entry:EntryDetailed, settings: Record<string, Setting>, token?: CancelToken): Promise<EntryDetailedResult>
  onEntryActivity(activity: EntryActivity, entry: EntryDetailed, settings: Record<string, Setting>, token?: CancelToken): Promise<void>
  mapSource(source: Source, settings: Record<string, Setting>, token?: CancelToken): Promise<Source>
  getData(): Promise<ExtensionData>
  save(): Promise<void>
  getPermissions(): Promise<Permission[]>
  hasPermission(permission: Permission): Promise<boolean>
  requestPermission(permission:Permission, msg?: string): Promise<boolean>
  removePermission(permission: Permission): Promise<void>
  getSetting(id: string, kind: SettingKind): Promise<Setting>
  getSettings(kind: SettingKind): Promise<Record<string, Setting>>
  setSetting(id: string, kind: SettingKind, value: SettingValue): Promise<void>
  removeSetting(id: string, kind: SettingKind): Promise<void>
  getSettingIds(kind: SettingKind): Promise<string[]>
  mergeSettingDefinition(id: string, kind: SettingKind, definition: Setting): Promise<void>
}
export type ExtensionProxy = Extension

export declare class ExtensionClient {
  constructor(loadData: ((err: Error | null, key: string) => string), storeData: ((err: Error | null, key: string, value: string) => void), doAction: ((err: Error | null, action: Action) => void), requestPermission: ((err: Error | null, permission: Permission, msg?: string | undefined | null) => boolean), getPath: ((err: Error | null, ) => string))
}
export type ClientExtensionHandler = ExtensionClient

export declare class ExtensionManager {
  static init(handler: ManagerClient): Promise<ExtensionManager>
  getExtension(): Promise<Array<Extension>>
}
export type ExtensionManagerProxy = ExtensionManager

export declare class ManagerClient {
  constructor(getClient: ((err: Error | null, arg: ExtensionData) => ExtensionClient), getPath: ((err: Error | null, ) => string))
}
export type ClientManagerHandler = ManagerClient

export declare function plus100(input: number): number
