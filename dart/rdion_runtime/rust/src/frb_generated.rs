// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::simple::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.4.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -847142033;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__simple__CancelToken_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CancelToken_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::simple::CancelToken::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__ExtensionManagerProxy_add_from_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
        >,
    >,
    path: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionManagerProxy_add_from_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_path = path.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionManagerProxy::add_from_file(
                            &mut *api_that_guard,
                            api_path,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionManagerProxy_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionManagerProxy_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::simple::ExtensionManagerProxy::iter(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionManagerProxy_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionManagerProxy_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::simple::ExtensionManagerProxy::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__ExtensionManagerProxy_remove_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
        >,
    >,
    id: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionManagerProxy_remove",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id = id.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::ExtensionManagerProxy::remove(
                                &mut *api_that_guard,
                                &api_id,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_browse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    page: impl CstDecode<i64>,
    sort: impl CstDecode<dion_runtime::datastructs::Sort>,
    token: impl CstDecode<Option<CancelToken>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_browse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_page = page.cst_decode();
            let api_sort = sort.cst_decode();
            let api_token = token.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::browse(
                            &*api_that_guard,
                            api_page,
                            api_sort,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::simple::ExtensionProxy::data(&*api_that_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_detail_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    entry: impl CstDecode<dion_runtime::datastructs::Entry>,
    token: impl CstDecode<Option<CancelToken>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_detail",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_entry = entry.cst_decode();
            let api_token = token.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::detail(
                            &*api_that_guard,
                            api_entry,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_disable_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_disable",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::ExtensionProxy::disable(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_enable_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_enable",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::simple::ExtensionProxy::enable(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_fromurl_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    url: impl CstDecode<String>,
    token: impl CstDecode<Option<CancelToken>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_fromurl",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_url = url.cst_decode();
            let api_token = token.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::fromurl(
                            &*api_that_guard,
                            api_url,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_get_setting_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    name: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_get_setting",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::get_setting(
                            &*api_that_guard,
                            &api_name,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_is_enabled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_is_enabled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::simple::ExtensionProxy::is_enabled(&*api_that_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    filepath: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_filepath = filepath.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::simple::ExtensionProxy::new(&api_filepath).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_permissions_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_permissions_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::simple::ExtensionProxy::permissions_iter(&*api_that_guard)
                                .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_remove_permissions_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    permission: impl CstDecode<dion_runtime::permission::Permission>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_remove_permissions",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_permission = permission.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::ExtensionProxy::remove_permissions(
                                &*api_that_guard,
                                &api_permission,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_search_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    page: impl CstDecode<i64>,
    filter: impl CstDecode<String>,
    token: impl CstDecode<Option<CancelToken>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_search",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_page = page.cst_decode();
            let api_filter = filter.cst_decode();
            let api_token = token.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::search(
                            &*api_that_guard,
                            api_page,
                            &api_filter,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_set_setting_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    name: impl CstDecode<String>,
    setting: impl CstDecode<dion_runtime::settings::Settingvalue>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_set_setting",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            let api_setting = setting.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::set_setting(
                            &*api_that_guard,
                            &api_name,
                            api_setting,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_setting_ids_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_setting_ids_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::simple::ExtensionProxy::setting_ids_iter(&*api_that_guard)
                                .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__ExtensionProxy_source_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
    >,
    ep: impl CstDecode<dion_runtime::datastructs::Episode>,
    token: impl CstDecode<Option<CancelToken>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionProxy_source",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ep = ep.cst_decode();
            let api_token = token.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::simple::ExtensionProxy::source(
                            &*api_that_guard,
                            &api_ep,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__QueueStore_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "QueueStore_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::simple::QueueStore::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__internal_send_permission_request_answer_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    answer: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "internal_send_permission_request_answer",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_answer = answer.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::simple::internal_send_permission_request_answer(api_answer)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__internal_set_permission_request_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    request: impl CstDecode<
        StreamSink<
            crate::api::simple::PermissionRequest,
            flutter_rust_bridge::for_generated::DcoCodec,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "internal_set_permission_request_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::internal_set_permission_request_listener(
                                api_request,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    match None::<dion_runtime::datastructs::DataSource>.unwrap() {
        dion_runtime::datastructs::DataSource::Paragraphlist { paragraphs } => {
            let _: Vec<String> = paragraphs;
        }
    }
    {
        let Entry = None::<dion_runtime::datastructs::Entry>.unwrap();
        let _: String = Entry.id;
        let _: String = Entry.url;
        let _: String = Entry.title;
        let _: dion_runtime::datastructs::MediaType = Entry.media_type;
        let _: Option<String> = Entry.cover;
        let _: Option<std::collections::HashMap<String, String>> = Entry.cover_header;
        let _: Option<Vec<String>> = Entry.auther;
        let _: Option<f32> = Entry.rating;
        let _: Option<f32> = Entry.views;
        let _: Option<i64> = Entry.length;
    }
    {
        let EntryDetailed = None::<dion_runtime::datastructs::EntryDetailed>.unwrap();
        let _: String = EntryDetailed.id;
        let _: String = EntryDetailed.url;
        let _: String = EntryDetailed.title;
        let _: dion_runtime::datastructs::MediaType = EntryDetailed.media_type;
        let _: dion_runtime::datastructs::ReleaseStatus = EntryDetailed.status;
        let _: Option<String> = EntryDetailed.cover;
        let _: Option<std::collections::HashMap<String, String>> = EntryDetailed.cover_header;
        let _: Vec<dion_runtime::datastructs::EpisodeList> = EntryDetailed.episodes;
        let _: Option<Vec<String>> = EntryDetailed.genres;
        let _: Option<Vec<String>> = EntryDetailed.alttitles;
        let _: Option<Vec<String>> = EntryDetailed.auther;
        let _: Option<f32> = EntryDetailed.rating;
        let _: Option<f32> = EntryDetailed.views;
        let _: Option<i64> = EntryDetailed.length;
    }
    {
        let Episode = None::<dion_runtime::datastructs::Episode>.unwrap();
        let _: String = Episode.id;
        let _: String = Episode.name;
        let _: String = Episode.url;
        let _: Option<String> = Episode.cover;
        let _: Option<std::collections::HashMap<String, String>> = Episode.cover_header;
        let _: Option<String> = Episode.timestamp;
    }
    {
        let EpisodeList = None::<dion_runtime::datastructs::EpisodeList>.unwrap();
        let _: String = EpisodeList.title;
        let _: Vec<dion_runtime::datastructs::Episode> = EpisodeList.episodes;
    }
    {
        let ExtensionData = None::<dion_runtime::jsextension::ExtensionData>.unwrap();
        let _: String = ExtensionData.id;
        let _: Option<String> = ExtensionData.repo;
        let _: String = ExtensionData.name;
        let _: Option<Vec<dion_runtime::datastructs::MediaType>> = ExtensionData.media_type;
        let _: Option<String> = ExtensionData.giturl;
        let _: Option<String> = ExtensionData.version;
        let _: Option<String> = ExtensionData.desc;
        let _: Option<String> = ExtensionData.author;
        let _: Option<String> = ExtensionData.license;
        let _: Option<Vec<String>> = ExtensionData.tags;
        let _: Option<bool> = ExtensionData.nsfw;
        let _: Vec<String> = ExtensionData.lang;
        let _: Option<String> = ExtensionData.url;
        let _: Option<String> = ExtensionData.icon;
    }
    {
        let ImageListAudio = None::<dion_runtime::datastructs::ImageListAudio>.unwrap();
        let _: String = ImageListAudio.link;
        let _: i64 = ImageListAudio.from;
        let _: i64 = ImageListAudio.to;
    }
    match None::<dion_runtime::datastructs::LinkSource>.unwrap() {
        dion_runtime::datastructs::LinkSource::Epub { link } => {
            let _: String = link;
        }
        dion_runtime::datastructs::LinkSource::Pdf { link } => {
            let _: String = link;
        }
        dion_runtime::datastructs::LinkSource::Imagelist {
            links,
            header,
            audio,
        } => {
            let _: Vec<String> = links;
            let _: std::collections::HashMap<String, String> = header;
            let _: Vec<dion_runtime::datastructs::ImageListAudio> = audio;
        }
        dion_runtime::datastructs::LinkSource::M3u8 { link, sub } => {
            let _: String = link;
            let _: Vec<dion_runtime::datastructs::Subtitles> = sub;
        }
    }
    match None::<dion_runtime::permission::Permission>.unwrap() {
        dion_runtime::permission::Permission::StoragePermission { path, write } => {
            let _: String = path;
            let _: bool = write;
        }
    }
    {
        let Setting = None::<dion_runtime::settings::Setting>.unwrap();
        let _: dion_runtime::settings::Settingvalue = Setting.val;
        let _: dion_runtime::settings::Settingtype = Setting.settingtype;
        let _: Option<dion_runtime::settings::SettingUI> = Setting.ui;
    }
    match None::<dion_runtime::settings::SettingUI>.unwrap() {
        dion_runtime::settings::SettingUI::PathSelection { label, pickfolder } => {
            let _: String = label;
            let _: bool = pickfolder;
        }
        dion_runtime::settings::SettingUI::Slider {
            label,
            min,
            max,
            step,
        } => {
            let _: String = label;
            let _: f64 = min;
            let _: f64 = max;
            let _: f64 = step;
        }
        dion_runtime::settings::SettingUI::Checkbox { label } => {
            let _: String = label;
        }
        dion_runtime::settings::SettingUI::Textbox { label } => {
            let _: String = label;
        }
        dion_runtime::settings::SettingUI::Dropdown { label, options } => {
            let _: String = label;
            let _: Vec<(String, String)> = options;
        }
    }
    match None::<dion_runtime::settings::Settingvalue>.unwrap() {
        dion_runtime::settings::Settingvalue::String { val, default_val } => {
            let _: String = val;
            let _: String = default_val;
        }
        dion_runtime::settings::Settingvalue::Number { val, default_val } => {
            let _: f64 = val;
            let _: f64 = default_val;
        }
        dion_runtime::settings::Settingvalue::Boolean { val, default_val } => {
            let _: bool = val;
            let _: bool = default_val;
        }
    }
    match None::<dion_runtime::datastructs::Source>.unwrap() {
        dion_runtime::datastructs::Source::Data { sourcedata } => {
            let _: dion_runtime::datastructs::DataSource = sourcedata;
        }
        dion_runtime::datastructs::Source::Directlink { sourcedata } => {
            let _: dion_runtime::datastructs::LinkSource = sourcedata;
        }
    }
    {
        let Subtitles = None::<dion_runtime::datastructs::Subtitles>.unwrap();
        let _: String = Subtitles.title;
        let _: String = Subtitles.url;
    }
};

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f32> for f32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<f64> for f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<dion_runtime::datastructs::MediaType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::datastructs::MediaType {
        match self {
            0 => dion_runtime::datastructs::MediaType::Video,
            1 => dion_runtime::datastructs::MediaType::Comic,
            2 => dion_runtime::datastructs::MediaType::Audio,
            3 => dion_runtime::datastructs::MediaType::Book,
            4 => dion_runtime::datastructs::MediaType::Unknown,
            _ => unreachable!("Invalid variant for MediaType: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::datastructs::ReleaseStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::datastructs::ReleaseStatus {
        match self {
            0 => dion_runtime::datastructs::ReleaseStatus::Releasing,
            1 => dion_runtime::datastructs::ReleaseStatus::Complete,
            2 => dion_runtime::datastructs::ReleaseStatus::Unknown,
            _ => unreachable!("Invalid variant for ReleaseStatus: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::settings::Settingtype> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::settings::Settingtype {
        match self {
            0 => dion_runtime::settings::Settingtype::Extension,
            1 => dion_runtime::settings::Settingtype::Entry,
            2 => dion_runtime::settings::Settingtype::Search,
            _ => unreachable!("Invalid variant for Settingtype: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::datastructs::Sort> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::datastructs::Sort {
        match self {
            0 => dion_runtime::datastructs::Sort::Popular,
            1 => dion_runtime::datastructs::Sort::Latest,
            2 => dion_runtime::datastructs::Sort::Updated,
            _ => unreachable!("Invalid variant for Sort: {}", self),
        }
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for CancelToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ExtensionManagerProxy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ExtensionProxy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for QueueStore {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for StreamSink<
        crate::api::simple::PermissionRequest,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for dion_runtime::datastructs::DataSource {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_paragraphs = <Vec<String>>::sse_decode(deserializer);
                return dion_runtime::datastructs::DataSource::Paragraphlist {
                    paragraphs: var_paragraphs,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::datastructs::Entry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_mediaType = <dion_runtime::datastructs::MediaType>::sse_decode(deserializer);
        let mut var_cover = <Option<String>>::sse_decode(deserializer);
        let mut var_coverHeader =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_auther = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_rating = <Option<f32>>::sse_decode(deserializer);
        let mut var_views = <Option<f32>>::sse_decode(deserializer);
        let mut var_length = <Option<i64>>::sse_decode(deserializer);
        return dion_runtime::datastructs::Entry {
            id: var_id,
            url: var_url,
            title: var_title,
            media_type: var_mediaType,
            cover: var_cover,
            cover_header: var_coverHeader,
            auther: var_auther,
            rating: var_rating,
            views: var_views,
            length: var_length,
        };
    }
}

impl SseDecode for dion_runtime::datastructs::EntryDetailed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_mediaType = <dion_runtime::datastructs::MediaType>::sse_decode(deserializer);
        let mut var_status = <dion_runtime::datastructs::ReleaseStatus>::sse_decode(deserializer);
        let mut var_cover = <Option<String>>::sse_decode(deserializer);
        let mut var_coverHeader =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_episodes =
            <Vec<dion_runtime::datastructs::EpisodeList>>::sse_decode(deserializer);
        let mut var_genres = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_alttitles = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_auther = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_rating = <Option<f32>>::sse_decode(deserializer);
        let mut var_views = <Option<f32>>::sse_decode(deserializer);
        let mut var_length = <Option<i64>>::sse_decode(deserializer);
        return dion_runtime::datastructs::EntryDetailed {
            id: var_id,
            url: var_url,
            title: var_title,
            media_type: var_mediaType,
            status: var_status,
            cover: var_cover,
            cover_header: var_coverHeader,
            episodes: var_episodes,
            genres: var_genres,
            alttitles: var_alttitles,
            auther: var_auther,
            rating: var_rating,
            views: var_views,
            length: var_length,
        };
    }
}

impl SseDecode for dion_runtime::datastructs::Episode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_cover = <Option<String>>::sse_decode(deserializer);
        let mut var_coverHeader =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_timestamp = <Option<String>>::sse_decode(deserializer);
        return dion_runtime::datastructs::Episode {
            id: var_id,
            name: var_name,
            url: var_url,
            cover: var_cover,
            cover_header: var_coverHeader,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for dion_runtime::datastructs::EpisodeList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_episodes = <Vec<dion_runtime::datastructs::Episode>>::sse_decode(deserializer);
        return dion_runtime::datastructs::EpisodeList {
            title: var_title,
            episodes: var_episodes,
        };
    }
}

impl SseDecode for dion_runtime::jsextension::ExtensionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_repo = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_mediaType =
            <Option<Vec<dion_runtime::datastructs::MediaType>>>::sse_decode(deserializer);
        let mut var_giturl = <Option<String>>::sse_decode(deserializer);
        let mut var_version = <Option<String>>::sse_decode(deserializer);
        let mut var_desc = <Option<String>>::sse_decode(deserializer);
        let mut var_author = <Option<String>>::sse_decode(deserializer);
        let mut var_license = <Option<String>>::sse_decode(deserializer);
        let mut var_tags = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_nsfw = <Option<bool>>::sse_decode(deserializer);
        let mut var_lang = <Vec<String>>::sse_decode(deserializer);
        let mut var_url = <Option<String>>::sse_decode(deserializer);
        let mut var_icon = <Option<String>>::sse_decode(deserializer);
        return dion_runtime::jsextension::ExtensionData {
            id: var_id,
            repo: var_repo,
            name: var_name,
            media_type: var_mediaType,
            giturl: var_giturl,
            version: var_version,
            desc: var_desc,
            author: var_author,
            license: var_license,
            tags: var_tags,
            nsfw: var_nsfw,
            lang: var_lang,
            url: var_url,
            icon: var_icon,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for dion_runtime::datastructs::ImageListAudio {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_link = <String>::sse_decode(deserializer);
        let mut var_from = <i64>::sse_decode(deserializer);
        let mut var_to = <i64>::sse_decode(deserializer);
        return dion_runtime::datastructs::ImageListAudio {
            link: var_link,
            from: var_from,
            to: var_to,
        };
    }
}

impl SseDecode for dion_runtime::datastructs::LinkSource {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_link = <String>::sse_decode(deserializer);
                return dion_runtime::datastructs::LinkSource::Epub { link: var_link };
            }
            1 => {
                let mut var_link = <String>::sse_decode(deserializer);
                return dion_runtime::datastructs::LinkSource::Pdf { link: var_link };
            }
            2 => {
                let mut var_links = <Vec<String>>::sse_decode(deserializer);
                let mut var_header =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                let mut var_audio =
                    <Vec<dion_runtime::datastructs::ImageListAudio>>::sse_decode(deserializer);
                return dion_runtime::datastructs::LinkSource::Imagelist {
                    links: var_links,
                    header: var_header,
                    audio: var_audio,
                };
            }
            3 => {
                let mut var_link = <String>::sse_decode(deserializer);
                let mut var_sub =
                    <Vec<dion_runtime::datastructs::Subtitles>>::sse_decode(deserializer);
                return dion_runtime::datastructs::LinkSource::M3u8 {
                    link: var_link,
                    sub: var_sub,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Vec<ExtensionProxy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<ExtensionProxy>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::datastructs::Entry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::datastructs::Entry>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::datastructs::Episode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::datastructs::Episode>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::datastructs::EpisodeList> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::datastructs::EpisodeList>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::datastructs::ImageListAudio> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::datastructs::ImageListAudio>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::datastructs::MediaType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::datastructs::MediaType>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::permission::Permission> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::permission::Permission>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::datastructs::Subtitles> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::datastructs::Subtitles>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for dion_runtime::datastructs::MediaType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::datastructs::MediaType::Video,
            1 => dion_runtime::datastructs::MediaType::Comic,
            2 => dion_runtime::datastructs::MediaType::Audio,
            3 => dion_runtime::datastructs::MediaType::Book,
            4 => dion_runtime::datastructs::MediaType::Unknown,
            _ => unreachable!("Invalid variant for MediaType: {}", inner),
        };
    }
}

impl SseDecode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<std::collections::HashMap<String, String>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<CancelToken> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<CancelToken>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<dion_runtime::datastructs::Entry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<dion_runtime::datastructs::Entry>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<dion_runtime::settings::SettingUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<dion_runtime::settings::SettingUI>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<dion_runtime::datastructs::MediaType>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<dion_runtime::datastructs::MediaType>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for dion_runtime::permission::Permission {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_path = <String>::sse_decode(deserializer);
                let mut var_write = <bool>::sse_decode(deserializer);
                return dion_runtime::permission::Permission::StoragePermission {
                    path: var_path,
                    write: var_write,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::simple::PermissionRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_permission = <dion_runtime::permission::Permission>::sse_decode(deserializer);
        let mut var_msg = <Option<String>>::sse_decode(deserializer);
        return crate::api::simple::PermissionRequest {
            permission: var_permission,
            msg: var_msg,
        };
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for dion_runtime::datastructs::ReleaseStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::datastructs::ReleaseStatus::Releasing,
            1 => dion_runtime::datastructs::ReleaseStatus::Complete,
            2 => dion_runtime::datastructs::ReleaseStatus::Unknown,
            _ => unreachable!("Invalid variant for ReleaseStatus: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::settings::Setting {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_val = <dion_runtime::settings::Settingvalue>::sse_decode(deserializer);
        let mut var_settingtype = <dion_runtime::settings::Settingtype>::sse_decode(deserializer);
        let mut var_ui = <Option<dion_runtime::settings::SettingUI>>::sse_decode(deserializer);
        return dion_runtime::settings::Setting {
            val: var_val,
            settingtype: var_settingtype,
            ui: var_ui,
        };
    }
}

impl SseDecode for dion_runtime::settings::SettingUI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_label = <String>::sse_decode(deserializer);
                let mut var_pickfolder = <bool>::sse_decode(deserializer);
                return dion_runtime::settings::SettingUI::PathSelection {
                    label: var_label,
                    pickfolder: var_pickfolder,
                };
            }
            1 => {
                let mut var_label = <String>::sse_decode(deserializer);
                let mut var_min = <f64>::sse_decode(deserializer);
                let mut var_max = <f64>::sse_decode(deserializer);
                let mut var_step = <f64>::sse_decode(deserializer);
                return dion_runtime::settings::SettingUI::Slider {
                    label: var_label,
                    min: var_min,
                    max: var_max,
                    step: var_step,
                };
            }
            2 => {
                let mut var_label = <String>::sse_decode(deserializer);
                return dion_runtime::settings::SettingUI::Checkbox { label: var_label };
            }
            3 => {
                let mut var_label = <String>::sse_decode(deserializer);
                return dion_runtime::settings::SettingUI::Textbox { label: var_label };
            }
            4 => {
                let mut var_label = <String>::sse_decode(deserializer);
                let mut var_options = <Vec<(String, String)>>::sse_decode(deserializer);
                return dion_runtime::settings::SettingUI::Dropdown {
                    label: var_label,
                    options: var_options,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::settings::Settingtype {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::settings::Settingtype::Extension,
            1 => dion_runtime::settings::Settingtype::Entry,
            2 => dion_runtime::settings::Settingtype::Search,
            _ => unreachable!("Invalid variant for Settingtype: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::settings::Settingvalue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_val = <String>::sse_decode(deserializer);
                let mut var_defaultVal = <String>::sse_decode(deserializer);
                return dion_runtime::settings::Settingvalue::String {
                    val: var_val,
                    default_val: var_defaultVal,
                };
            }
            1 => {
                let mut var_val = <f64>::sse_decode(deserializer);
                let mut var_defaultVal = <f64>::sse_decode(deserializer);
                return dion_runtime::settings::Settingvalue::Number {
                    val: var_val,
                    default_val: var_defaultVal,
                };
            }
            2 => {
                let mut var_val = <bool>::sse_decode(deserializer);
                let mut var_defaultVal = <bool>::sse_decode(deserializer);
                return dion_runtime::settings::Settingvalue::Boolean {
                    val: var_val,
                    default_val: var_defaultVal,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::datastructs::Sort {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::datastructs::Sort::Popular,
            1 => dion_runtime::datastructs::Sort::Latest,
            2 => dion_runtime::datastructs::Sort::Updated,
            _ => unreachable!("Invalid variant for Sort: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::datastructs::Source {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_sourcedata =
                    <dion_runtime::datastructs::DataSource>::sse_decode(deserializer);
                return dion_runtime::datastructs::Source::Data {
                    sourcedata: var_sourcedata,
                };
            }
            1 => {
                let mut var_sourcedata =
                    <dion_runtime::datastructs::LinkSource>::sse_decode(deserializer);
                return dion_runtime::datastructs::Source::Directlink {
                    sourcedata: var_sourcedata,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::datastructs::Subtitles {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return dion_runtime::datastructs::Subtitles {
            title: var_title,
            url: var_url,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CancelToken> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<CancelToken> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CancelToken>> for CancelToken {
    fn into_into_dart(self) -> FrbWrapper<CancelToken> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ExtensionManagerProxy> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ExtensionManagerProxy>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ExtensionManagerProxy>>
    for ExtensionManagerProxy
{
    fn into_into_dart(self) -> FrbWrapper<ExtensionManagerProxy> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ExtensionProxy> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ExtensionProxy> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ExtensionProxy>> for ExtensionProxy {
    fn into_into_dart(self) -> FrbWrapper<ExtensionProxy> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<QueueStore> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<QueueStore> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<QueueStore>> for QueueStore {
    fn into_into_dart(self) -> FrbWrapper<QueueStore> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::DataSource> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::datastructs::DataSource::Paragraphlist { paragraphs } => {
                [0.into_dart(), paragraphs.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::DataSource>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::DataSource>>
    for dion_runtime::datastructs::DataSource
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::DataSource> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::Entry> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.title.into_into_dart().into_dart(),
            self.0.media_type.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.cover_header.into_into_dart().into_dart(),
            self.0.auther.into_into_dart().into_dart(),
            self.0.rating.into_into_dart().into_dart(),
            self.0.views.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::Entry>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::Entry>>
    for dion_runtime::datastructs::Entry
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::Entry> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::EntryDetailed> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.title.into_into_dart().into_dart(),
            self.0.media_type.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.cover_header.into_into_dart().into_dart(),
            self.0.episodes.into_into_dart().into_dart(),
            self.0.genres.into_into_dart().into_dart(),
            self.0.alttitles.into_into_dart().into_dart(),
            self.0.auther.into_into_dart().into_dart(),
            self.0.rating.into_into_dart().into_dart(),
            self.0.views.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::EntryDetailed>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::EntryDetailed>>
    for dion_runtime::datastructs::EntryDetailed
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::EntryDetailed> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::Episode> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.cover_header.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::Episode>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::Episode>>
    for dion_runtime::datastructs::Episode
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::Episode> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::EpisodeList> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.episodes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::EpisodeList>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::EpisodeList>>
    for dion_runtime::datastructs::EpisodeList
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::EpisodeList> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::jsextension::ExtensionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.repo.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.media_type.into_into_dart().into_dart(),
            self.0.giturl.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.desc.into_into_dart().into_dart(),
            self.0.author.into_into_dart().into_dart(),
            self.0.license.into_into_dart().into_dart(),
            self.0.tags.into_into_dart().into_dart(),
            self.0.nsfw.into_into_dart().into_dart(),
            self.0.lang.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::jsextension::ExtensionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::jsextension::ExtensionData>>
    for dion_runtime::jsextension::ExtensionData
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::jsextension::ExtensionData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::ImageListAudio> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.link.into_into_dart().into_dart(),
            self.0.from.into_into_dart().into_dart(),
            self.0.to.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::ImageListAudio>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::ImageListAudio>>
    for dion_runtime::datastructs::ImageListAudio
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::ImageListAudio> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::LinkSource> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::datastructs::LinkSource::Epub { link } => {
                [0.into_dart(), link.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::datastructs::LinkSource::Pdf { link } => {
                [1.into_dart(), link.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::datastructs::LinkSource::Imagelist {
                links,
                header,
                audio,
            } => [
                2.into_dart(),
                links.into_into_dart().into_dart(),
                header.into_into_dart().into_dart(),
                audio.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::datastructs::LinkSource::M3u8 { link, sub } => [
                3.into_dart(),
                link.into_into_dart().into_dart(),
                sub.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::LinkSource>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::LinkSource>>
    for dion_runtime::datastructs::LinkSource
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::LinkSource> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::MediaType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::datastructs::MediaType::Video => 0.into_dart(),
            dion_runtime::datastructs::MediaType::Comic => 1.into_dart(),
            dion_runtime::datastructs::MediaType::Audio => 2.into_dart(),
            dion_runtime::datastructs::MediaType::Book => 3.into_dart(),
            dion_runtime::datastructs::MediaType::Unknown => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::MediaType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::MediaType>>
    for dion_runtime::datastructs::MediaType
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::MediaType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::permission::Permission> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::permission::Permission::StoragePermission { path, write } => [
                0.into_dart(),
                path.into_into_dart().into_dart(),
                write.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::permission::Permission>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::permission::Permission>>
    for dion_runtime::permission::Permission
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::permission::Permission> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::PermissionRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.permission.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::PermissionRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::PermissionRequest>
    for crate::api::simple::PermissionRequest
{
    fn into_into_dart(self) -> crate::api::simple::PermissionRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::ReleaseStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::datastructs::ReleaseStatus::Releasing => 0.into_dart(),
            dion_runtime::datastructs::ReleaseStatus::Complete => 1.into_dart(),
            dion_runtime::datastructs::ReleaseStatus::Unknown => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::ReleaseStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::ReleaseStatus>>
    for dion_runtime::datastructs::ReleaseStatus
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::ReleaseStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::settings::Setting> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.val.into_into_dart().into_dart(),
            self.0.settingtype.into_into_dart().into_dart(),
            self.0.ui.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::settings::Setting>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::settings::Setting>>
    for dion_runtime::settings::Setting
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::settings::Setting> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::settings::SettingUI> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::settings::SettingUI::PathSelection { label, pickfolder } => [
                0.into_dart(),
                label.into_into_dart().into_dart(),
                pickfolder.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::settings::SettingUI::Slider {
                label,
                min,
                max,
                step,
            } => [
                1.into_dart(),
                label.into_into_dart().into_dart(),
                min.into_into_dart().into_dart(),
                max.into_into_dart().into_dart(),
                step.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::settings::SettingUI::Checkbox { label } => {
                [2.into_dart(), label.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::settings::SettingUI::Textbox { label } => {
                [3.into_dart(), label.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::settings::SettingUI::Dropdown { label, options } => [
                4.into_dart(),
                label.into_into_dart().into_dart(),
                options.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::settings::SettingUI>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::settings::SettingUI>>
    for dion_runtime::settings::SettingUI
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::settings::SettingUI> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::settings::Settingtype> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::settings::Settingtype::Extension => 0.into_dart(),
            dion_runtime::settings::Settingtype::Entry => 1.into_dart(),
            dion_runtime::settings::Settingtype::Search => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::settings::Settingtype>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::settings::Settingtype>>
    for dion_runtime::settings::Settingtype
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::settings::Settingtype> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::settings::Settingvalue> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::settings::Settingvalue::String { val, default_val } => [
                0.into_dart(),
                val.into_into_dart().into_dart(),
                default_val.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::settings::Settingvalue::Number { val, default_val } => [
                1.into_dart(),
                val.into_into_dart().into_dart(),
                default_val.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::settings::Settingvalue::Boolean { val, default_val } => [
                2.into_dart(),
                val.into_into_dart().into_dart(),
                default_val.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::settings::Settingvalue>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::settings::Settingvalue>>
    for dion_runtime::settings::Settingvalue
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::settings::Settingvalue> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::Sort> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::datastructs::Sort::Popular => 0.into_dart(),
            dion_runtime::datastructs::Sort::Latest => 1.into_dart(),
            dion_runtime::datastructs::Sort::Updated => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::Sort>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::Sort>>
    for dion_runtime::datastructs::Sort
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::Sort> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::Source> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::datastructs::Source::Data { sourcedata } => {
                [0.into_dart(), sourcedata.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::datastructs::Source::Directlink { sourcedata } => {
                [1.into_dart(), sourcedata.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::Source>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::Source>>
    for dion_runtime::datastructs::Source
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::Source> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::datastructs::Subtitles> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::datastructs::Subtitles>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::datastructs::Subtitles>>
    for dion_runtime::datastructs::Subtitles
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::datastructs::Subtitles> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for CancelToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ExtensionManagerProxy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for ExtensionProxy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for QueueStore {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<
        crate::api::simple::PermissionRequest,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for dion_runtime::datastructs::DataSource {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::datastructs::DataSource::Paragraphlist { paragraphs } => {
                <i32>::sse_encode(0, serializer);
                <Vec<String>>::sse_encode(paragraphs, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::datastructs::Entry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.title, serializer);
        <dion_runtime::datastructs::MediaType>::sse_encode(self.media_type, serializer);
        <Option<String>>::sse_encode(self.cover, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(
            self.cover_header,
            serializer,
        );
        <Option<Vec<String>>>::sse_encode(self.auther, serializer);
        <Option<f32>>::sse_encode(self.rating, serializer);
        <Option<f32>>::sse_encode(self.views, serializer);
        <Option<i64>>::sse_encode(self.length, serializer);
    }
}

impl SseEncode for dion_runtime::datastructs::EntryDetailed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.title, serializer);
        <dion_runtime::datastructs::MediaType>::sse_encode(self.media_type, serializer);
        <dion_runtime::datastructs::ReleaseStatus>::sse_encode(self.status, serializer);
        <Option<String>>::sse_encode(self.cover, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(
            self.cover_header,
            serializer,
        );
        <Vec<dion_runtime::datastructs::EpisodeList>>::sse_encode(self.episodes, serializer);
        <Option<Vec<String>>>::sse_encode(self.genres, serializer);
        <Option<Vec<String>>>::sse_encode(self.alttitles, serializer);
        <Option<Vec<String>>>::sse_encode(self.auther, serializer);
        <Option<f32>>::sse_encode(self.rating, serializer);
        <Option<f32>>::sse_encode(self.views, serializer);
        <Option<i64>>::sse_encode(self.length, serializer);
    }
}

impl SseEncode for dion_runtime::datastructs::Episode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.cover, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(
            self.cover_header,
            serializer,
        );
        <Option<String>>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for dion_runtime::datastructs::EpisodeList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <Vec<dion_runtime::datastructs::Episode>>::sse_encode(self.episodes, serializer);
    }
}

impl SseEncode for dion_runtime::jsextension::ExtensionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <Option<String>>::sse_encode(self.repo, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<Vec<dion_runtime::datastructs::MediaType>>>::sse_encode(
            self.media_type,
            serializer,
        );
        <Option<String>>::sse_encode(self.giturl, serializer);
        <Option<String>>::sse_encode(self.version, serializer);
        <Option<String>>::sse_encode(self.desc, serializer);
        <Option<String>>::sse_encode(self.author, serializer);
        <Option<String>>::sse_encode(self.license, serializer);
        <Option<Vec<String>>>::sse_encode(self.tags, serializer);
        <Option<bool>>::sse_encode(self.nsfw, serializer);
        <Vec<String>>::sse_encode(self.lang, serializer);
        <Option<String>>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.icon, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for dion_runtime::datastructs::ImageListAudio {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.link, serializer);
        <i64>::sse_encode(self.from, serializer);
        <i64>::sse_encode(self.to, serializer);
    }
}

impl SseEncode for dion_runtime::datastructs::LinkSource {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::datastructs::LinkSource::Epub { link } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(link, serializer);
            }
            dion_runtime::datastructs::LinkSource::Pdf { link } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(link, serializer);
            }
            dion_runtime::datastructs::LinkSource::Imagelist {
                links,
                header,
                audio,
            } => {
                <i32>::sse_encode(2, serializer);
                <Vec<String>>::sse_encode(links, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(header, serializer);
                <Vec<dion_runtime::datastructs::ImageListAudio>>::sse_encode(audio, serializer);
            }
            dion_runtime::datastructs::LinkSource::M3u8 { link, sub } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(link, serializer);
                <Vec<dion_runtime::datastructs::Subtitles>>::sse_encode(sub, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for Vec<ExtensionProxy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <ExtensionProxy>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::datastructs::Entry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::datastructs::Entry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::datastructs::Episode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::datastructs::Episode>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::datastructs::EpisodeList> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::datastructs::EpisodeList>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::datastructs::ImageListAudio> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::datastructs::ImageListAudio>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::datastructs::MediaType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::datastructs::MediaType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::permission::Permission> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::permission::Permission>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::datastructs::Subtitles> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::datastructs::Subtitles>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for dion_runtime::datastructs::MediaType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::datastructs::MediaType::Video => 0,
                dion_runtime::datastructs::MediaType::Comic => 1,
                dion_runtime::datastructs::MediaType::Audio => 2,
                dion_runtime::datastructs::MediaType::Book => 3,
                dion_runtime::datastructs::MediaType::Unknown => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <std::collections::HashMap<String, String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<CancelToken> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <CancelToken>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<dion_runtime::datastructs::Entry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <dion_runtime::datastructs::Entry>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<dion_runtime::settings::SettingUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <dion_runtime::settings::SettingUI>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<dion_runtime::datastructs::MediaType>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<dion_runtime::datastructs::MediaType>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for dion_runtime::permission::Permission {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::permission::Permission::StoragePermission { path, write } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(path, serializer);
                <bool>::sse_encode(write, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::simple::PermissionRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::permission::Permission>::sse_encode(self.permission, serializer);
        <Option<String>>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for dion_runtime::datastructs::ReleaseStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::datastructs::ReleaseStatus::Releasing => 0,
                dion_runtime::datastructs::ReleaseStatus::Complete => 1,
                dion_runtime::datastructs::ReleaseStatus::Unknown => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::settings::Setting {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::settings::Settingvalue>::sse_encode(self.val, serializer);
        <dion_runtime::settings::Settingtype>::sse_encode(self.settingtype, serializer);
        <Option<dion_runtime::settings::SettingUI>>::sse_encode(self.ui, serializer);
    }
}

impl SseEncode for dion_runtime::settings::SettingUI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::settings::SettingUI::PathSelection { label, pickfolder } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(label, serializer);
                <bool>::sse_encode(pickfolder, serializer);
            }
            dion_runtime::settings::SettingUI::Slider {
                label,
                min,
                max,
                step,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(label, serializer);
                <f64>::sse_encode(min, serializer);
                <f64>::sse_encode(max, serializer);
                <f64>::sse_encode(step, serializer);
            }
            dion_runtime::settings::SettingUI::Checkbox { label } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(label, serializer);
            }
            dion_runtime::settings::SettingUI::Textbox { label } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(label, serializer);
            }
            dion_runtime::settings::SettingUI::Dropdown { label, options } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(label, serializer);
                <Vec<(String, String)>>::sse_encode(options, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::settings::Settingtype {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::settings::Settingtype::Extension => 0,
                dion_runtime::settings::Settingtype::Entry => 1,
                dion_runtime::settings::Settingtype::Search => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::settings::Settingvalue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::settings::Settingvalue::String { val, default_val } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(val, serializer);
                <String>::sse_encode(default_val, serializer);
            }
            dion_runtime::settings::Settingvalue::Number { val, default_val } => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(val, serializer);
                <f64>::sse_encode(default_val, serializer);
            }
            dion_runtime::settings::Settingvalue::Boolean { val, default_val } => {
                <i32>::sse_encode(2, serializer);
                <bool>::sse_encode(val, serializer);
                <bool>::sse_encode(default_val, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::datastructs::Sort {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::datastructs::Sort::Popular => 0,
                dion_runtime::datastructs::Sort::Latest => 1,
                dion_runtime::datastructs::Sort::Updated => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::datastructs::Source {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::datastructs::Source::Data { sourcedata } => {
                <i32>::sse_encode(0, serializer);
                <dion_runtime::datastructs::DataSource>::sse_encode(sourcedata, serializer);
            }
            dion_runtime::datastructs::Source::Directlink { sourcedata } => {
                <i32>::sse_encode(1, serializer);
                <dion_runtime::datastructs::LinkSource>::sse_encode(sourcedata, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::datastructs::Subtitles {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.4.0.

    // Section: imports

    use super::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<CancelToken> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> CancelToken {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ExtensionManagerProxy> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ExtensionManagerProxy {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ExtensionProxy> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ExtensionProxy {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<QueueStore> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> QueueStore {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<std::collections::HashMap<String, String>>
        for *mut wire_cst_list_record_string_string
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, String> {
            let vec: Vec<(String, String)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::simple::PermissionRequest,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::simple::PermissionRequest,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<CancelToken> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> CancelToken {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<CancelToken>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<bool> for *mut bool {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<dion_runtime::datastructs::DataSource> for *mut wire_cst_data_source {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::DataSource {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::datastructs::DataSource>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::datastructs::Entry> for *mut wire_cst_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::Entry {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::datastructs::Entry>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::datastructs::Episode> for *mut wire_cst_episode {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::Episode {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::datastructs::Episode>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<f32> for *mut f32 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> f32 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<i64> for *mut i64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i64 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<dion_runtime::datastructs::LinkSource> for *mut wire_cst_link_source {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::LinkSource {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::datastructs::LinkSource>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::permission::Permission> for *mut wire_cst_permission {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::permission::Permission {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::permission::Permission>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::settings::SettingUI> for *mut wire_cst_setting_ui {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::settings::SettingUI {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::settings::SettingUI>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::settings::Settingvalue> for *mut wire_cst_settingvalue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::settings::Settingvalue {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::settings::Settingvalue>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::datastructs::DataSource> for wire_cst_data_source {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::DataSource {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.Paragraphlist };
                    dion_runtime::datastructs::DataSource::Paragraphlist {
                        paragraphs: ans.paragraphs.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::Entry> for wire_cst_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::Entry {
            dion_runtime::datastructs::Entry {
                id: self.id.cst_decode(),
                url: self.url.cst_decode(),
                title: self.title.cst_decode(),
                media_type: self.media_type.cst_decode(),
                cover: self.cover.cst_decode(),
                cover_header: self.cover_header.cst_decode(),
                auther: self.auther.cst_decode(),
                rating: self.rating.cst_decode(),
                views: self.views.cst_decode(),
                length: self.length.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::EntryDetailed> for wire_cst_entry_detailed {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::EntryDetailed {
            dion_runtime::datastructs::EntryDetailed {
                id: self.id.cst_decode(),
                url: self.url.cst_decode(),
                title: self.title.cst_decode(),
                media_type: self.media_type.cst_decode(),
                status: self.status.cst_decode(),
                cover: self.cover.cst_decode(),
                cover_header: self.cover_header.cst_decode(),
                episodes: self.episodes.cst_decode(),
                genres: self.genres.cst_decode(),
                alttitles: self.alttitles.cst_decode(),
                auther: self.auther.cst_decode(),
                rating: self.rating.cst_decode(),
                views: self.views.cst_decode(),
                length: self.length.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::Episode> for wire_cst_episode {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::Episode {
            dion_runtime::datastructs::Episode {
                id: self.id.cst_decode(),
                name: self.name.cst_decode(),
                url: self.url.cst_decode(),
                cover: self.cover.cst_decode(),
                cover_header: self.cover_header.cst_decode(),
                timestamp: self.timestamp.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::EpisodeList> for wire_cst_episode_list {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::EpisodeList {
            dion_runtime::datastructs::EpisodeList {
                title: self.title.cst_decode(),
                episodes: self.episodes.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::jsextension::ExtensionData> for wire_cst_extension_data {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::jsextension::ExtensionData {
            dion_runtime::jsextension::ExtensionData {
                id: self.id.cst_decode(),
                repo: self.repo.cst_decode(),
                name: self.name.cst_decode(),
                media_type: self.media_type.cst_decode(),
                giturl: self.giturl.cst_decode(),
                version: self.version.cst_decode(),
                desc: self.desc.cst_decode(),
                author: self.author.cst_decode(),
                license: self.license.cst_decode(),
                tags: self.tags.cst_decode(),
                nsfw: self.nsfw.cst_decode(),
                lang: self.lang.cst_decode(),
                url: self.url.cst_decode(),
                icon: self.icon.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::ImageListAudio> for wire_cst_image_list_audio {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::ImageListAudio {
            dion_runtime::datastructs::ImageListAudio {
                link: self.link.cst_decode(),
                from: self.from.cst_decode(),
                to: self.to.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::LinkSource> for wire_cst_link_source {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::LinkSource {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.Epub };
                    dion_runtime::datastructs::LinkSource::Epub {
                        link: ans.link.cst_decode(),
                    }
                }
                1 => {
                    let ans = unsafe { self.kind.Pdf };
                    dion_runtime::datastructs::LinkSource::Pdf {
                        link: ans.link.cst_decode(),
                    }
                }
                2 => {
                    let ans = unsafe { self.kind.Imagelist };
                    dion_runtime::datastructs::LinkSource::Imagelist {
                        links: ans.links.cst_decode(),
                        header: ans.header.cst_decode(),
                        audio: ans.audio.cst_decode(),
                    }
                }
                3 => {
                    let ans = unsafe { self.kind.M3u8 };
                    dion_runtime::datastructs::LinkSource::M3u8 {
                        link: ans.link.cst_decode(),
                        sub: ans.sub.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<Vec<ExtensionProxy>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<ExtensionProxy> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
    impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::datastructs::Entry>> for *mut wire_cst_list_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::datastructs::Entry> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::datastructs::Episode>> for *mut wire_cst_list_episode {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::datastructs::Episode> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::datastructs::EpisodeList>> for *mut wire_cst_list_episode_list {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::datastructs::EpisodeList> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::datastructs::ImageListAudio>>
        for *mut wire_cst_list_image_list_audio
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::datastructs::ImageListAudio> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::datastructs::MediaType>> for *mut wire_cst_list_media_type {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::datastructs::MediaType> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::permission::Permission>> for *mut wire_cst_list_permission {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::permission::Permission> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, String)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::datastructs::Subtitles>> for *mut wire_cst_list_subtitles {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::datastructs::Subtitles> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<dion_runtime::permission::Permission> for wire_cst_permission {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::permission::Permission {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.StoragePermission };
                    dion_runtime::permission::Permission::StoragePermission {
                        path: ans.path.cst_decode(),
                        write: ans.write.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::simple::PermissionRequest> for wire_cst_permission_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::simple::PermissionRequest {
            crate::api::simple::PermissionRequest {
                permission: self.permission.cst_decode(),
                msg: self.msg.cst_decode(),
            }
        }
    }
    impl CstDecode<(String, String)> for wire_cst_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<dion_runtime::settings::Setting> for wire_cst_setting {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::settings::Setting {
            dion_runtime::settings::Setting {
                val: self.val.cst_decode(),
                settingtype: self.settingtype.cst_decode(),
                ui: self.ui.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::settings::SettingUI> for wire_cst_setting_ui {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::settings::SettingUI {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.PathSelection };
                    dion_runtime::settings::SettingUI::PathSelection {
                        label: ans.label.cst_decode(),
                        pickfolder: ans.pickfolder.cst_decode(),
                    }
                }
                1 => {
                    let ans = unsafe { self.kind.Slider };
                    dion_runtime::settings::SettingUI::Slider {
                        label: ans.label.cst_decode(),
                        min: ans.min.cst_decode(),
                        max: ans.max.cst_decode(),
                        step: ans.step.cst_decode(),
                    }
                }
                2 => {
                    let ans = unsafe { self.kind.Checkbox };
                    dion_runtime::settings::SettingUI::Checkbox {
                        label: ans.label.cst_decode(),
                    }
                }
                3 => {
                    let ans = unsafe { self.kind.Textbox };
                    dion_runtime::settings::SettingUI::Textbox {
                        label: ans.label.cst_decode(),
                    }
                }
                4 => {
                    let ans = unsafe { self.kind.Dropdown };
                    dion_runtime::settings::SettingUI::Dropdown {
                        label: ans.label.cst_decode(),
                        options: ans.options.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<dion_runtime::settings::Settingvalue> for wire_cst_settingvalue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::settings::Settingvalue {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.String };
                    dion_runtime::settings::Settingvalue::String {
                        val: ans.val.cst_decode(),
                        default_val: ans.default_val.cst_decode(),
                    }
                }
                1 => {
                    let ans = unsafe { self.kind.Number };
                    dion_runtime::settings::Settingvalue::Number {
                        val: ans.val.cst_decode(),
                        default_val: ans.default_val.cst_decode(),
                    }
                }
                2 => {
                    let ans = unsafe { self.kind.Boolean };
                    dion_runtime::settings::Settingvalue::Boolean {
                        val: ans.val.cst_decode(),
                        default_val: ans.default_val.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::Source> for wire_cst_source {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::Source {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.Data };
                    dion_runtime::datastructs::Source::Data {
                        sourcedata: ans.sourcedata.cst_decode(),
                    }
                }
                1 => {
                    let ans = unsafe { self.kind.Directlink };
                    dion_runtime::datastructs::Source::Directlink {
                        sourcedata: ans.sourcedata.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<dion_runtime::datastructs::Subtitles> for wire_cst_subtitles {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::datastructs::Subtitles {
            dion_runtime::datastructs::Subtitles {
                title: self.title.cst_decode(),
                url: self.url.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_data_source {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: DataSourceKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_data_source {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_entry {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                title: core::ptr::null_mut(),
                media_type: Default::default(),
                cover: core::ptr::null_mut(),
                cover_header: core::ptr::null_mut(),
                auther: core::ptr::null_mut(),
                rating: core::ptr::null_mut(),
                views: core::ptr::null_mut(),
                length: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_entry {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_entry_detailed {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                title: core::ptr::null_mut(),
                media_type: Default::default(),
                status: Default::default(),
                cover: core::ptr::null_mut(),
                cover_header: core::ptr::null_mut(),
                episodes: core::ptr::null_mut(),
                genres: core::ptr::null_mut(),
                alttitles: core::ptr::null_mut(),
                auther: core::ptr::null_mut(),
                rating: core::ptr::null_mut(),
                views: core::ptr::null_mut(),
                length: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_entry_detailed {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_episode {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                name: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                cover: core::ptr::null_mut(),
                cover_header: core::ptr::null_mut(),
                timestamp: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_episode {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_episode_list {
        fn new_with_null_ptr() -> Self {
            Self {
                title: core::ptr::null_mut(),
                episodes: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_episode_list {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_extension_data {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                repo: core::ptr::null_mut(),
                name: core::ptr::null_mut(),
                media_type: core::ptr::null_mut(),
                giturl: core::ptr::null_mut(),
                version: core::ptr::null_mut(),
                desc: core::ptr::null_mut(),
                author: core::ptr::null_mut(),
                license: core::ptr::null_mut(),
                tags: core::ptr::null_mut(),
                nsfw: core::ptr::null_mut(),
                lang: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                icon: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_extension_data {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_image_list_audio {
        fn new_with_null_ptr() -> Self {
            Self {
                link: core::ptr::null_mut(),
                from: Default::default(),
                to: Default::default(),
            }
        }
    }
    impl Default for wire_cst_image_list_audio {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_link_source {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: LinkSourceKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_link_source {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_permission {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: PermissionKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_permission {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_permission_request {
        fn new_with_null_ptr() -> Self {
            Self {
                permission: Default::default(),
                msg: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_permission_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_string_string {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_string_string {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_setting {
        fn new_with_null_ptr() -> Self {
            Self {
                val: Default::default(),
                settingtype: Default::default(),
                ui: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_setting {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_setting_ui {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: SettingUIKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_setting_ui {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_settingvalue {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: SettingvalueKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_settingvalue {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_source {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: SourceKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_source {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_subtitles {
        fn new_with_null_ptr() -> Self {
            Self {
                title: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_subtitles {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__CancelToken_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__simple__CancelToken_new_impl()
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionManagerProxy_add_from_file(
        port_: i64,
        that: usize,
        path: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__simple__ExtensionManagerProxy_add_from_file_impl(port_, that, path)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionManagerProxy_iter(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionManagerProxy_iter_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionManagerProxy_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__simple__ExtensionManagerProxy_new_impl()
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionManagerProxy_remove(
        port_: i64,
        that: usize,
        id: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__simple__ExtensionManagerProxy_remove_impl(port_, that, id)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_browse(
        port_: i64,
        that: usize,
        page: i64,
        sort: i32,
        token: *mut usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_browse_impl(port_, that, page, sort, token)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_data(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_data_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_detail(
        port_: i64,
        that: usize,
        entry: *mut wire_cst_entry,
        token: *mut usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_detail_impl(port_, that, entry, token)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_disable(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_disable_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_enable(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_enable_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_fromurl(
        port_: i64,
        that: usize,
        url: *mut wire_cst_list_prim_u_8_strict,
        token: *mut usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_fromurl_impl(port_, that, url, token)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_get_setting(
        port_: i64,
        that: usize,
        name: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__simple__ExtensionProxy_get_setting_impl(port_, that, name)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_is_enabled(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_is_enabled_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_new(
        port_: i64,
        filepath: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__simple__ExtensionProxy_new_impl(port_, filepath)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_permissions_iter(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_permissions_iter_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_remove_permissions(
        port_: i64,
        that: usize,
        permission: *mut wire_cst_permission,
    ) {
        wire__crate__api__simple__ExtensionProxy_remove_permissions_impl(port_, that, permission)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_search(
        port_: i64,
        that: usize,
        page: i64,
        filter: *mut wire_cst_list_prim_u_8_strict,
        token: *mut usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_search_impl(port_, that, page, filter, token)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_set_setting(
        port_: i64,
        that: usize,
        name: *mut wire_cst_list_prim_u_8_strict,
        setting: *mut wire_cst_settingvalue,
    ) {
        wire__crate__api__simple__ExtensionProxy_set_setting_impl(port_, that, name, setting)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_setting_ids_iter(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_setting_ids_iter_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__ExtensionProxy_source(
        port_: i64,
        that: usize,
        ep: *mut wire_cst_episode,
        token: *mut usize,
    ) {
        wire__crate__api__simple__ExtensionProxy_source_impl(port_, that, ep, token)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__QueueStore_default(
        port_: i64,
    ) {
        wire__crate__api__simple__QueueStore_default_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__init_app(port_: i64) {
        wire__crate__api__simple__init_app_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__internal_send_permission_request_answer(
        port_: i64,
        answer: bool,
    ) {
        wire__crate__api__simple__internal_send_permission_request_answer_impl(port_, answer)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__simple__internal_set_permission_request_listener(
        port_: i64,
        request: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__simple__internal_set_permission_request_listener_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionManagerProxy>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionProxy>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueueStore>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_data_source(
    ) -> *mut wire_cst_data_source {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_data_source::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_entry() -> *mut wire_cst_entry {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_entry::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_episode() -> *mut wire_cst_episode {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_episode::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_f_32(value: f32) -> *mut f32 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_link_source(
    ) -> *mut wire_cst_link_source {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_link_source::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_permission(
    ) -> *mut wire_cst_permission {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_permission::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_setting_ui(
    ) -> *mut wire_cst_setting_ui {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_setting_ui::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_settingvalue(
    ) -> *mut wire_cst_settingvalue {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_settingvalue::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy{
        let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_String(
        len: i32,
    ) -> *mut wire_cst_list_String {
        let wrap = wire_cst_list_String {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_entry(
        len: i32,
    ) -> *mut wire_cst_list_entry {
        let wrap = wire_cst_list_entry {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_entry>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_episode(
        len: i32,
    ) -> *mut wire_cst_list_episode {
        let wrap = wire_cst_list_episode {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_episode>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_episode_list(
        len: i32,
    ) -> *mut wire_cst_list_episode_list {
        let wrap = wire_cst_list_episode_list {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_episode_list>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_image_list_audio(
        len: i32,
    ) -> *mut wire_cst_list_image_list_audio {
        let wrap = wire_cst_list_image_list_audio {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_image_list_audio>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_media_type(
        len: i32,
    ) -> *mut wire_cst_list_media_type {
        let wrap = wire_cst_list_media_type {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_permission(
        len: i32,
    ) -> *mut wire_cst_list_permission {
        let wrap = wire_cst_list_permission {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_permission>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_record_string_string(
        len: i32,
    ) -> *mut wire_cst_list_record_string_string {
        let wrap = wire_cst_list_record_string_string {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_string_string>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_subtitles(
        len: i32,
    ) -> *mut wire_cst_list_subtitles {
        let wrap = wire_cst_list_subtitles {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_subtitles>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_data_source {
        tag: i32,
        kind: DataSourceKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union DataSourceKind {
        Paragraphlist: wire_cst_DataSource_Paragraphlist,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_DataSource_Paragraphlist {
        paragraphs: *mut wire_cst_list_String,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_entry {
        id: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
        title: *mut wire_cst_list_prim_u_8_strict,
        media_type: i32,
        cover: *mut wire_cst_list_prim_u_8_strict,
        cover_header: *mut wire_cst_list_record_string_string,
        auther: *mut wire_cst_list_String,
        rating: *mut f32,
        views: *mut f32,
        length: *mut i64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_entry_detailed {
        id: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
        title: *mut wire_cst_list_prim_u_8_strict,
        media_type: i32,
        status: i32,
        cover: *mut wire_cst_list_prim_u_8_strict,
        cover_header: *mut wire_cst_list_record_string_string,
        episodes: *mut wire_cst_list_episode_list,
        genres: *mut wire_cst_list_String,
        alttitles: *mut wire_cst_list_String,
        auther: *mut wire_cst_list_String,
        rating: *mut f32,
        views: *mut f32,
        length: *mut i64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_episode {
        id: *mut wire_cst_list_prim_u_8_strict,
        name: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
        cover: *mut wire_cst_list_prim_u_8_strict,
        cover_header: *mut wire_cst_list_record_string_string,
        timestamp: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_episode_list {
        title: *mut wire_cst_list_prim_u_8_strict,
        episodes: *mut wire_cst_list_episode,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_extension_data {
        id: *mut wire_cst_list_prim_u_8_strict,
        repo: *mut wire_cst_list_prim_u_8_strict,
        name: *mut wire_cst_list_prim_u_8_strict,
        media_type: *mut wire_cst_list_media_type,
        giturl: *mut wire_cst_list_prim_u_8_strict,
        version: *mut wire_cst_list_prim_u_8_strict,
        desc: *mut wire_cst_list_prim_u_8_strict,
        author: *mut wire_cst_list_prim_u_8_strict,
        license: *mut wire_cst_list_prim_u_8_strict,
        tags: *mut wire_cst_list_String,
        nsfw: *mut bool,
        lang: *mut wire_cst_list_String,
        url: *mut wire_cst_list_prim_u_8_strict,
        icon: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_image_list_audio {
        link: *mut wire_cst_list_prim_u_8_strict,
        from: i64,
        to: i64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_link_source {
        tag: i32,
        kind: LinkSourceKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union LinkSourceKind {
        Epub: wire_cst_LinkSource_Epub,
        Pdf: wire_cst_LinkSource_Pdf,
        Imagelist: wire_cst_LinkSource_Imagelist,
        M3u8: wire_cst_LinkSource_M3u8,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_LinkSource_Epub {
        link: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_LinkSource_Pdf {
        link: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_LinkSource_Imagelist {
        links: *mut wire_cst_list_String,
        header: *mut wire_cst_list_record_string_string,
        audio: *mut wire_cst_list_image_list_audio,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_LinkSource_M3u8 {
        link: *mut wire_cst_list_prim_u_8_strict,
        sub: *mut wire_cst_list_subtitles,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy
    {
        ptr: *mut usize,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_String {
        ptr: *mut *mut wire_cst_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_entry {
        ptr: *mut wire_cst_entry,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_episode {
        ptr: *mut wire_cst_episode,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_episode_list {
        ptr: *mut wire_cst_episode_list,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_image_list_audio {
        ptr: *mut wire_cst_image_list_audio,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_media_type {
        ptr: *mut i32,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_permission {
        ptr: *mut wire_cst_permission,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_string_string {
        ptr: *mut wire_cst_record_string_string,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_subtitles {
        ptr: *mut wire_cst_subtitles,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_permission {
        tag: i32,
        kind: PermissionKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union PermissionKind {
        StoragePermission: wire_cst_Permission_StoragePermission,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Permission_StoragePermission {
        path: *mut wire_cst_list_prim_u_8_strict,
        write: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_permission_request {
        permission: wire_cst_permission,
        msg: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_string_string {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_setting {
        val: wire_cst_settingvalue,
        settingtype: i32,
        ui: *mut wire_cst_setting_ui,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_setting_ui {
        tag: i32,
        kind: SettingUIKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union SettingUIKind {
        PathSelection: wire_cst_SettingUI_PathSelection,
        Slider: wire_cst_SettingUI_Slider,
        Checkbox: wire_cst_SettingUI_Checkbox,
        Textbox: wire_cst_SettingUI_Textbox,
        Dropdown: wire_cst_SettingUI_Dropdown,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_SettingUI_PathSelection {
        label: *mut wire_cst_list_prim_u_8_strict,
        pickfolder: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_SettingUI_Slider {
        label: *mut wire_cst_list_prim_u_8_strict,
        min: f64,
        max: f64,
        step: f64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_SettingUI_Checkbox {
        label: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_SettingUI_Textbox {
        label: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_SettingUI_Dropdown {
        label: *mut wire_cst_list_prim_u_8_strict,
        options: *mut wire_cst_list_record_string_string,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_settingvalue {
        tag: i32,
        kind: SettingvalueKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union SettingvalueKind {
        String: wire_cst_Settingvalue_String,
        Number: wire_cst_Settingvalue_Number,
        Boolean: wire_cst_Settingvalue_Boolean,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Settingvalue_String {
        val: *mut wire_cst_list_prim_u_8_strict,
        default_val: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Settingvalue_Number {
        val: f64,
        default_val: f64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Settingvalue_Boolean {
        val: bool,
        default_val: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_source {
        tag: i32,
        kind: SourceKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union SourceKind {
        Data: wire_cst_Source_Data,
        Directlink: wire_cst_Source_Directlink,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Source_Data {
        sourcedata: *mut wire_cst_data_source,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Source_Directlink {
        sourcedata: *mut wire_cst_link_source,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_subtitles {
        title: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
