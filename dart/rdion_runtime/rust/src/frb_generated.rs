// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::cancel::*;
use crate::api::client::*;
use crate::api::extension::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

use dion_runtime::data::action::*;
use dion_runtime::data::activity::*;
use dion_runtime::data::auth::*;
use dion_runtime::data::custom_ui::*;
use dion_runtime::data::extension::*;
use dion_runtime::data::extension_manager::*;
use dion_runtime::data::extension_repo::*;
use dion_runtime::data::permission::*;
use dion_runtime::data::settings::*;
use dion_runtime::data::source::*;
use serde_json::Value;

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1200270034;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__cancel__CancelToken_cancel_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CancelToken_cancel",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::cancel::CancelToken::cancel(&*api_that_guard);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__cancel__CancelToken_get_child_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CancelToken_get_child",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::cancel::CancelToken::get_child(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__cancel__CancelToken_is_cancelled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CancelToken_is_cancelled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::cancel::CancelToken::is_cancelled(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__cancel__CancelToken_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CancelToken_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::cancel::CancelToken::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__client__ExtensionClient_init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ExtensionClient_init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_load_data = decode_DartFn_Inputs_String_Output_String_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_store_data = decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_do_action = decode_DartFn_Inputs_action_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_request_permission =
                decode_DartFn_Inputs_permission_opt_String_Output_bool_AnyhowException(
                    <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
                );
            let api_get_path = decode_DartFn_Inputs__Output_String_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::client::ExtensionClient::init(
                            api_load_data,
                            api_store_data,
                            api_do_action,
                            api_request_permission,
                            api_get_path,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__client__ManagerClient_init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ManagerClient_init", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_get_path = decode_DartFn_Inputs__Output_String_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_get_client = decode_DartFn_Inputs_extension_data_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionClient_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::client::ManagerClient::init(api_get_path, api_get_client))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__api__extension__ProxyAdapter_browse_repo_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>,
    >,
    repo: impl CstDecode<dion_runtime::data::extension_repo::ExtensionRepo>,
    page: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyAdapter_browse_repo",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_repo = repo.cst_decode();
            let api_page = page.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyAdapter::browse_repo(
                            &*api_that_guard,
                            &api_repo,
                            api_page,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyAdapter_get_extensions_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyAdapter_get_extensions",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::extension::ProxyAdapter::get_extensions(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyAdapter_get_repo_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>,
    >,
    url: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyAdapter_get_repo",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_url = url.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyAdapter::get_repo(
                            &*api_that_guard,
                            &api_url,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyAdapter_init_dion_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    client: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyAdapter_init_dion",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_client = client.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_client_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_client,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_client_guard =
                                        Some(api_client.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_client_guard = api_client_guard.unwrap();
                        let output_ok =
                            crate::api::extension::ProxyAdapter::init_dion(&*api_client_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyAdapter_install_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>,
    >,
    location: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyAdapter_install",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_location = location.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyAdapter::install(
                            &*api_that_guard,
                            &api_location,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyAdapter_uninstall_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>,
    >,
    ext: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyAdapter_uninstall",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ext = ext.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let mut api_ext_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_that, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_ext, 1, false,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_ext_guard = Some(api_ext.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let api_ext_guard = api_ext_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyAdapter::uninstall(
                            &*api_that_guard,
                            &*api_ext_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_browse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_browse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::browse(
                            &*api_that_guard,
                            api_page,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_detail_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_detail",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_entryid = <dion_runtime::data::source::EntryId>::sse_decode(&mut deserializer);
            let api_settings = <std::collections::HashMap<
                String,
                dion_runtime::data::settings::Setting,
            >>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::detail(
                            &*api_that_guard,
                            api_entryid,
                            api_settings,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_get_extension_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_get_extension_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::get_extension_data(
                            &*api_that_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_get_permissions_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_get_permissions",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::get_permissions(
                            &*api_that_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_get_setting_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_get_setting",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_kind =
                <dion_runtime::data::settings::SettingKind>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::get_setting(
                            &*api_that_guard,
                            api_id,
                            api_kind,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_get_setting_ids_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_get_setting_ids",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_kind =
                <dion_runtime::data::settings::SettingKind>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::extension::ProxyExtension::get_setting_ids(
                                &*api_that_guard,
                                api_kind,
                            )
                            .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_get_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_get_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_kind =
                <dion_runtime::data::settings::SettingKind>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::get_settings(
                            &*api_that_guard,
                            api_kind,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_handle_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>,
    >,
    url: impl CstDecode<String>,
    token: impl CstDecode<Option<CancelToken>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_handle_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_url = url.cst_decode();
            let api_token = token.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::handle_url(
                            &*api_that_guard,
                            api_url,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_has_permission_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_has_permission",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_permission =
                <dion_runtime::data::permission::Permission>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::extension::ProxyExtension::has_permission(
                                &*api_that_guard,
                                api_permission,
                            )
                            .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_is_enabled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_is_enabled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::extension::ProxyExtension::is_enabled(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_map_entry_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_map_entry",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_entry =
                <dion_runtime::data::source::EntryDetailed>::sse_decode(&mut deserializer);
            let api_settings = <std::collections::HashMap<
                String,
                dion_runtime::data::settings::Setting,
            >>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::map_entry(
                            &*api_that_guard,
                            api_entry,
                            api_settings,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_map_source_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_map_source",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_source = <dion_runtime::data::source::Source>::sse_decode(&mut deserializer);
            let api_epid = <dion_runtime::data::source::EpisodeId>::sse_decode(&mut deserializer);
            let api_settings = <std::collections::HashMap<
                String,
                dion_runtime::data::settings::Setting,
            >>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::map_source(
                            &*api_that_guard,
                            api_source,
                            api_epid,
                            api_settings,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_merge_setting_definition_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_merge_setting_definition",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_kind =
                <dion_runtime::data::settings::SettingKind>::sse_decode(&mut deserializer);
            let api_definition =
                <dion_runtime::data::settings::Setting>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::extension::ProxyExtension::merge_setting_definition(
                                &*api_that_guard,
                                api_id,
                                api_kind,
                                api_definition,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_on_entry_activity_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_on_entry_activity",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_activity =
                <dion_runtime::data::activity::EntryActivity>::sse_decode(&mut deserializer);
            let api_entry =
                <dion_runtime::data::source::EntryDetailed>::sse_decode(&mut deserializer);
            let api_settings = <std::collections::HashMap<
                String,
                dion_runtime::data::settings::Setting,
            >>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::on_entry_activity(
                            &*api_that_guard,
                            api_activity,
                            api_entry,
                            api_settings,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_reload_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_reload",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::extension::ProxyExtension::reload(&mut *api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_remove_permission_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_remove_permission",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_permission =
                <dion_runtime::data::permission::Permission>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::remove_permission(
                            &*api_that_guard,
                            api_permission,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_remove_setting_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_remove_setting",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_kind =
                <dion_runtime::data::settings::SettingKind>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::remove_setting(
                            &*api_that_guard,
                            api_id,
                            api_kind,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_search_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_search",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            let api_filter = <String>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::search(
                            &*api_that_guard,
                            api_page,
                            api_filter,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_set_enabled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>,
    >,
    enabled: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_set_enabled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_enabled = enabled.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::set_enabled(
                            &mut *api_that_guard,
                            api_enabled,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_set_setting_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_set_setting",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_kind =
                <dion_runtime::data::settings::SettingKind>::sse_decode(&mut deserializer);
            let api_value =
                <dion_runtime::data::settings::SettingValue>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::set_setting(
                            &*api_that_guard,
                            api_id,
                            api_kind,
                            api_value,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__extension__ProxyExtension_source_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProxyExtension_source",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
            >>::sse_decode(&mut deserializer);
            let api_epid = <dion_runtime::data::source::EpisodeId>::sse_decode(&mut deserializer);
            let api_settings = <std::collections::HashMap<
                String,
                dion_runtime::data::settings::Setting,
            >>::sse_decode(&mut deserializer);
            let api_token = <Option<CancelToken>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::extension::ProxyExtension::source(
                            &*api_that_guard,
                            api_epid,
                            api_settings,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__dion_runtime__data__source__entry_list_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "entry_list_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(dion_runtime::data::source::EntryList::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__extension__extension_data_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "extension_data_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::extension::ExtensionData::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__extension_manager__extension_manager_data_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "extension_manager_data_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::extension_manager::ExtensionManagerData::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__extension_repo__extension_repo_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "extension_repo_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::extension_repo::ExtensionRepo::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__lets_init_app_here_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lets_init_app_here",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::lets_init_app_here();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__source__link_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "link_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(dion_runtime::data::source::Link::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__source__media_type_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "media_type_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(dion_runtime::data::source::MediaType::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__source__release_status_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "release_status_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(dion_runtime::data::source::ReleaseStatus::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__extension_repo__remote_extension_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remote_extension_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::extension_repo::RemoteExtension::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__extension_repo__remote_extension_result_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remote_extension_result_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::extension_repo::RemoteExtensionResult::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__extension__source_open_type_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "source_open_type_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::extension::SourceOpenType::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__dion_runtime__data__custom_ui__timestamp_type_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "timestamp_type_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        dion_runtime::data::custom_ui::TimestampType::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    match None::<dion_runtime::data::action::Action>.unwrap() {
        dion_runtime::data::action::Action::OpenBrowser { url } => {
            let _: String = url;
        }
        dion_runtime::data::action::Action::Popup {
            title,
            content,
            actions,
        } => {
            let _: String = title;
            let _: dion_runtime::data::custom_ui::CustomUI = content;
            let _: Vec<dion_runtime::data::action::PopupAction> = actions;
        }
        dion_runtime::data::action::Action::Nav { title, content } => {
            let _: String = title;
            let _: dion_runtime::data::custom_ui::CustomUI = content;
        }
        dion_runtime::data::action::Action::TriggerEvent { event, data } => {
            let _: String = event;
            let _: String = data;
        }
        dion_runtime::data::action::Action::NavEntry { entry } => {
            let _: dion_runtime::data::source::EntryDetailed = entry;
        }
    }
    match None::<dion_runtime::data::custom_ui::CustomUI>.unwrap() {
        dion_runtime::data::custom_ui::CustomUI::Text { text } => {
            let _: String = text;
        }
        dion_runtime::data::custom_ui::CustomUI::Image {
            image,
            width,
            height,
        } => {
            let _: dion_runtime::data::source::Link = image;
            let _: Option<i32> = width;
            let _: Option<i32> = height;
        }
        dion_runtime::data::custom_ui::CustomUI::Link { link, label } => {
            let _: String = link;
            let _: Option<String> = label;
        }
        dion_runtime::data::custom_ui::CustomUI::TimeStamp { timestamp, display } => {
            let _: String = timestamp;
            let _: dion_runtime::data::custom_ui::TimestampType = display;
        }
        dion_runtime::data::custom_ui::CustomUI::EntryCard { entry } => {
            let _: dion_runtime::data::source::Entry = entry;
        }
        dion_runtime::data::custom_ui::CustomUI::Card { image, top, bottom } => {
            let _: dion_runtime::data::source::Link = image;
            let _: Box<dion_runtime::data::custom_ui::CustomUI> = top;
            let _: Box<dion_runtime::data::custom_ui::CustomUI> = bottom;
        }
        dion_runtime::data::custom_ui::CustomUI::Feed { event, data } => {
            let _: String = event;
            let _: String = data;
        }
        dion_runtime::data::custom_ui::CustomUI::Button { label, on_click } => {
            let _: String = label;
            let _: Option<Box<dion_runtime::data::action::UIAction>> = on_click;
        }
        dion_runtime::data::custom_ui::CustomUI::InlineSetting {
            setting_id,
            setting_kind,
            on_commit,
        } => {
            let _: String = setting_id;
            let _: dion_runtime::data::settings::SettingKind = setting_kind;
            let _: Option<Box<dion_runtime::data::action::UIAction>> = on_commit;
        }
        dion_runtime::data::custom_ui::CustomUI::Slot { id, child } => {
            let _: String = id;
            let _: Box<dion_runtime::data::custom_ui::CustomUI> = child;
        }
        dion_runtime::data::custom_ui::CustomUI::Column { children } => {
            let _: Vec<dion_runtime::data::custom_ui::CustomUI> = children;
        }
        dion_runtime::data::custom_ui::CustomUI::Row { children } => {
            let _: Vec<dion_runtime::data::custom_ui::CustomUI> = children;
        }
    }
    {
        let DropdownOption = None::<dion_runtime::data::settings::DropdownOption>.unwrap();
        let _: String = DropdownOption.label;
        let _: String = DropdownOption.value;
    }
    {
        let Entry = None::<dion_runtime::data::source::Entry>.unwrap();
        let _: Vec<dion_runtime::data::source::EntryId> = Entry.id;
        let _: String = Entry.url;
        let _: String = Entry.title;
        let _: dion_runtime::data::source::MediaType = Entry.media_type;
        let _: Option<dion_runtime::data::source::Link> = Entry.cover;
        let _: Option<Vec<String>> = Entry.author;
        let _: Option<f32> = Entry.rating;
        let _: Option<f32> = Entry.views;
        let _: Option<i32> = Entry.length;
    }
    match None::<dion_runtime::data::activity::EntryActivity>.unwrap() {
        dion_runtime::data::activity::EntryActivity::EpisodeActivity { progress } => {
            let _: i32 = progress;
        }
    }
    {
        let EntryDetailed = None::<dion_runtime::data::source::EntryDetailed>.unwrap();
        let _: Vec<dion_runtime::data::source::EntryId> = EntryDetailed.id;
        let _: String = EntryDetailed.url;
        let _: Vec<String> = EntryDetailed.titles;
        let _: Option<Vec<String>> = EntryDetailed.author;
        let _: Option<dion_runtime::data::custom_ui::CustomUI> = EntryDetailed.ui;
        let _: Option<std::collections::HashMap<String, String>> = EntryDetailed.meta;
        let _: dion_runtime::data::source::MediaType = EntryDetailed.media_type;
        let _: dion_runtime::data::source::ReleaseStatus = EntryDetailed.status;
        let _: String = EntryDetailed.description;
        let _: String = EntryDetailed.language;
        let _: Option<dion_runtime::data::source::Link> = EntryDetailed.cover;
        let _: Vec<dion_runtime::data::source::Episode> = EntryDetailed.episodes;
        let _: Option<Vec<String>> = EntryDetailed.genres;
        let _: Option<f32> = EntryDetailed.rating;
        let _: Option<f32> = EntryDetailed.views;
        let _: Option<i32> = EntryDetailed.length;
    }
    {
        let EntryDetailedResult = None::<dion_runtime::data::source::EntryDetailedResult>.unwrap();
        let _: dion_runtime::data::source::EntryDetailed = EntryDetailedResult.entry;
        let _: std::collections::HashMap<String, dion_runtime::data::settings::Setting> =
            EntryDetailedResult.settings;
    }
    {
        let EntryId = None::<dion_runtime::data::source::EntryId>.unwrap();
        let _: String = EntryId.uid;
        let _: Option<String> = EntryId.iddata;
        let _: String = EntryId.id_type;
    }
    {
        let EntryList = None::<dion_runtime::data::source::EntryList>.unwrap();
        let _: Option<bool> = EntryList.hasnext;
        let _: Option<i32> = EntryList.length;
        let _: Vec<dion_runtime::data::source::Entry> = EntryList.content;
    }
    {
        let Episode = None::<dion_runtime::data::source::Episode>.unwrap();
        let _: Vec<dion_runtime::data::source::EpisodeId> = Episode.id;
        let _: String = Episode.name;
        let _: Option<String> = Episode.description;
        let _: String = Episode.url;
        let _: Option<dion_runtime::data::source::Link> = Episode.cover;
        let _: Option<String> = Episode.timestamp;
    }
    {
        let EpisodeId = None::<dion_runtime::data::source::EpisodeId>.unwrap();
        let _: String = EpisodeId.uid;
        let _: Option<String> = EpisodeId.iddata;
        let _: String = EpisodeId.id_type;
    }
    {
        let ExtensionData = None::<dion_runtime::data::extension::ExtensionData>.unwrap();
        let _: String = ExtensionData.id;
        let _: String = ExtensionData.name;
        let _: String = ExtensionData.url;
        let _: String = ExtensionData.icon;
        let _: Option<String> = ExtensionData.desc;
        let _: Vec<String> = ExtensionData.author;
        let _: Vec<String> = ExtensionData.tags;
        let _: Vec<String> = ExtensionData.lang;
        let _: bool = ExtensionData.nsfw;
        let _: std::collections::HashSet<dion_runtime::data::source::MediaType> =
            ExtensionData.media_type;
        let _: std::collections::HashSet<dion_runtime::data::extension::ExtensionType> =
            ExtensionData.extension_type;
        let _: Option<String> = ExtensionData.repo;
        let _: String = ExtensionData.version;
        let _: String = ExtensionData.license;
        let _: bool = ExtensionData.compatible;
    }
    {
        let ExtensionManagerData =
            None::<dion_runtime::data::extension_manager::ExtensionManagerData>.unwrap();
        let _: String = ExtensionManagerData.name;
        let _: Option<String> = ExtensionManagerData.icon;
        let _: Option<String> = ExtensionManagerData.repo;
        let _: u32 = ExtensionManagerData.api_version;
    }
    {
        let ExtensionRepo = None::<dion_runtime::data::extension_repo::ExtensionRepo>.unwrap();
        let _: String = ExtensionRepo.name;
        let _: String = ExtensionRepo.description;
        let _: String = ExtensionRepo.url;
        let _: String = ExtensionRepo.id;
    }
    match None::<dion_runtime::data::extension::ExtensionType>.unwrap() {
        dion_runtime::data::extension::ExtensionType::EntryProvider { has_search } => {
            let _: bool = has_search;
        }
        dion_runtime::data::extension::ExtensionType::EntryDetailedProvider { id_types } => {
            let _: Vec<String> = id_types;
        }
        dion_runtime::data::extension::ExtensionType::SourceProvider { id_types } => {
            let _: Vec<String> = id_types;
        }
        dion_runtime::data::extension::ExtensionType::SourceProcessor {
            sourcetypes,
            opentype,
        } => {
            let _: std::collections::HashSet<dion_runtime::data::source::SourceType> = sourcetypes;
            let _: std::collections::HashSet<dion_runtime::data::extension::SourceOpenType> =
                opentype;
        }
        dion_runtime::data::extension::ExtensionType::EntryProcessor {
            trigger_map_entry,
            trigger_on_entry_activity,
        } => {
            let _: bool = trigger_map_entry;
            let _: bool = trigger_on_entry_activity;
        }
        dion_runtime::data::extension::ExtensionType::URLHandler { url_patterns } => {
            let _: Vec<String> = url_patterns;
        }
    }
    {
        let ImageListAudio = None::<dion_runtime::data::source::ImageListAudio>.unwrap();
        let _: dion_runtime::data::source::Link = ImageListAudio.link;
        let _: i32 = ImageListAudio.from;
        let _: i32 = ImageListAudio.to;
    }
    {
        let Link = None::<dion_runtime::data::source::Link>.unwrap();
        let _: String = Link.url;
        let _: Option<std::collections::HashMap<String, String>> = Link.header;
    }
    {
        let Mp3Chapter = None::<dion_runtime::data::source::Mp3Chapter>.unwrap();
        let _: String = Mp3Chapter.title;
        let _: dion_runtime::data::source::Link = Mp3Chapter.url;
    }
    match None::<dion_runtime::data::source::Paragraph>.unwrap() {
        dion_runtime::data::source::Paragraph::Text { content } => {
            let _: String = content;
        }
        dion_runtime::data::source::Paragraph::CustomUI { ui } => {
            let _: Box<dion_runtime::data::custom_ui::CustomUI> = ui;
        }
    }
    match None::<dion_runtime::data::permission::Permission>.unwrap() {
        dion_runtime::data::permission::Permission::Storage { path, write } => {
            let _: String = path;
            let _: bool = write;
        }
        dion_runtime::data::permission::Permission::Network { domain } => {
            let _: String = domain;
        }
        dion_runtime::data::permission::Permission::ActionPopup => {}
        dion_runtime::data::permission::Permission::ArbitraryNetwork => {}
    }
    {
        let PopupAction = None::<dion_runtime::data::action::PopupAction>.unwrap();
        let _: String = PopupAction.label;
        let _: Box<dion_runtime::data::action::Action> = PopupAction.onclick;
    }
    {
        let RemoteExtension = None::<dion_runtime::data::extension_repo::RemoteExtension>.unwrap();
        let _: String = RemoteExtension.id;
        let _: String = RemoteExtension.exturl;
        let _: String = RemoteExtension.name;
        let _: Option<dion_runtime::data::source::Link> = RemoteExtension.cover;
        let _: String = RemoteExtension.version;
        let _: bool = RemoteExtension.compatible;
    }
    {
        let RemoteExtensionResult =
            None::<dion_runtime::data::extension_repo::RemoteExtensionResult>.unwrap();
        let _: Vec<dion_runtime::data::extension_repo::RemoteExtension> =
            RemoteExtensionResult.content;
        let _: Option<bool> = RemoteExtensionResult.hasnext;
        let _: Option<i32> = RemoteExtensionResult.length;
    }
    {
        let Setting = None::<dion_runtime::data::settings::Setting>.unwrap();
        let _: String = Setting.label;
        let _: dion_runtime::data::settings::SettingValue = Setting.value;
        let _: dion_runtime::data::settings::SettingValue = Setting.default;
        let _: bool = Setting.visible;
        let _: Option<dion_runtime::data::settings::SettingsUI> = Setting.ui;
    }
    match None::<dion_runtime::data::settings::SettingValue>.unwrap() {
        dion_runtime::data::settings::SettingValue::String { data } => {
            let _: String = data;
        }
        dion_runtime::data::settings::SettingValue::Number { data } => {
            let _: f32 = data;
        }
        dion_runtime::data::settings::SettingValue::Boolean { data } => {
            let _: bool = data;
        }
        dion_runtime::data::settings::SettingValue::StringList { data } => {
            let _: Vec<String> = data;
        }
    }
    match None::<dion_runtime::data::settings::SettingsUI>.unwrap() {
        dion_runtime::data::settings::SettingsUI::CheckBox => {}
        dion_runtime::data::settings::SettingsUI::Slider { min, max, step } => {
            let _: f64 = min;
            let _: f64 = max;
            let _: i32 = step;
        }
        dion_runtime::data::settings::SettingsUI::Dropdown { options } => {
            let _: Vec<dion_runtime::data::settings::DropdownOption> = options;
        }
    }
    match None::<dion_runtime::data::source::Source>.unwrap() {
        dion_runtime::data::source::Source::Epub { link } => {
            let _: dion_runtime::data::source::Link = link;
        }
        dion_runtime::data::source::Source::Pdf { link } => {
            let _: dion_runtime::data::source::Link = link;
        }
        dion_runtime::data::source::Source::Imagelist { links, audio } => {
            let _: Vec<dion_runtime::data::source::Link> = links;
            let _: Option<Vec<dion_runtime::data::source::ImageListAudio>> = audio;
        }
        dion_runtime::data::source::Source::M3u8 { link, sub } => {
            let _: dion_runtime::data::source::Link = link;
            let _: Vec<dion_runtime::data::source::Subtitles> = sub;
        }
        dion_runtime::data::source::Source::Mp3 { chapters } => {
            let _: Vec<dion_runtime::data::source::Mp3Chapter> = chapters;
        }
        dion_runtime::data::source::Source::Paragraphlist { paragraphs } => {
            let _: Vec<dion_runtime::data::source::Paragraph> = paragraphs;
        }
    }
    {
        let SourceResult = None::<dion_runtime::data::source::SourceResult>.unwrap();
        let _: dion_runtime::data::source::Source = SourceResult.source;
        let _: std::collections::HashMap<String, dion_runtime::data::settings::Setting> =
            SourceResult.settings;
    }
    {
        let Subtitles = None::<dion_runtime::data::source::Subtitles>.unwrap();
        let _: String = Subtitles.title;
        let _: dion_runtime::data::source::Link = Subtitles.url;
    }
    match None::<dion_runtime::data::action::UIAction>.unwrap() {
        dion_runtime::data::action::UIAction::Action { action } => {
            let _: dion_runtime::data::action::Action = action;
        }
        dion_runtime::data::action::UIAction::SwapContent {
            targetid,
            event,
            data,
            placeholder,
        } => {
            let _: String = targetid;
            let _: String = event;
            let _: String = data;
            let _: Option<dion_runtime::data::custom_ui::CustomUI> = placeholder;
        }
    }
};

// Section: related_funcs

fn decode_DartFn_Inputs_String_Output_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> String {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, String) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String, arg1: String) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}
fn decode_DartFn_Inputs__Output_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn() -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque) -> String {
        let args = vec![];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move || {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(dart_opaque.clone()))
    }
}
fn decode_DartFn_Inputs_action_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(dion_runtime::data::action::Action) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: dion_runtime::data::action::Action,
    ) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: dion_runtime::data::action::Action| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_extension_data_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionClient_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    dion_runtime::data::extension::ExtensionData,
) -> flutter_rust_bridge::DartFnFuture<ExtensionClient> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: dion_runtime::data::extension::ExtensionData,
    ) -> ExtensionClient {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<ExtensionClient>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: dion_runtime::data::extension::ExtensionData| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_permission_opt_String_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    dion_runtime::data::permission::Permission,
    Option<String>,
) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: dion_runtime::data::permission::Permission,
        arg1: Option<String>,
    ) -> bool {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: dion_runtime::data::permission::Permission, arg1: Option<String>| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f32> for f32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<dion_runtime::data::source::MediaType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::data::source::MediaType {
        match self {
            0 => dion_runtime::data::source::MediaType::Video,
            1 => dion_runtime::data::source::MediaType::Comic,
            2 => dion_runtime::data::source::MediaType::Audio,
            3 => dion_runtime::data::source::MediaType::Book,
            4 => dion_runtime::data::source::MediaType::Unknown,
            _ => unreachable!("Invalid variant for MediaType: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::data::source::ReleaseStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::data::source::ReleaseStatus {
        match self {
            0 => dion_runtime::data::source::ReleaseStatus::Releasing,
            1 => dion_runtime::data::source::ReleaseStatus::Complete,
            2 => dion_runtime::data::source::ReleaseStatus::Unknown,
            _ => unreachable!("Invalid variant for ReleaseStatus: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::data::extension::SourceOpenType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::data::extension::SourceOpenType {
        match self {
            0 => dion_runtime::data::extension::SourceOpenType::Download,
            1 => dion_runtime::data::extension::SourceOpenType::Stream,
            _ => unreachable!("Invalid variant for SourceOpenType: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::data::source::SourceType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::data::source::SourceType {
        match self {
            0 => dion_runtime::data::source::SourceType::Epub,
            1 => dion_runtime::data::source::SourceType::Pdf,
            2 => dion_runtime::data::source::SourceType::Imagelist,
            3 => dion_runtime::data::source::SourceType::M3u8,
            4 => dion_runtime::data::source::SourceType::Mp3,
            5 => dion_runtime::data::source::SourceType::Paragraphlist,
            _ => unreachable!("Invalid variant for SourceType: {}", self),
        }
    }
}
impl CstDecode<dion_runtime::data::custom_ui::TimestampType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> dion_runtime::data::custom_ui::TimestampType {
        match self {
            0 => dion_runtime::data::custom_ui::TimestampType::Relative,
            1 => dion_runtime::data::custom_ui::TimestampType::Absolute,
            _ => unreachable!("Invalid variant for TimestampType: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for CancelToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ExtensionClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ManagerClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ProxyAdapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ProxyExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, dion_runtime::data::settings::Setting> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<(String, dion_runtime::data::settings::Setting)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for std::collections::HashSet<dion_runtime::data::extension::ExtensionType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<dion_runtime::data::extension::ExtensionType>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashSet<dion_runtime::data::source::MediaType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<dion_runtime::data::source::MediaType>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashSet<dion_runtime::data::extension::SourceOpenType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<dion_runtime::data::extension::SourceOpenType>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashSet<dion_runtime::data::source::SourceType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<dion_runtime::data::source::SourceType>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for dion_runtime::data::action::Action {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_url = <String>::sse_decode(deserializer);
                return dion_runtime::data::action::Action::OpenBrowser { url: var_url };
            }
            1 => {
                let mut var_title = <String>::sse_decode(deserializer);
                let mut var_content =
                    <dion_runtime::data::custom_ui::CustomUI>::sse_decode(deserializer);
                let mut var_actions =
                    <Vec<dion_runtime::data::action::PopupAction>>::sse_decode(deserializer);
                return dion_runtime::data::action::Action::Popup {
                    title: var_title,
                    content: var_content,
                    actions: var_actions,
                };
            }
            2 => {
                let mut var_title = <String>::sse_decode(deserializer);
                let mut var_content =
                    <dion_runtime::data::custom_ui::CustomUI>::sse_decode(deserializer);
                return dion_runtime::data::action::Action::Nav {
                    title: var_title,
                    content: var_content,
                };
            }
            3 => {
                let mut var_event = <String>::sse_decode(deserializer);
                let mut var_data = <String>::sse_decode(deserializer);
                return dion_runtime::data::action::Action::TriggerEvent {
                    event: var_event,
                    data: var_data,
                };
            }
            4 => {
                let mut var_entry =
                    <dion_runtime::data::source::EntryDetailed>::sse_decode(deserializer);
                return dion_runtime::data::action::Action::NavEntry { entry: var_entry };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for Box<dion_runtime::data::action::Action> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<dion_runtime::data::action::Action>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for Box<dion_runtime::data::custom_ui::CustomUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<dion_runtime::data::custom_ui::CustomUI>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for Box<dion_runtime::data::action::UIAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<dion_runtime::data::action::UIAction>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for dion_runtime::data::custom_ui::CustomUI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_text = <String>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Text { text: var_text };
            }
            1 => {
                let mut var_image = <dion_runtime::data::source::Link>::sse_decode(deserializer);
                let mut var_width = <Option<i32>>::sse_decode(deserializer);
                let mut var_height = <Option<i32>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Image {
                    image: var_image,
                    width: var_width,
                    height: var_height,
                };
            }
            2 => {
                let mut var_link = <String>::sse_decode(deserializer);
                let mut var_label = <Option<String>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Link {
                    link: var_link,
                    label: var_label,
                };
            }
            3 => {
                let mut var_timestamp = <String>::sse_decode(deserializer);
                let mut var_display =
                    <dion_runtime::data::custom_ui::TimestampType>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::TimeStamp {
                    timestamp: var_timestamp,
                    display: var_display,
                };
            }
            4 => {
                let mut var_entry = <dion_runtime::data::source::Entry>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::EntryCard { entry: var_entry };
            }
            5 => {
                let mut var_image = <dion_runtime::data::source::Link>::sse_decode(deserializer);
                let mut var_top =
                    <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                let mut var_bottom =
                    <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Card {
                    image: var_image,
                    top: var_top,
                    bottom: var_bottom,
                };
            }
            6 => {
                let mut var_event = <String>::sse_decode(deserializer);
                let mut var_data = <String>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Feed {
                    event: var_event,
                    data: var_data,
                };
            }
            7 => {
                let mut var_label = <String>::sse_decode(deserializer);
                let mut var_onClick =
                    <Option<Box<dion_runtime::data::action::UIAction>>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Button {
                    label: var_label,
                    on_click: var_onClick,
                };
            }
            8 => {
                let mut var_settingId = <String>::sse_decode(deserializer);
                let mut var_settingKind =
                    <dion_runtime::data::settings::SettingKind>::sse_decode(deserializer);
                let mut var_onCommit =
                    <Option<Box<dion_runtime::data::action::UIAction>>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::InlineSetting {
                    setting_id: var_settingId,
                    setting_kind: var_settingKind,
                    on_commit: var_onCommit,
                };
            }
            9 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_child =
                    <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Slot {
                    id: var_id,
                    child: var_child,
                };
            }
            10 => {
                let mut var_children =
                    <Vec<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Column {
                    children: var_children,
                };
            }
            11 => {
                let mut var_children =
                    <Vec<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                return dion_runtime::data::custom_ui::CustomUI::Row {
                    children: var_children,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::settings::DropdownOption {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return dion_runtime::data::settings::DropdownOption {
            label: var_label,
            value: var_value,
        };
    }
}

impl SseDecode for dion_runtime::data::source::Entry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Vec<dion_runtime::data::source::EntryId>>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_mediaType = <dion_runtime::data::source::MediaType>::sse_decode(deserializer);
        let mut var_cover = <Option<dion_runtime::data::source::Link>>::sse_decode(deserializer);
        let mut var_author = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_rating = <Option<f32>>::sse_decode(deserializer);
        let mut var_views = <Option<f32>>::sse_decode(deserializer);
        let mut var_length = <Option<i32>>::sse_decode(deserializer);
        return dion_runtime::data::source::Entry {
            id: var_id,
            url: var_url,
            title: var_title,
            media_type: var_mediaType,
            cover: var_cover,
            author: var_author,
            rating: var_rating,
            views: var_views,
            length: var_length,
        };
    }
}

impl SseDecode for dion_runtime::data::activity::EntryActivity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_progress = <i32>::sse_decode(deserializer);
                return dion_runtime::data::activity::EntryActivity::EpisodeActivity {
                    progress: var_progress,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::source::EntryDetailed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Vec<dion_runtime::data::source::EntryId>>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_titles = <Vec<String>>::sse_decode(deserializer);
        let mut var_author = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_ui =
            <Option<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
        let mut var_meta =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        let mut var_mediaType = <dion_runtime::data::source::MediaType>::sse_decode(deserializer);
        let mut var_status = <dion_runtime::data::source::ReleaseStatus>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_language = <String>::sse_decode(deserializer);
        let mut var_cover = <Option<dion_runtime::data::source::Link>>::sse_decode(deserializer);
        let mut var_episodes = <Vec<dion_runtime::data::source::Episode>>::sse_decode(deserializer);
        let mut var_genres = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_rating = <Option<f32>>::sse_decode(deserializer);
        let mut var_views = <Option<f32>>::sse_decode(deserializer);
        let mut var_length = <Option<i32>>::sse_decode(deserializer);
        return dion_runtime::data::source::EntryDetailed {
            id: var_id,
            url: var_url,
            titles: var_titles,
            author: var_author,
            ui: var_ui,
            meta: var_meta,
            media_type: var_mediaType,
            status: var_status,
            description: var_description,
            language: var_language,
            cover: var_cover,
            episodes: var_episodes,
            genres: var_genres,
            rating: var_rating,
            views: var_views,
            length: var_length,
        };
    }
}

impl SseDecode for dion_runtime::data::source::EntryDetailedResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_entry = <dion_runtime::data::source::EntryDetailed>::sse_decode(deserializer);
        let mut var_settings = <std::collections::HashMap<
            String,
            dion_runtime::data::settings::Setting,
        >>::sse_decode(deserializer);
        return dion_runtime::data::source::EntryDetailedResult {
            entry: var_entry,
            settings: var_settings,
        };
    }
}

impl SseDecode for dion_runtime::data::source::EntryId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uid = <String>::sse_decode(deserializer);
        let mut var_iddata = <Option<String>>::sse_decode(deserializer);
        let mut var_idType = <String>::sse_decode(deserializer);
        return dion_runtime::data::source::EntryId {
            uid: var_uid,
            iddata: var_iddata,
            id_type: var_idType,
        };
    }
}

impl SseDecode for dion_runtime::data::source::EntryList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hasnext = <Option<bool>>::sse_decode(deserializer);
        let mut var_length = <Option<i32>>::sse_decode(deserializer);
        let mut var_content = <Vec<dion_runtime::data::source::Entry>>::sse_decode(deserializer);
        return dion_runtime::data::source::EntryList {
            hasnext: var_hasnext,
            length: var_length,
            content: var_content,
        };
    }
}

impl SseDecode for dion_runtime::data::source::Episode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <Vec<dion_runtime::data::source::EpisodeId>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_cover = <Option<dion_runtime::data::source::Link>>::sse_decode(deserializer);
        let mut var_timestamp = <Option<String>>::sse_decode(deserializer);
        return dion_runtime::data::source::Episode {
            id: var_id,
            name: var_name,
            description: var_description,
            url: var_url,
            cover: var_cover,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for dion_runtime::data::source::EpisodeId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uid = <String>::sse_decode(deserializer);
        let mut var_iddata = <Option<String>>::sse_decode(deserializer);
        let mut var_idType = <String>::sse_decode(deserializer);
        return dion_runtime::data::source::EpisodeId {
            uid: var_uid,
            iddata: var_iddata,
            id_type: var_idType,
        };
    }
}

impl SseDecode for dion_runtime::data::extension::ExtensionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_icon = <String>::sse_decode(deserializer);
        let mut var_desc = <Option<String>>::sse_decode(deserializer);
        let mut var_author = <Vec<String>>::sse_decode(deserializer);
        let mut var_tags = <Vec<String>>::sse_decode(deserializer);
        let mut var_lang = <Vec<String>>::sse_decode(deserializer);
        let mut var_nsfw = <bool>::sse_decode(deserializer);
        let mut var_mediaType =
            <std::collections::HashSet<dion_runtime::data::source::MediaType>>::sse_decode(
                deserializer,
            );
        let mut var_extensionType = <std::collections::HashSet<
            dion_runtime::data::extension::ExtensionType,
        >>::sse_decode(deserializer);
        let mut var_repo = <Option<String>>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_license = <String>::sse_decode(deserializer);
        let mut var_compatible = <bool>::sse_decode(deserializer);
        return dion_runtime::data::extension::ExtensionData {
            id: var_id,
            name: var_name,
            url: var_url,
            icon: var_icon,
            desc: var_desc,
            author: var_author,
            tags: var_tags,
            lang: var_lang,
            nsfw: var_nsfw,
            media_type: var_mediaType,
            extension_type: var_extensionType,
            repo: var_repo,
            version: var_version,
            license: var_license,
            compatible: var_compatible,
        };
    }
}

impl SseDecode for dion_runtime::data::extension_manager::ExtensionManagerData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_icon = <Option<String>>::sse_decode(deserializer);
        let mut var_repo = <Option<String>>::sse_decode(deserializer);
        let mut var_apiVersion = <u32>::sse_decode(deserializer);
        return dion_runtime::data::extension_manager::ExtensionManagerData {
            name: var_name,
            icon: var_icon,
            repo: var_repo,
            api_version: var_apiVersion,
        };
    }
}

impl SseDecode for dion_runtime::data::extension_repo::ExtensionRepo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_id = <String>::sse_decode(deserializer);
        return dion_runtime::data::extension_repo::ExtensionRepo {
            name: var_name,
            description: var_description,
            url: var_url,
            id: var_id,
        };
    }
}

impl SseDecode for dion_runtime::data::extension::ExtensionType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_hasSearch = <bool>::sse_decode(deserializer);
                return dion_runtime::data::extension::ExtensionType::EntryProvider {
                    has_search: var_hasSearch,
                };
            }
            1 => {
                let mut var_idTypes = <Vec<String>>::sse_decode(deserializer);
                return dion_runtime::data::extension::ExtensionType::EntryDetailedProvider {
                    id_types: var_idTypes,
                };
            }
            2 => {
                let mut var_idTypes = <Vec<String>>::sse_decode(deserializer);
                return dion_runtime::data::extension::ExtensionType::SourceProvider {
                    id_types: var_idTypes,
                };
            }
            3 => {
                let mut var_sourcetypes = <std::collections::HashSet<
                    dion_runtime::data::source::SourceType,
                >>::sse_decode(deserializer);
                let mut var_opentype = <std::collections::HashSet<
                    dion_runtime::data::extension::SourceOpenType,
                >>::sse_decode(deserializer);
                return dion_runtime::data::extension::ExtensionType::SourceProcessor {
                    sourcetypes: var_sourcetypes,
                    opentype: var_opentype,
                };
            }
            4 => {
                let mut var_triggerMapEntry = <bool>::sse_decode(deserializer);
                let mut var_triggerOnEntryActivity = <bool>::sse_decode(deserializer);
                return dion_runtime::data::extension::ExtensionType::EntryProcessor {
                    trigger_map_entry: var_triggerMapEntry,
                    trigger_on_entry_activity: var_triggerOnEntryActivity,
                };
            }
            5 => {
                let mut var_urlPatterns = <Vec<String>>::sse_decode(deserializer);
                return dion_runtime::data::extension::ExtensionType::URLHandler {
                    url_patterns: var_urlPatterns,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for dion_runtime::data::source::ImageListAudio {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_link = <dion_runtime::data::source::Link>::sse_decode(deserializer);
        let mut var_from = <i32>::sse_decode(deserializer);
        let mut var_to = <i32>::sse_decode(deserializer);
        return dion_runtime::data::source::ImageListAudio {
            link: var_link,
            from: var_from,
            to: var_to,
        };
    }
}

impl SseDecode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for dion_runtime::data::source::Link {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_header =
            <Option<std::collections::HashMap<String, String>>>::sse_decode(deserializer);
        return dion_runtime::data::source::Link {
            url: var_url,
            header: var_header,
        };
    }
}

impl SseDecode for Vec<ProxyExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<ProxyExtension>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::custom_ui::CustomUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::custom_ui::CustomUI>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::settings::DropdownOption> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::settings::DropdownOption>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::Entry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::Entry>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::EntryId> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::EntryId>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::Episode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::Episode>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::EpisodeId> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::EpisodeId>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::extension::ExtensionType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::extension::ExtensionType>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::ImageListAudio> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::ImageListAudio>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::Link> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::Link>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::MediaType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::MediaType>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::Mp3Chapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::Mp3Chapter>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::Paragraph> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::Paragraph>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::permission::Permission> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::permission::Permission>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::action::PopupAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::action::PopupAction>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, dion_runtime::data::settings::Setting)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, dion_runtime::data::settings::Setting)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::extension_repo::RemoteExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <dion_runtime::data::extension_repo::RemoteExtension>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::extension::SourceOpenType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::extension::SourceOpenType>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::SourceType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::SourceType>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<dion_runtime::data::source::Subtitles> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<dion_runtime::data::source::Subtitles>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for dion_runtime::data::source::MediaType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::data::source::MediaType::Video,
            1 => dion_runtime::data::source::MediaType::Comic,
            2 => dion_runtime::data::source::MediaType::Audio,
            3 => dion_runtime::data::source::MediaType::Book,
            4 => dion_runtime::data::source::MediaType::Unknown,
            _ => unreachable!("Invalid variant for MediaType: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::data::source::Mp3Chapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_url = <dion_runtime::data::source::Link>::sse_decode(deserializer);
        return dion_runtime::data::source::Mp3Chapter {
            title: var_title,
            url: var_url,
        };
    }
}

impl SseDecode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<std::collections::HashMap<String, String>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<CancelToken> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<CancelToken>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<dion_runtime::data::custom_ui::CustomUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<dion_runtime::data::custom_ui::CustomUI>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<dion_runtime::data::source::Link> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<dion_runtime::data::source::Link>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<dion_runtime::data::settings::SettingsUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<dion_runtime::data::settings::SettingsUI>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<dion_runtime::data::action::UIAction>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<dion_runtime::data::action::UIAction>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<dion_runtime::data::source::ImageListAudio>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <Vec<dion_runtime::data::source::ImageListAudio>>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for dion_runtime::data::source::Paragraph {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_content = <String>::sse_decode(deserializer);
                return dion_runtime::data::source::Paragraph::Text {
                    content: var_content,
                };
            }
            1 => {
                let mut var_ui =
                    <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                return dion_runtime::data::source::Paragraph::CustomUI { ui: var_ui };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::permission::Permission {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_path = <String>::sse_decode(deserializer);
                let mut var_write = <bool>::sse_decode(deserializer);
                return dion_runtime::data::permission::Permission::Storage {
                    path: var_path,
                    write: var_write,
                };
            }
            1 => {
                let mut var_domain = <String>::sse_decode(deserializer);
                return dion_runtime::data::permission::Permission::Network { domain: var_domain };
            }
            2 => {
                return dion_runtime::data::permission::Permission::ActionPopup;
            }
            3 => {
                return dion_runtime::data::permission::Permission::ArbitraryNetwork;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::action::PopupAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_onclick = <Box<dion_runtime::data::action::Action>>::sse_decode(deserializer);
        return dion_runtime::data::action::PopupAction {
            label: var_label,
            onclick: var_onclick,
        };
    }
}

impl SseDecode for (String, dion_runtime::data::settings::Setting) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <dion_runtime::data::settings::Setting>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for dion_runtime::data::source::ReleaseStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::data::source::ReleaseStatus::Releasing,
            1 => dion_runtime::data::source::ReleaseStatus::Complete,
            2 => dion_runtime::data::source::ReleaseStatus::Unknown,
            _ => unreachable!("Invalid variant for ReleaseStatus: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::data::extension_repo::RemoteExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_exturl = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_cover = <Option<dion_runtime::data::source::Link>>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_compatible = <bool>::sse_decode(deserializer);
        return dion_runtime::data::extension_repo::RemoteExtension {
            id: var_id,
            exturl: var_exturl,
            name: var_name,
            cover: var_cover,
            version: var_version,
            compatible: var_compatible,
        };
    }
}

impl SseDecode for dion_runtime::data::extension_repo::RemoteExtensionResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_content =
            <Vec<dion_runtime::data::extension_repo::RemoteExtension>>::sse_decode(deserializer);
        let mut var_hasnext = <Option<bool>>::sse_decode(deserializer);
        let mut var_length = <Option<i32>>::sse_decode(deserializer);
        return dion_runtime::data::extension_repo::RemoteExtensionResult {
            content: var_content,
            hasnext: var_hasnext,
            length: var_length,
        };
    }
}

impl SseDecode for dion_runtime::data::settings::Setting {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_value = <dion_runtime::data::settings::SettingValue>::sse_decode(deserializer);
        let mut var_default_ =
            <dion_runtime::data::settings::SettingValue>::sse_decode(deserializer);
        let mut var_visible = <bool>::sse_decode(deserializer);
        let mut var_ui =
            <Option<dion_runtime::data::settings::SettingsUI>>::sse_decode(deserializer);
        return dion_runtime::data::settings::Setting {
            label: var_label,
            value: var_value,
            default: var_default_,
            visible: var_visible,
            ui: var_ui,
        };
    }
}

impl SseDecode for dion_runtime::data::settings::SettingKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::data::settings::SettingKind::Extension,
            1 => dion_runtime::data::settings::SettingKind::Search,
            _ => unreachable!("Invalid variant for SettingKind: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::data::settings::SettingValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data = <String>::sse_decode(deserializer);
                return dion_runtime::data::settings::SettingValue::String { data: var_data };
            }
            1 => {
                let mut var_data = <f32>::sse_decode(deserializer);
                return dion_runtime::data::settings::SettingValue::Number { data: var_data };
            }
            2 => {
                let mut var_data = <bool>::sse_decode(deserializer);
                return dion_runtime::data::settings::SettingValue::Boolean { data: var_data };
            }
            3 => {
                let mut var_data = <Vec<String>>::sse_decode(deserializer);
                return dion_runtime::data::settings::SettingValue::StringList { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::settings::SettingsUI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return dion_runtime::data::settings::SettingsUI::CheckBox;
            }
            1 => {
                let mut var_min = <f64>::sse_decode(deserializer);
                let mut var_max = <f64>::sse_decode(deserializer);
                let mut var_step = <i32>::sse_decode(deserializer);
                return dion_runtime::data::settings::SettingsUI::Slider {
                    min: var_min,
                    max: var_max,
                    step: var_step,
                };
            }
            2 => {
                let mut var_options =
                    <Vec<dion_runtime::data::settings::DropdownOption>>::sse_decode(deserializer);
                return dion_runtime::data::settings::SettingsUI::Dropdown {
                    options: var_options,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::source::Source {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_link = <dion_runtime::data::source::Link>::sse_decode(deserializer);
                return dion_runtime::data::source::Source::Epub { link: var_link };
            }
            1 => {
                let mut var_link = <dion_runtime::data::source::Link>::sse_decode(deserializer);
                return dion_runtime::data::source::Source::Pdf { link: var_link };
            }
            2 => {
                let mut var_links =
                    <Vec<dion_runtime::data::source::Link>>::sse_decode(deserializer);
                let mut var_audio =
                    <Option<Vec<dion_runtime::data::source::ImageListAudio>>>::sse_decode(
                        deserializer,
                    );
                return dion_runtime::data::source::Source::Imagelist {
                    links: var_links,
                    audio: var_audio,
                };
            }
            3 => {
                let mut var_link = <dion_runtime::data::source::Link>::sse_decode(deserializer);
                let mut var_sub =
                    <Vec<dion_runtime::data::source::Subtitles>>::sse_decode(deserializer);
                return dion_runtime::data::source::Source::M3u8 {
                    link: var_link,
                    sub: var_sub,
                };
            }
            4 => {
                let mut var_chapters =
                    <Vec<dion_runtime::data::source::Mp3Chapter>>::sse_decode(deserializer);
                return dion_runtime::data::source::Source::Mp3 {
                    chapters: var_chapters,
                };
            }
            5 => {
                let mut var_paragraphs =
                    <Vec<dion_runtime::data::source::Paragraph>>::sse_decode(deserializer);
                return dion_runtime::data::source::Source::Paragraphlist {
                    paragraphs: var_paragraphs,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for dion_runtime::data::extension::SourceOpenType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::data::extension::SourceOpenType::Download,
            1 => dion_runtime::data::extension::SourceOpenType::Stream,
            _ => unreachable!("Invalid variant for SourceOpenType: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::data::source::SourceResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_source = <dion_runtime::data::source::Source>::sse_decode(deserializer);
        let mut var_settings = <std::collections::HashMap<
            String,
            dion_runtime::data::settings::Setting,
        >>::sse_decode(deserializer);
        return dion_runtime::data::source::SourceResult {
            source: var_source,
            settings: var_settings,
        };
    }
}

impl SseDecode for dion_runtime::data::source::SourceType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::data::source::SourceType::Epub,
            1 => dion_runtime::data::source::SourceType::Pdf,
            2 => dion_runtime::data::source::SourceType::Imagelist,
            3 => dion_runtime::data::source::SourceType::M3u8,
            4 => dion_runtime::data::source::SourceType::Mp3,
            5 => dion_runtime::data::source::SourceType::Paragraphlist,
            _ => unreachable!("Invalid variant for SourceType: {}", inner),
        };
    }
}

impl SseDecode for dion_runtime::data::source::Subtitles {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_url = <dion_runtime::data::source::Link>::sse_decode(deserializer);
        return dion_runtime::data::source::Subtitles {
            title: var_title,
            url: var_url,
        };
    }
}

impl SseDecode for dion_runtime::data::custom_ui::TimestampType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => dion_runtime::data::custom_ui::TimestampType::Relative,
            1 => dion_runtime::data::custom_ui::TimestampType::Absolute,
            _ => unreachable!("Invalid variant for TimestampType: {}", inner),
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for dion_runtime::data::action::UIAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_action = <dion_runtime::data::action::Action>::sse_decode(deserializer);
                return dion_runtime::data::action::UIAction::Action { action: var_action };
            }
            1 => {
                let mut var_targetid = <String>::sse_decode(deserializer);
                let mut var_event = <String>::sse_decode(deserializer);
                let mut var_data = <String>::sse_decode(deserializer);
                let mut var_placeholder =
                    <Option<dion_runtime::data::custom_ui::CustomUI>>::sse_decode(deserializer);
                return dion_runtime::data::action::UIAction::SwapContent {
                    targetid: var_targetid,
                    event: var_event,
                    data: var_data,
                    placeholder: var_placeholder,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CancelToken> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<CancelToken> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CancelToken>> for CancelToken {
    fn into_into_dart(self) -> FrbWrapper<CancelToken> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ExtensionClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ExtensionClient> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ExtensionClient>> for ExtensionClient {
    fn into_into_dart(self) -> FrbWrapper<ExtensionClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ManagerClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ManagerClient> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ManagerClient>> for ManagerClient {
    fn into_into_dart(self) -> FrbWrapper<ManagerClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ProxyAdapter> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ProxyAdapter> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ProxyAdapter>> for ProxyAdapter {
    fn into_into_dart(self) -> FrbWrapper<ProxyAdapter> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ProxyExtension> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ProxyExtension> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ProxyExtension>> for ProxyExtension {
    fn into_into_dart(self) -> FrbWrapper<ProxyExtension> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::action::Action> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::action::Action::OpenBrowser { url } => {
                [0.into_dart(), url.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::action::Action::Popup {
                title,
                content,
                actions,
            } => [
                1.into_dart(),
                title.into_into_dart().into_dart(),
                content.into_into_dart().into_dart(),
                actions.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::action::Action::Nav { title, content } => [
                2.into_dart(),
                title.into_into_dart().into_dart(),
                content.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::action::Action::TriggerEvent { event, data } => [
                3.into_dart(),
                event.into_into_dart().into_dart(),
                data.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::action::Action::NavEntry { entry } => {
                [4.into_dart(), entry.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::action::Action>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::action::Action>>
    for dion_runtime::data::action::Action
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::action::Action> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::custom_ui::CustomUI> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::custom_ui::CustomUI::Text { text } => {
                [0.into_dart(), text.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::custom_ui::CustomUI::Image {
                image,
                width,
                height,
            } => [
                1.into_dart(),
                image.into_into_dart().into_dart(),
                width.into_into_dart().into_dart(),
                height.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::Link { link, label } => [
                2.into_dart(),
                link.into_into_dart().into_dart(),
                label.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::TimeStamp { timestamp, display } => [
                3.into_dart(),
                timestamp.into_into_dart().into_dart(),
                display.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::EntryCard { entry } => {
                [4.into_dart(), entry.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::custom_ui::CustomUI::Card { image, top, bottom } => [
                5.into_dart(),
                image.into_into_dart().into_dart(),
                top.into_into_dart().into_dart(),
                bottom.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::Feed { event, data } => [
                6.into_dart(),
                event.into_into_dart().into_dart(),
                data.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::Button { label, on_click } => [
                7.into_dart(),
                label.into_into_dart().into_dart(),
                on_click.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::InlineSetting {
                setting_id,
                setting_kind,
                on_commit,
            } => [
                8.into_dart(),
                setting_id.into_into_dart().into_dart(),
                setting_kind.into_into_dart().into_dart(),
                on_commit.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::Slot { id, child } => [
                9.into_dart(),
                id.into_into_dart().into_dart(),
                child.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::custom_ui::CustomUI::Column { children } => {
                [10.into_dart(), children.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::custom_ui::CustomUI::Row { children } => {
                [11.into_dart(), children.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::custom_ui::CustomUI>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::custom_ui::CustomUI>>
    for dion_runtime::data::custom_ui::CustomUI
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::custom_ui::CustomUI> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::settings::DropdownOption> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.label.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::settings::DropdownOption>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::settings::DropdownOption>>
    for dion_runtime::data::settings::DropdownOption
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::settings::DropdownOption> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Entry> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.title.into_into_dart().into_dart(),
            self.0.media_type.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.author.into_into_dart().into_dart(),
            self.0.rating.into_into_dart().into_dart(),
            self.0.views.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Entry>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Entry>>
    for dion_runtime::data::source::Entry
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Entry> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::activity::EntryActivity> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::activity::EntryActivity::EpisodeActivity { progress } => {
                [0.into_dart(), progress.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::activity::EntryActivity>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::activity::EntryActivity>>
    for dion_runtime::data::activity::EntryActivity
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::activity::EntryActivity> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::EntryDetailed> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.titles.into_into_dart().into_dart(),
            self.0.author.into_into_dart().into_dart(),
            self.0.ui.into_into_dart().into_dart(),
            self.0.meta.into_into_dart().into_dart(),
            self.0.media_type.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.language.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.episodes.into_into_dart().into_dart(),
            self.0.genres.into_into_dart().into_dart(),
            self.0.rating.into_into_dart().into_dart(),
            self.0.views.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::EntryDetailed>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::EntryDetailed>>
    for dion_runtime::data::source::EntryDetailed
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::EntryDetailed> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::EntryDetailedResult> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.entry.into_into_dart().into_dart(),
            self.0.settings.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::EntryDetailedResult>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::EntryDetailedResult>>
    for dion_runtime::data::source::EntryDetailedResult
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::EntryDetailedResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::EntryId> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.uid.into_into_dart().into_dart(),
            self.0.iddata.into_into_dart().into_dart(),
            self.0.id_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::EntryId>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::EntryId>>
    for dion_runtime::data::source::EntryId
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::EntryId> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::EntryList> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.hasnext.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
            self.0.content.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::EntryList>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::EntryList>>
    for dion_runtime::data::source::EntryList
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::EntryList> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Episode> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Episode>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Episode>>
    for dion_runtime::data::source::Episode
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Episode> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::EpisodeId> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.uid.into_into_dart().into_dart(),
            self.0.iddata.into_into_dart().into_dart(),
            self.0.id_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::EpisodeId>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::EpisodeId>>
    for dion_runtime::data::source::EpisodeId
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::EpisodeId> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::extension::ExtensionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
            self.0.desc.into_into_dart().into_dart(),
            self.0.author.into_into_dart().into_dart(),
            self.0.tags.into_into_dart().into_dart(),
            self.0.lang.into_into_dart().into_dart(),
            self.0.nsfw.into_into_dart().into_dart(),
            self.0.media_type.into_into_dart().into_dart(),
            self.0.extension_type.into_into_dart().into_dart(),
            self.0.repo.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.license.into_into_dart().into_dart(),
            self.0.compatible.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension::ExtensionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::extension::ExtensionData>>
    for dion_runtime::data::extension::ExtensionData
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::extension::ExtensionData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<dion_runtime::data::extension_manager::ExtensionManagerData>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
            self.0.repo.into_into_dart().into_dart(),
            self.0.api_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension_manager::ExtensionManagerData>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<dion_runtime::data::extension_manager::ExtensionManagerData>,
    > for dion_runtime::data::extension_manager::ExtensionManagerData
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<dion_runtime::data::extension_manager::ExtensionManagerData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<dion_runtime::data::extension_repo::ExtensionRepo>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension_repo::ExtensionRepo>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::extension_repo::ExtensionRepo>>
    for dion_runtime::data::extension_repo::ExtensionRepo
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::extension_repo::ExtensionRepo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::extension::ExtensionType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::extension::ExtensionType::EntryProvider { has_search } => {
                [0.into_dart(), has_search.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::extension::ExtensionType::EntryDetailedProvider { id_types } => {
                [1.into_dart(), id_types.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::extension::ExtensionType::SourceProvider { id_types } => {
                [2.into_dart(), id_types.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::extension::ExtensionType::SourceProcessor {
                sourcetypes,
                opentype,
            } => [
                3.into_dart(),
                sourcetypes.into_into_dart().into_dart(),
                opentype.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::extension::ExtensionType::EntryProcessor {
                trigger_map_entry,
                trigger_on_entry_activity,
            } => [
                4.into_dart(),
                trigger_map_entry.into_into_dart().into_dart(),
                trigger_on_entry_activity.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::extension::ExtensionType::URLHandler { url_patterns } => {
                [5.into_dart(), url_patterns.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension::ExtensionType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::extension::ExtensionType>>
    for dion_runtime::data::extension::ExtensionType
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::extension::ExtensionType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::ImageListAudio> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.link.into_into_dart().into_dart(),
            self.0.from.into_into_dart().into_dart(),
            self.0.to.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::ImageListAudio>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::ImageListAudio>>
    for dion_runtime::data::source::ImageListAudio
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::ImageListAudio> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Link> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.url.into_into_dart().into_dart(),
            self.0.header.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Link>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Link>>
    for dion_runtime::data::source::Link
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Link> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::MediaType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::source::MediaType::Video => 0.into_dart(),
            dion_runtime::data::source::MediaType::Comic => 1.into_dart(),
            dion_runtime::data::source::MediaType::Audio => 2.into_dart(),
            dion_runtime::data::source::MediaType::Book => 3.into_dart(),
            dion_runtime::data::source::MediaType::Unknown => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::MediaType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::MediaType>>
    for dion_runtime::data::source::MediaType
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::MediaType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Mp3Chapter> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Mp3Chapter>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Mp3Chapter>>
    for dion_runtime::data::source::Mp3Chapter
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Mp3Chapter> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Paragraph> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::source::Paragraph::Text { content } => {
                [0.into_dart(), content.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::source::Paragraph::CustomUI { ui } => {
                [1.into_dart(), ui.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Paragraph>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Paragraph>>
    for dion_runtime::data::source::Paragraph
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Paragraph> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::permission::Permission> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::permission::Permission::Storage { path, write } => [
                0.into_dart(),
                path.into_into_dart().into_dart(),
                write.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::permission::Permission::Network { domain } => {
                [1.into_dart(), domain.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::permission::Permission::ActionPopup => [2.into_dart()].into_dart(),
            dion_runtime::data::permission::Permission::ArbitraryNetwork => {
                [3.into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::permission::Permission>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::permission::Permission>>
    for dion_runtime::data::permission::Permission
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::permission::Permission> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::action::PopupAction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.label.into_into_dart().into_dart(),
            self.0.onclick.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::action::PopupAction>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::action::PopupAction>>
    for dion_runtime::data::action::PopupAction
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::action::PopupAction> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::ReleaseStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::source::ReleaseStatus::Releasing => 0.into_dart(),
            dion_runtime::data::source::ReleaseStatus::Complete => 1.into_dart(),
            dion_runtime::data::source::ReleaseStatus::Unknown => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::ReleaseStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::ReleaseStatus>>
    for dion_runtime::data::source::ReleaseStatus
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::ReleaseStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<dion_runtime::data::extension_repo::RemoteExtension>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.exturl.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.cover.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.compatible.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension_repo::RemoteExtension>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<dion_runtime::data::extension_repo::RemoteExtension>,
    > for dion_runtime::data::extension_repo::RemoteExtension
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::extension_repo::RemoteExtension> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<dion_runtime::data::extension_repo::RemoteExtensionResult>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.content.into_into_dart().into_dart(),
            self.0.hasnext.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension_repo::RemoteExtensionResult>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<dion_runtime::data::extension_repo::RemoteExtensionResult>,
    > for dion_runtime::data::extension_repo::RemoteExtensionResult
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<dion_runtime::data::extension_repo::RemoteExtensionResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::settings::Setting> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.label.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
            self.0.default.into_into_dart().into_dart(),
            self.0.visible.into_into_dart().into_dart(),
            self.0.ui.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::settings::Setting>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::settings::Setting>>
    for dion_runtime::data::settings::Setting
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::settings::Setting> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::settings::SettingKind> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::settings::SettingKind::Extension => 0.into_dart(),
            dion_runtime::data::settings::SettingKind::Search => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::settings::SettingKind>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::settings::SettingKind>>
    for dion_runtime::data::settings::SettingKind
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::settings::SettingKind> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::settings::SettingValue> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::settings::SettingValue::String { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::settings::SettingValue::Number { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::settings::SettingValue::Boolean { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::settings::SettingValue::StringList { data } => {
                [3.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::settings::SettingValue>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::settings::SettingValue>>
    for dion_runtime::data::settings::SettingValue
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::settings::SettingValue> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::settings::SettingsUI> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::settings::SettingsUI::CheckBox => [0.into_dart()].into_dart(),
            dion_runtime::data::settings::SettingsUI::Slider { min, max, step } => [
                1.into_dart(),
                min.into_into_dart().into_dart(),
                max.into_into_dart().into_dart(),
                step.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::settings::SettingsUI::Dropdown { options } => {
                [2.into_dart(), options.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::settings::SettingsUI>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::settings::SettingsUI>>
    for dion_runtime::data::settings::SettingsUI
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::settings::SettingsUI> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Source> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::source::Source::Epub { link } => {
                [0.into_dart(), link.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::source::Source::Pdf { link } => {
                [1.into_dart(), link.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::source::Source::Imagelist { links, audio } => [
                2.into_dart(),
                links.into_into_dart().into_dart(),
                audio.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::source::Source::M3u8 { link, sub } => [
                3.into_dart(),
                link.into_into_dart().into_dart(),
                sub.into_into_dart().into_dart(),
            ]
            .into_dart(),
            dion_runtime::data::source::Source::Mp3 { chapters } => {
                [4.into_dart(), chapters.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::source::Source::Paragraphlist { paragraphs } => {
                [5.into_dart(), paragraphs.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Source>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Source>>
    for dion_runtime::data::source::Source
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Source> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::extension::SourceOpenType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::extension::SourceOpenType::Download => 0.into_dart(),
            dion_runtime::data::extension::SourceOpenType::Stream => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::extension::SourceOpenType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::extension::SourceOpenType>>
    for dion_runtime::data::extension::SourceOpenType
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::extension::SourceOpenType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::SourceResult> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.source.into_into_dart().into_dart(),
            self.0.settings.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::SourceResult>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::SourceResult>>
    for dion_runtime::data::source::SourceResult
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::SourceResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::SourceType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::source::SourceType::Epub => 0.into_dart(),
            dion_runtime::data::source::SourceType::Pdf => 1.into_dart(),
            dion_runtime::data::source::SourceType::Imagelist => 2.into_dart(),
            dion_runtime::data::source::SourceType::M3u8 => 3.into_dart(),
            dion_runtime::data::source::SourceType::Mp3 => 4.into_dart(),
            dion_runtime::data::source::SourceType::Paragraphlist => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::SourceType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::SourceType>>
    for dion_runtime::data::source::SourceType
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::SourceType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::source::Subtitles> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::source::Subtitles>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::source::Subtitles>>
    for dion_runtime::data::source::Subtitles
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::source::Subtitles> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::custom_ui::TimestampType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::custom_ui::TimestampType::Relative => 0.into_dart(),
            dion_runtime::data::custom_ui::TimestampType::Absolute => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::custom_ui::TimestampType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::custom_ui::TimestampType>>
    for dion_runtime::data::custom_ui::TimestampType
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::custom_ui::TimestampType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<dion_runtime::data::action::UIAction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            dion_runtime::data::action::UIAction::Action { action } => {
                [0.into_dart(), action.into_into_dart().into_dart()].into_dart()
            }
            dion_runtime::data::action::UIAction::SwapContent {
                targetid,
                event,
                data,
                placeholder,
            } => [
                1.into_dart(),
                targetid.into_into_dart().into_dart(),
                event.into_into_dart().into_dart(),
                data.into_into_dart().into_dart(),
                placeholder.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<dion_runtime::data::action::UIAction>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<dion_runtime::data::action::UIAction>>
    for dion_runtime::data::action::UIAction
{
    fn into_into_dart(self) -> FrbWrapper<dion_runtime::data::action::UIAction> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for CancelToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ExtensionClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ManagerClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ProxyAdapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ProxyExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, dion_runtime::data::settings::Setting> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, dion_runtime::data::settings::Setting)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for std::collections::HashSet<dion_runtime::data::extension::ExtensionType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::extension::ExtensionType>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashSet<dion_runtime::data::source::MediaType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::source::MediaType>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashSet<dion_runtime::data::extension::SourceOpenType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::extension::SourceOpenType>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashSet<dion_runtime::data::source::SourceType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::source::SourceType>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for dion_runtime::data::action::Action {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::action::Action::OpenBrowser { url } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(url, serializer);
            }
            dion_runtime::data::action::Action::Popup {
                title,
                content,
                actions,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(title, serializer);
                <dion_runtime::data::custom_ui::CustomUI>::sse_encode(content, serializer);
                <Vec<dion_runtime::data::action::PopupAction>>::sse_encode(actions, serializer);
            }
            dion_runtime::data::action::Action::Nav { title, content } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(title, serializer);
                <dion_runtime::data::custom_ui::CustomUI>::sse_encode(content, serializer);
            }
            dion_runtime::data::action::Action::TriggerEvent { event, data } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(event, serializer);
                <String>::sse_encode(data, serializer);
            }
            dion_runtime::data::action::Action::NavEntry { entry } => {
                <i32>::sse_encode(4, serializer);
                <dion_runtime::data::source::EntryDetailed>::sse_encode(entry, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for Box<dion_runtime::data::action::Action> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::data::action::Action>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<dion_runtime::data::custom_ui::CustomUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::data::custom_ui::CustomUI>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<dion_runtime::data::action::UIAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::data::action::UIAction>::sse_encode(*self, serializer);
    }
}

impl SseEncode for dion_runtime::data::custom_ui::CustomUI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::custom_ui::CustomUI::Text { text } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(text, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Image {
                image,
                width,
                height,
            } => {
                <i32>::sse_encode(1, serializer);
                <dion_runtime::data::source::Link>::sse_encode(image, serializer);
                <Option<i32>>::sse_encode(width, serializer);
                <Option<i32>>::sse_encode(height, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Link { link, label } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(link, serializer);
                <Option<String>>::sse_encode(label, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::TimeStamp { timestamp, display } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(timestamp, serializer);
                <dion_runtime::data::custom_ui::TimestampType>::sse_encode(display, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::EntryCard { entry } => {
                <i32>::sse_encode(4, serializer);
                <dion_runtime::data::source::Entry>::sse_encode(entry, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Card { image, top, bottom } => {
                <i32>::sse_encode(5, serializer);
                <dion_runtime::data::source::Link>::sse_encode(image, serializer);
                <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(top, serializer);
                <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(bottom, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Feed { event, data } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(event, serializer);
                <String>::sse_encode(data, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Button { label, on_click } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(label, serializer);
                <Option<Box<dion_runtime::data::action::UIAction>>>::sse_encode(
                    on_click, serializer,
                );
            }
            dion_runtime::data::custom_ui::CustomUI::InlineSetting {
                setting_id,
                setting_kind,
                on_commit,
            } => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(setting_id, serializer);
                <dion_runtime::data::settings::SettingKind>::sse_encode(setting_kind, serializer);
                <Option<Box<dion_runtime::data::action::UIAction>>>::sse_encode(
                    on_commit, serializer,
                );
            }
            dion_runtime::data::custom_ui::CustomUI::Slot { id, child } => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(id, serializer);
                <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(child, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Column { children } => {
                <i32>::sse_encode(10, serializer);
                <Vec<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(children, serializer);
            }
            dion_runtime::data::custom_ui::CustomUI::Row { children } => {
                <i32>::sse_encode(11, serializer);
                <Vec<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(children, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::settings::DropdownOption {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.label, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for dion_runtime::data::source::Entry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::source::EntryId>>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.title, serializer);
        <dion_runtime::data::source::MediaType>::sse_encode(self.media_type, serializer);
        <Option<dion_runtime::data::source::Link>>::sse_encode(self.cover, serializer);
        <Option<Vec<String>>>::sse_encode(self.author, serializer);
        <Option<f32>>::sse_encode(self.rating, serializer);
        <Option<f32>>::sse_encode(self.views, serializer);
        <Option<i32>>::sse_encode(self.length, serializer);
    }
}

impl SseEncode for dion_runtime::data::activity::EntryActivity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::activity::EntryActivity::EpisodeActivity { progress } => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(progress, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::source::EntryDetailed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::source::EntryId>>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.url, serializer);
        <Vec<String>>::sse_encode(self.titles, serializer);
        <Option<Vec<String>>>::sse_encode(self.author, serializer);
        <Option<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(self.ui, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.meta, serializer);
        <dion_runtime::data::source::MediaType>::sse_encode(self.media_type, serializer);
        <dion_runtime::data::source::ReleaseStatus>::sse_encode(self.status, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.language, serializer);
        <Option<dion_runtime::data::source::Link>>::sse_encode(self.cover, serializer);
        <Vec<dion_runtime::data::source::Episode>>::sse_encode(self.episodes, serializer);
        <Option<Vec<String>>>::sse_encode(self.genres, serializer);
        <Option<f32>>::sse_encode(self.rating, serializer);
        <Option<f32>>::sse_encode(self.views, serializer);
        <Option<i32>>::sse_encode(self.length, serializer);
    }
}

impl SseEncode for dion_runtime::data::source::EntryDetailedResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::data::source::EntryDetailed>::sse_encode(self.entry, serializer);
        <std::collections::HashMap<String, dion_runtime::data::settings::Setting>>::sse_encode(
            self.settings,
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::source::EntryId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.uid, serializer);
        <Option<String>>::sse_encode(self.iddata, serializer);
        <String>::sse_encode(self.id_type, serializer);
    }
}

impl SseEncode for dion_runtime::data::source::EntryList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<bool>>::sse_encode(self.hasnext, serializer);
        <Option<i32>>::sse_encode(self.length, serializer);
        <Vec<dion_runtime::data::source::Entry>>::sse_encode(self.content, serializer);
    }
}

impl SseEncode for dion_runtime::data::source::Episode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::source::EpisodeId>>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.url, serializer);
        <Option<dion_runtime::data::source::Link>>::sse_encode(self.cover, serializer);
        <Option<String>>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for dion_runtime::data::source::EpisodeId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.uid, serializer);
        <Option<String>>::sse_encode(self.iddata, serializer);
        <String>::sse_encode(self.id_type, serializer);
    }
}

impl SseEncode for dion_runtime::data::extension::ExtensionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.icon, serializer);
        <Option<String>>::sse_encode(self.desc, serializer);
        <Vec<String>>::sse_encode(self.author, serializer);
        <Vec<String>>::sse_encode(self.tags, serializer);
        <Vec<String>>::sse_encode(self.lang, serializer);
        <bool>::sse_encode(self.nsfw, serializer);
        <std::collections::HashSet<dion_runtime::data::source::MediaType>>::sse_encode(
            self.media_type,
            serializer,
        );
        <std::collections::HashSet<dion_runtime::data::extension::ExtensionType>>::sse_encode(
            self.extension_type,
            serializer,
        );
        <Option<String>>::sse_encode(self.repo, serializer);
        <String>::sse_encode(self.version, serializer);
        <String>::sse_encode(self.license, serializer);
        <bool>::sse_encode(self.compatible, serializer);
    }
}

impl SseEncode for dion_runtime::data::extension_manager::ExtensionManagerData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.icon, serializer);
        <Option<String>>::sse_encode(self.repo, serializer);
        <u32>::sse_encode(self.api_version, serializer);
    }
}

impl SseEncode for dion_runtime::data::extension_repo::ExtensionRepo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for dion_runtime::data::extension::ExtensionType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::extension::ExtensionType::EntryProvider { has_search } => {
                <i32>::sse_encode(0, serializer);
                <bool>::sse_encode(has_search, serializer);
            }
            dion_runtime::data::extension::ExtensionType::EntryDetailedProvider { id_types } => {
                <i32>::sse_encode(1, serializer);
                <Vec<String>>::sse_encode(id_types, serializer);
            }
            dion_runtime::data::extension::ExtensionType::SourceProvider { id_types } => {
                <i32>::sse_encode(2, serializer);
                <Vec<String>>::sse_encode(id_types, serializer);
            }
            dion_runtime::data::extension::ExtensionType::SourceProcessor {
                sourcetypes,
                opentype,
            } => {
                <i32>::sse_encode(3, serializer);
                <std::collections::HashSet<dion_runtime::data::source::SourceType>>::sse_encode(
                    sourcetypes,
                    serializer,
                );
                <std::collections::HashSet<dion_runtime::data::extension::SourceOpenType>>::sse_encode(opentype, serializer);
            }
            dion_runtime::data::extension::ExtensionType::EntryProcessor {
                trigger_map_entry,
                trigger_on_entry_activity,
            } => {
                <i32>::sse_encode(4, serializer);
                <bool>::sse_encode(trigger_map_entry, serializer);
                <bool>::sse_encode(trigger_on_entry_activity, serializer);
            }
            dion_runtime::data::extension::ExtensionType::URLHandler { url_patterns } => {
                <i32>::sse_encode(5, serializer);
                <Vec<String>>::sse_encode(url_patterns, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for dion_runtime::data::source::ImageListAudio {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::data::source::Link>::sse_encode(self.link, serializer);
        <i32>::sse_encode(self.from, serializer);
        <i32>::sse_encode(self.to, serializer);
    }
}

impl SseEncode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_i64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for dion_runtime::data::source::Link {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <Option<std::collections::HashMap<String, String>>>::sse_encode(self.header, serializer);
    }
}

impl SseEncode for Vec<ProxyExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <ProxyExtension>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::custom_ui::CustomUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::custom_ui::CustomUI>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::settings::DropdownOption> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::settings::DropdownOption>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::Entry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::Entry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::EntryId> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::EntryId>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::Episode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::Episode>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::EpisodeId> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::EpisodeId>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::extension::ExtensionType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::extension::ExtensionType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::ImageListAudio> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::ImageListAudio>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::Link> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::Link>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::MediaType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::MediaType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::Mp3Chapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::Mp3Chapter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::Paragraph> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::Paragraph>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::permission::Permission> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::permission::Permission>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::action::PopupAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::action::PopupAction>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, dion_runtime::data::settings::Setting)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, dion_runtime::data::settings::Setting)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::extension_repo::RemoteExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::extension_repo::RemoteExtension>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::extension::SourceOpenType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::extension::SourceOpenType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::SourceType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::SourceType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<dion_runtime::data::source::Subtitles> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <dion_runtime::data::source::Subtitles>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for dion_runtime::data::source::MediaType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::data::source::MediaType::Video => 0,
                dion_runtime::data::source::MediaType::Comic => 1,
                dion_runtime::data::source::MediaType::Audio => 2,
                dion_runtime::data::source::MediaType::Book => 3,
                dion_runtime::data::source::MediaType::Unknown => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::source::Mp3Chapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <dion_runtime::data::source::Link>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <std::collections::HashMap<String, String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<CancelToken> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <CancelToken>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<dion_runtime::data::custom_ui::CustomUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <dion_runtime::data::custom_ui::CustomUI>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<dion_runtime::data::source::Link> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <dion_runtime::data::source::Link>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<dion_runtime::data::settings::SettingsUI> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <dion_runtime::data::settings::SettingsUI>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<dion_runtime::data::action::UIAction>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<dion_runtime::data::action::UIAction>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<dion_runtime::data::source::ImageListAudio>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<dion_runtime::data::source::ImageListAudio>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for dion_runtime::data::source::Paragraph {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::source::Paragraph::Text { content } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(content, serializer);
            }
            dion_runtime::data::source::Paragraph::CustomUI { ui } => {
                <i32>::sse_encode(1, serializer);
                <Box<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(ui, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::permission::Permission {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::permission::Permission::Storage { path, write } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(path, serializer);
                <bool>::sse_encode(write, serializer);
            }
            dion_runtime::data::permission::Permission::Network { domain } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(domain, serializer);
            }
            dion_runtime::data::permission::Permission::ActionPopup => {
                <i32>::sse_encode(2, serializer);
            }
            dion_runtime::data::permission::Permission::ArbitraryNetwork => {
                <i32>::sse_encode(3, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::action::PopupAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.label, serializer);
        <Box<dion_runtime::data::action::Action>>::sse_encode(self.onclick, serializer);
    }
}

impl SseEncode for (String, dion_runtime::data::settings::Setting) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <dion_runtime::data::settings::Setting>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for dion_runtime::data::source::ReleaseStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::data::source::ReleaseStatus::Releasing => 0,
                dion_runtime::data::source::ReleaseStatus::Complete => 1,
                dion_runtime::data::source::ReleaseStatus::Unknown => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::extension_repo::RemoteExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.exturl, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<dion_runtime::data::source::Link>>::sse_encode(self.cover, serializer);
        <String>::sse_encode(self.version, serializer);
        <bool>::sse_encode(self.compatible, serializer);
    }
}

impl SseEncode for dion_runtime::data::extension_repo::RemoteExtensionResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<dion_runtime::data::extension_repo::RemoteExtension>>::sse_encode(
            self.content,
            serializer,
        );
        <Option<bool>>::sse_encode(self.hasnext, serializer);
        <Option<i32>>::sse_encode(self.length, serializer);
    }
}

impl SseEncode for dion_runtime::data::settings::Setting {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.label, serializer);
        <dion_runtime::data::settings::SettingValue>::sse_encode(self.value, serializer);
        <dion_runtime::data::settings::SettingValue>::sse_encode(self.default, serializer);
        <bool>::sse_encode(self.visible, serializer);
        <Option<dion_runtime::data::settings::SettingsUI>>::sse_encode(self.ui, serializer);
    }
}

impl SseEncode for dion_runtime::data::settings::SettingKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::data::settings::SettingKind::Extension => 0,
                dion_runtime::data::settings::SettingKind::Search => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::settings::SettingValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::settings::SettingValue::String { data } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(data, serializer);
            }
            dion_runtime::data::settings::SettingValue::Number { data } => {
                <i32>::sse_encode(1, serializer);
                <f32>::sse_encode(data, serializer);
            }
            dion_runtime::data::settings::SettingValue::Boolean { data } => {
                <i32>::sse_encode(2, serializer);
                <bool>::sse_encode(data, serializer);
            }
            dion_runtime::data::settings::SettingValue::StringList { data } => {
                <i32>::sse_encode(3, serializer);
                <Vec<String>>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::settings::SettingsUI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::settings::SettingsUI::CheckBox => {
                <i32>::sse_encode(0, serializer);
            }
            dion_runtime::data::settings::SettingsUI::Slider { min, max, step } => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(min, serializer);
                <f64>::sse_encode(max, serializer);
                <i32>::sse_encode(step, serializer);
            }
            dion_runtime::data::settings::SettingsUI::Dropdown { options } => {
                <i32>::sse_encode(2, serializer);
                <Vec<dion_runtime::data::settings::DropdownOption>>::sse_encode(
                    options, serializer,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::source::Source {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::source::Source::Epub { link } => {
                <i32>::sse_encode(0, serializer);
                <dion_runtime::data::source::Link>::sse_encode(link, serializer);
            }
            dion_runtime::data::source::Source::Pdf { link } => {
                <i32>::sse_encode(1, serializer);
                <dion_runtime::data::source::Link>::sse_encode(link, serializer);
            }
            dion_runtime::data::source::Source::Imagelist { links, audio } => {
                <i32>::sse_encode(2, serializer);
                <Vec<dion_runtime::data::source::Link>>::sse_encode(links, serializer);
                <Option<Vec<dion_runtime::data::source::ImageListAudio>>>::sse_encode(
                    audio, serializer,
                );
            }
            dion_runtime::data::source::Source::M3u8 { link, sub } => {
                <i32>::sse_encode(3, serializer);
                <dion_runtime::data::source::Link>::sse_encode(link, serializer);
                <Vec<dion_runtime::data::source::Subtitles>>::sse_encode(sub, serializer);
            }
            dion_runtime::data::source::Source::Mp3 { chapters } => {
                <i32>::sse_encode(4, serializer);
                <Vec<dion_runtime::data::source::Mp3Chapter>>::sse_encode(chapters, serializer);
            }
            dion_runtime::data::source::Source::Paragraphlist { paragraphs } => {
                <i32>::sse_encode(5, serializer);
                <Vec<dion_runtime::data::source::Paragraph>>::sse_encode(paragraphs, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for dion_runtime::data::extension::SourceOpenType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::data::extension::SourceOpenType::Download => 0,
                dion_runtime::data::extension::SourceOpenType::Stream => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::source::SourceResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dion_runtime::data::source::Source>::sse_encode(self.source, serializer);
        <std::collections::HashMap<String, dion_runtime::data::settings::Setting>>::sse_encode(
            self.settings,
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::source::SourceType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::data::source::SourceType::Epub => 0,
                dion_runtime::data::source::SourceType::Pdf => 1,
                dion_runtime::data::source::SourceType::Imagelist => 2,
                dion_runtime::data::source::SourceType::M3u8 => 3,
                dion_runtime::data::source::SourceType::Mp3 => 4,
                dion_runtime::data::source::SourceType::Paragraphlist => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for dion_runtime::data::source::Subtitles {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <dion_runtime::data::source::Link>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for dion_runtime::data::custom_ui::TimestampType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                dion_runtime::data::custom_ui::TimestampType::Relative => 0,
                dion_runtime::data::custom_ui::TimestampType::Absolute => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for dion_runtime::data::action::UIAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            dion_runtime::data::action::UIAction::Action { action } => {
                <i32>::sse_encode(0, serializer);
                <dion_runtime::data::action::Action>::sse_encode(action, serializer);
            }
            dion_runtime::data::action::UIAction::SwapContent {
                targetid,
                event,
                data,
                placeholder,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(targetid, serializer);
                <String>::sse_encode(event, serializer);
                <String>::sse_encode(data, serializer);
                <Option<dion_runtime::data::custom_ui::CustomUI>>::sse_encode(
                    placeholder,
                    serializer,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::api::cancel::*;
    use crate::api::client::*;
    use crate::api::extension::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    use dion_runtime::data::action::*;
    use dion_runtime::data::activity::*;
    use dion_runtime::data::auth::*;
    use dion_runtime::data::custom_ui::*;
    use dion_runtime::data::extension::*;
    use dion_runtime::data::extension_manager::*;
    use dion_runtime::data::extension_repo::*;
    use dion_runtime::data::permission::*;
    use dion_runtime::data::settings::*;
    use dion_runtime::data::source::*;
    use serde_json::Value;

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<CancelToken> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> CancelToken {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ProxyAdapter> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ProxyAdapter {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ProxyExtension> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ProxyExtension {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<std::collections::HashMap<String, String>>
        for *mut wire_cst_list_record_string_string
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, String> {
            let vec: Vec<(String, String)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<std::collections::HashSet<dion_runtime::data::extension::ExtensionType>>
        for *mut wire_cst_list_extension_type
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> std::collections::HashSet<dion_runtime::data::extension::ExtensionType> {
            let vec: Vec<dion_runtime::data::extension::ExtensionType> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashSet<dion_runtime::data::source::MediaType>>
        for *mut wire_cst_list_media_type
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashSet<dion_runtime::data::source::MediaType> {
            let vec: Vec<dion_runtime::data::source::MediaType> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashSet<dion_runtime::data::extension::SourceOpenType>>
        for *mut wire_cst_list_source_open_type
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> std::collections::HashSet<dion_runtime::data::extension::SourceOpenType> {
            let vec: Vec<dion_runtime::data::extension::SourceOpenType> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashSet<dion_runtime::data::source::SourceType>>
        for *mut wire_cst_list_source_type
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashSet<dion_runtime::data::source::SourceType> {
            let vec: Vec<dion_runtime::data::source::SourceType> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<CancelToken> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> CancelToken {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<CancelToken>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<bool> for *mut bool {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<dion_runtime::data::extension_repo::ExtensionRepo> for *mut wire_cst_extension_repo {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension_repo::ExtensionRepo {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::data::extension_repo::ExtensionRepo>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<f32> for *mut f32 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> f32 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<i32> for *mut i32 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i32 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<dion_runtime::data::source::Link> for *mut wire_cst_link {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::source::Link {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dion_runtime::data::source::Link>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<dion_runtime::data::source::Entry> for wire_cst_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::source::Entry {
            dion_runtime::data::source::Entry {
                id: self.id.cst_decode(),
                url: self.url.cst_decode(),
                title: self.title.cst_decode(),
                media_type: self.media_type.cst_decode(),
                cover: self.cover.cst_decode(),
                author: self.author.cst_decode(),
                rating: self.rating.cst_decode(),
                views: self.views.cst_decode(),
                length: self.length.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::source::EntryId> for wire_cst_entry_id {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::source::EntryId {
            dion_runtime::data::source::EntryId {
                uid: self.uid.cst_decode(),
                iddata: self.iddata.cst_decode(),
                id_type: self.id_type.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::source::EntryList> for wire_cst_entry_list {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::source::EntryList {
            dion_runtime::data::source::EntryList {
                hasnext: self.hasnext.cst_decode(),
                length: self.length.cst_decode(),
                content: self.content.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::extension::ExtensionData> for wire_cst_extension_data {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension::ExtensionData {
            dion_runtime::data::extension::ExtensionData {
                id: self.id.cst_decode(),
                name: self.name.cst_decode(),
                url: self.url.cst_decode(),
                icon: self.icon.cst_decode(),
                desc: self.desc.cst_decode(),
                author: self.author.cst_decode(),
                tags: self.tags.cst_decode(),
                lang: self.lang.cst_decode(),
                nsfw: self.nsfw.cst_decode(),
                media_type: self.media_type.cst_decode(),
                extension_type: self.extension_type.cst_decode(),
                repo: self.repo.cst_decode(),
                version: self.version.cst_decode(),
                license: self.license.cst_decode(),
                compatible: self.compatible.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::extension_manager::ExtensionManagerData>
        for wire_cst_extension_manager_data
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension_manager::ExtensionManagerData {
            dion_runtime::data::extension_manager::ExtensionManagerData {
                name: self.name.cst_decode(),
                icon: self.icon.cst_decode(),
                repo: self.repo.cst_decode(),
                api_version: self.api_version.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::extension_repo::ExtensionRepo> for wire_cst_extension_repo {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension_repo::ExtensionRepo {
            dion_runtime::data::extension_repo::ExtensionRepo {
                name: self.name.cst_decode(),
                description: self.description.cst_decode(),
                url: self.url.cst_decode(),
                id: self.id.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::extension::ExtensionType> for wire_cst_extension_type {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension::ExtensionType {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.EntryProvider };
                    dion_runtime::data::extension::ExtensionType::EntryProvider {
                        has_search: ans.has_search.cst_decode(),
                    }
                }
                1 => {
                    let ans = unsafe { self.kind.EntryDetailedProvider };
                    dion_runtime::data::extension::ExtensionType::EntryDetailedProvider {
                        id_types: ans.id_types.cst_decode(),
                    }
                }
                2 => {
                    let ans = unsafe { self.kind.SourceProvider };
                    dion_runtime::data::extension::ExtensionType::SourceProvider {
                        id_types: ans.id_types.cst_decode(),
                    }
                }
                3 => {
                    let ans = unsafe { self.kind.SourceProcessor };
                    dion_runtime::data::extension::ExtensionType::SourceProcessor {
                        sourcetypes: ans.sourcetypes.cst_decode(),
                        opentype: ans.opentype.cst_decode(),
                    }
                }
                4 => {
                    let ans = unsafe { self.kind.EntryProcessor };
                    dion_runtime::data::extension::ExtensionType::EntryProcessor {
                        trigger_map_entry: ans.trigger_map_entry.cst_decode(),
                        trigger_on_entry_activity: ans.trigger_on_entry_activity.cst_decode(),
                    }
                }
                5 => {
                    let ans = unsafe { self.kind.URLHandler };
                    dion_runtime::data::extension::ExtensionType::URLHandler {
                        url_patterns: ans.url_patterns.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::source::Link> for wire_cst_link {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::source::Link {
            dion_runtime::data::source::Link {
                url: self.url.cst_decode(),
                header: self.header.cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<ProxyExtension>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<ProxyExtension> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
    impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::source::Entry>> for *mut wire_cst_list_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::source::Entry> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::source::EntryId>> for *mut wire_cst_list_entry_id {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::source::EntryId> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::extension::ExtensionType>>
        for *mut wire_cst_list_extension_type
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::extension::ExtensionType> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::source::MediaType>> for *mut wire_cst_list_media_type {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::source::MediaType> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, String)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::extension_repo::RemoteExtension>>
        for *mut wire_cst_list_remote_extension
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::extension_repo::RemoteExtension> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::extension::SourceOpenType>>
        for *mut wire_cst_list_source_open_type
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::extension::SourceOpenType> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<dion_runtime::data::source::SourceType>> for *mut wire_cst_list_source_type {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<dion_runtime::data::source::SourceType> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<(String, String)> for wire_cst_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<dion_runtime::data::extension_repo::RemoteExtension> for wire_cst_remote_extension {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension_repo::RemoteExtension {
            dion_runtime::data::extension_repo::RemoteExtension {
                id: self.id.cst_decode(),
                exturl: self.exturl.cst_decode(),
                name: self.name.cst_decode(),
                cover: self.cover.cst_decode(),
                version: self.version.cst_decode(),
                compatible: self.compatible.cst_decode(),
            }
        }
    }
    impl CstDecode<dion_runtime::data::extension_repo::RemoteExtensionResult>
        for wire_cst_remote_extension_result
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dion_runtime::data::extension_repo::RemoteExtensionResult {
            dion_runtime::data::extension_repo::RemoteExtensionResult {
                content: self.content.cst_decode(),
                hasnext: self.hasnext.cst_decode(),
                length: self.length.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_entry {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                title: core::ptr::null_mut(),
                media_type: Default::default(),
                cover: core::ptr::null_mut(),
                author: core::ptr::null_mut(),
                rating: core::ptr::null_mut(),
                views: core::ptr::null_mut(),
                length: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_entry {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_entry_id {
        fn new_with_null_ptr() -> Self {
            Self {
                uid: core::ptr::null_mut(),
                iddata: core::ptr::null_mut(),
                id_type: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_entry_id {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_entry_list {
        fn new_with_null_ptr() -> Self {
            Self {
                hasnext: core::ptr::null_mut(),
                length: core::ptr::null_mut(),
                content: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_entry_list {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_extension_data {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                name: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                icon: core::ptr::null_mut(),
                desc: core::ptr::null_mut(),
                author: core::ptr::null_mut(),
                tags: core::ptr::null_mut(),
                lang: core::ptr::null_mut(),
                nsfw: Default::default(),
                media_type: core::ptr::null_mut(),
                extension_type: core::ptr::null_mut(),
                repo: core::ptr::null_mut(),
                version: core::ptr::null_mut(),
                license: core::ptr::null_mut(),
                compatible: Default::default(),
            }
        }
    }
    impl Default for wire_cst_extension_data {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_extension_manager_data {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                icon: core::ptr::null_mut(),
                repo: core::ptr::null_mut(),
                api_version: Default::default(),
            }
        }
    }
    impl Default for wire_cst_extension_manager_data {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_extension_repo {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                description: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                id: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_extension_repo {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_extension_type {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: ExtensionTypeKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_extension_type {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_link {
        fn new_with_null_ptr() -> Self {
            Self {
                url: core::ptr::null_mut(),
                header: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_link {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_string_string {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_string_string {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_remote_extension {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                exturl: core::ptr::null_mut(),
                name: core::ptr::null_mut(),
                cover: core::ptr::null_mut(),
                version: core::ptr::null_mut(),
                compatible: Default::default(),
            }
        }
    }
    impl Default for wire_cst_remote_extension {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_remote_extension_result {
        fn new_with_null_ptr() -> Self {
            Self {
                content: core::ptr::null_mut(),
                hasnext: core::ptr::null_mut(),
                length: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_remote_extension_result {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__cancel__CancelToken_cancel(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__cancel__CancelToken_cancel_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__cancel__CancelToken_get_child(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__cancel__CancelToken_get_child_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__cancel__CancelToken_is_cancelled(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__cancel__CancelToken_is_cancelled_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__cancel__CancelToken_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__cancel__CancelToken_new_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__client__ExtensionClient_init(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__client__ExtensionClient_init_impl(port_, ptr_, rust_vec_len_, data_len_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__client__ManagerClient_init(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__client__ManagerClient_init_impl(port_, ptr_, rust_vec_len_, data_len_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyAdapter_browse_repo(
        port_: i64,
        that: usize,
        repo: *mut wire_cst_extension_repo,
        page: i32,
    ) {
        wire__crate__api__extension__ProxyAdapter_browse_repo_impl(port_, that, repo, page)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyAdapter_get_extensions(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__extension__ProxyAdapter_get_extensions_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyAdapter_get_repo(
        port_: i64,
        that: usize,
        url: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__extension__ProxyAdapter_get_repo_impl(port_, that, url)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyAdapter_init_dion(
        port_: i64,
        client: usize,
    ) {
        wire__crate__api__extension__ProxyAdapter_init_dion_impl(port_, client)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyAdapter_install(
        port_: i64,
        that: usize,
        location: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__extension__ProxyAdapter_install_impl(port_, that, location)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyAdapter_uninstall(
        port_: i64,
        that: usize,
        ext: usize,
    ) {
        wire__crate__api__extension__ProxyAdapter_uninstall_impl(port_, that, ext)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_browse(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_browse_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_detail(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_detail_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_get_extension_data(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_get_extension_data_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_get_permissions(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_get_permissions_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_get_setting(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_get_setting_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_get_setting_ids(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_get_setting_ids_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_get_settings(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_get_settings_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_handle_url(
        port_: i64,
        that: usize,
        url: *mut wire_cst_list_prim_u_8_strict,
        token: *mut usize,
    ) {
        wire__crate__api__extension__ProxyExtension_handle_url_impl(port_, that, url, token)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_has_permission(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_has_permission_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_is_enabled(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__extension__ProxyExtension_is_enabled_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_map_entry(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_map_entry_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_map_source(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_map_source_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_merge_setting_definition(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_merge_setting_definition_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_on_entry_activity(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_on_entry_activity_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_reload(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__extension__ProxyExtension_reload_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_remove_permission(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_remove_permission_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_remove_setting(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_remove_setting_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_search(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_search_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_set_enabled(
        port_: i64,
        that: usize,
        enabled: bool,
    ) {
        wire__crate__api__extension__ProxyExtension_set_enabled_impl(port_, that, enabled)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_set_setting(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_set_setting_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__extension__ProxyExtension_source(
        port_: i64,
        ptr_: *mut u8,
        rust_vec_len_: i32,
        data_len_: i32,
    ) {
        wire__crate__api__extension__ProxyExtension_source_impl(
            port_,
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__source__entry_list_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__source__entry_list_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__extension__extension_data_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__extension__extension_data_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__extension_manager__extension_manager_data_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__extension_manager__extension_manager_data_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__extension_repo__extension_repo_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__extension_repo__extension_repo_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__crate__api__lets_init_app_here(port_: i64) {
        wire__crate__api__lets_init_app_here_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__source__link_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__source__link_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__source__media_type_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__source__media_type_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__source__release_status_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__source__release_status_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__extension_repo__remote_extension_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__extension_repo__remote_extension_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__extension_repo__remote_extension_result_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__extension_repo__remote_extension_result_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__extension__source_open_type_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__extension__source_open_type_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_wire__dion_runtime__data__custom_ui__timestamp_type_default(
        port_: i64,
    ) {
        wire__dion_runtime__data__custom_ui__timestamp_type_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionClient(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionClient>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionClient(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ExtensionClient>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManagerClient(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManagerClient(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ManagerClient>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyAdapter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyAdapter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyAdapter>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProxyExtension>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_extension_repo(
    ) -> *mut wire_cst_extension_repo {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_extension_repo::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_f_32(value: f32) -> *mut f32 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_box_autoadd_link() -> *mut wire_cst_link {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_link::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension{
        let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_String(
        len: i32,
    ) -> *mut wire_cst_list_String {
        let wrap = wire_cst_list_String {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_entry(
        len: i32,
    ) -> *mut wire_cst_list_entry {
        let wrap = wire_cst_list_entry {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_entry>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_entry_id(
        len: i32,
    ) -> *mut wire_cst_list_entry_id {
        let wrap = wire_cst_list_entry_id {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_entry_id>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_extension_type(
        len: i32,
    ) -> *mut wire_cst_list_extension_type {
        let wrap = wire_cst_list_extension_type {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_extension_type>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_media_type(
        len: i32,
    ) -> *mut wire_cst_list_media_type {
        let wrap = wire_cst_list_media_type {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_record_string_string(
        len: i32,
    ) -> *mut wire_cst_list_record_string_string {
        let wrap = wire_cst_list_record_string_string {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_string_string>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_remote_extension(
        len: i32,
    ) -> *mut wire_cst_list_remote_extension {
        let wrap = wire_cst_list_remote_extension {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_remote_extension>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_source_open_type(
        len: i32,
    ) -> *mut wire_cst_list_source_open_type {
        let wrap = wire_cst_list_source_open_type {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_rdion_runtime_cst_new_list_source_type(
        len: i32,
    ) -> *mut wire_cst_list_source_type {
        let wrap = wire_cst_list_source_type {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_entry {
        id: *mut wire_cst_list_entry_id,
        url: *mut wire_cst_list_prim_u_8_strict,
        title: *mut wire_cst_list_prim_u_8_strict,
        media_type: i32,
        cover: *mut wire_cst_link,
        author: *mut wire_cst_list_String,
        rating: *mut f32,
        views: *mut f32,
        length: *mut i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_entry_id {
        uid: *mut wire_cst_list_prim_u_8_strict,
        iddata: *mut wire_cst_list_prim_u_8_strict,
        id_type: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_entry_list {
        hasnext: *mut bool,
        length: *mut i32,
        content: *mut wire_cst_list_entry,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_extension_data {
        id: *mut wire_cst_list_prim_u_8_strict,
        name: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
        icon: *mut wire_cst_list_prim_u_8_strict,
        desc: *mut wire_cst_list_prim_u_8_strict,
        author: *mut wire_cst_list_String,
        tags: *mut wire_cst_list_String,
        lang: *mut wire_cst_list_String,
        nsfw: bool,
        media_type: *mut wire_cst_list_media_type,
        extension_type: *mut wire_cst_list_extension_type,
        repo: *mut wire_cst_list_prim_u_8_strict,
        version: *mut wire_cst_list_prim_u_8_strict,
        license: *mut wire_cst_list_prim_u_8_strict,
        compatible: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_extension_manager_data {
        name: *mut wire_cst_list_prim_u_8_strict,
        icon: *mut wire_cst_list_prim_u_8_strict,
        repo: *mut wire_cst_list_prim_u_8_strict,
        api_version: u32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_extension_repo {
        name: *mut wire_cst_list_prim_u_8_strict,
        description: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
        id: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_extension_type {
        tag: i32,
        kind: ExtensionTypeKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union ExtensionTypeKind {
        EntryProvider: wire_cst_ExtensionType_EntryProvider,
        EntryDetailedProvider: wire_cst_ExtensionType_EntryDetailedProvider,
        SourceProvider: wire_cst_ExtensionType_SourceProvider,
        SourceProcessor: wire_cst_ExtensionType_SourceProcessor,
        EntryProcessor: wire_cst_ExtensionType_EntryProcessor,
        URLHandler: wire_cst_ExtensionType_URLHandler,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ExtensionType_EntryProvider {
        has_search: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ExtensionType_EntryDetailedProvider {
        id_types: *mut wire_cst_list_String,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ExtensionType_SourceProvider {
        id_types: *mut wire_cst_list_String,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ExtensionType_SourceProcessor {
        sourcetypes: *mut wire_cst_list_source_type,
        opentype: *mut wire_cst_list_source_open_type,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ExtensionType_EntryProcessor {
        trigger_map_entry: bool,
        trigger_on_entry_activity: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ExtensionType_URLHandler {
        url_patterns: *mut wire_cst_list_String,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_link {
        url: *mut wire_cst_list_prim_u_8_strict,
        header: *mut wire_cst_list_record_string_string,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProxyExtension
    {
        ptr: *mut usize,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_String {
        ptr: *mut *mut wire_cst_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_entry {
        ptr: *mut wire_cst_entry,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_entry_id {
        ptr: *mut wire_cst_entry_id,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_extension_type {
        ptr: *mut wire_cst_extension_type,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_media_type {
        ptr: *mut i32,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_string_string {
        ptr: *mut wire_cst_record_string_string,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_remote_extension {
        ptr: *mut wire_cst_remote_extension,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_source_open_type {
        ptr: *mut i32,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_source_type {
        ptr: *mut i32,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_string_string {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_remote_extension {
        id: *mut wire_cst_list_prim_u_8_strict,
        exturl: *mut wire_cst_list_prim_u_8_strict,
        name: *mut wire_cst_list_prim_u_8_strict,
        cover: *mut wire_cst_link,
        version: *mut wire_cst_list_prim_u_8_strict,
        compatible: bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_remote_extension_result {
        content: *mut wire_cst_list_remote_extension,
        hasnext: *mut bool,
        length: *mut i32,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
