// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/dion_runtime/datastructs.dart';
import 'third_party/dion_runtime/jsextension.dart';
import 'third_party/dion_runtime/permission.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.4.0';

  @override
  int get rustContentHash => -147716948;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rdion_runtime',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  CancelToken crateApiSimpleCancelTokenNew();

  Future<void> crateApiSimpleExtensionManagerProxyAddFromFile(
      {required ExtensionManagerProxy that, required String path});

  Future<List<ExtensionProxy>> crateApiSimpleExtensionManagerProxyIter(
      {required ExtensionManagerProxy that});

  ExtensionManagerProxy crateApiSimpleExtensionManagerProxyNew();

  Future<List<Entry>> crateApiSimpleExtensionProxyBrowse(
      {required ExtensionProxy that,
      required PlatformInt64 page,
      required Sort sort,
      CancelToken? token});

  Future<ExtensionData> crateApiSimpleExtensionProxyData(
      {required ExtensionProxy that});

  Future<EntryDetailed> crateApiSimpleExtensionProxyDetail(
      {required ExtensionProxy that, required Entry entry, CancelToken? token});

  Future<void> crateApiSimpleExtensionProxyEnable(
      {required ExtensionProxy that});

  Future<Entry?> crateApiSimpleExtensionProxyFromurl(
      {required ExtensionProxy that, required String url, CancelToken? token});

  Future<bool> crateApiSimpleExtensionProxyIsEnabled(
      {required ExtensionProxy that});

  Future<List<Entry>> crateApiSimpleExtensionProxySearch(
      {required ExtensionProxy that,
      required PlatformInt64 page,
      required String filter,
      CancelToken? token});

  Future<Source> crateApiSimpleExtensionProxySource(
      {required ExtensionProxy that, required Episode ep, CancelToken? token});

  Future<QueueStore> crateApiSimpleQueueStoreDefault();

  Future<void> crateApiSimpleInitApp();

  Future<void> crateApiSimpleInternalSendPermissionRequestAnswer(
      {required bool answer});

  Stream<PermissionRequest>
      crateApiSimpleInternalSetPermissionRequestListener();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CancelToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CancelToken;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CancelTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExtensionManagerProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExtensionManagerProxy;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExtensionManagerProxyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExtensionProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExtensionProxy;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExtensionProxyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_QueueStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_QueueStore;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_QueueStorePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  CancelToken crateApiSimpleCancelTokenNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__simple__CancelToken_new();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCancelTokenNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCancelTokenNewConstMeta =>
      const TaskConstMeta(
        debugName: "CancelToken_new",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleExtensionManagerProxyAddFromFile(
      {required ExtensionManagerProxy that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
                that);
        var arg1 = cst_encode_String(path);
        return wire
            .wire__crate__api__simple__ExtensionManagerProxy_add_from_file(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionManagerProxyAddFromFileConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionManagerProxyAddFromFileConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionManagerProxy_add_from_file",
        argNames: ["that", "path"],
      );

  @override
  Future<List<ExtensionProxy>> crateApiSimpleExtensionManagerProxyIter(
      {required ExtensionManagerProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
                that);
        return wire.wire__crate__api__simple__ExtensionManagerProxy_iter(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleExtensionManagerProxyIterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionManagerProxyIterConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionManagerProxy_iter",
        argNames: ["that"],
      );

  @override
  ExtensionManagerProxy crateApiSimpleExtensionManagerProxyNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__simple__ExtensionManagerProxy_new();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleExtensionManagerProxyNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionManagerProxyNewConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionManagerProxy_new",
        argNames: [],
      );

  @override
  Future<List<Entry>> crateApiSimpleExtensionProxyBrowse(
      {required ExtensionProxy that,
      required PlatformInt64 page,
      required Sort sort,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        var arg1 = cst_encode_i_64(page);
        var arg2 = cst_encode_sort(sort);
        var arg3 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__ExtensionProxy_browse(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionProxyBrowseConstMeta,
      argValues: [that, page, sort, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxyBrowseConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_browse",
        argNames: ["that", "page", "sort", "token"],
      );

  @override
  Future<ExtensionData> crateApiSimpleExtensionProxyData(
      {required ExtensionProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        return wire.wire__crate__api__simple__ExtensionProxy_data(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_extension_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleExtensionProxyDataConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxyDataConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_data",
        argNames: ["that"],
      );

  @override
  Future<EntryDetailed> crateApiSimpleExtensionProxyDetail(
      {required ExtensionProxy that,
      required Entry entry,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        var arg1 = cst_encode_box_autoadd_entry(entry);
        var arg2 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__ExtensionProxy_detail(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_entry_detailed,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionProxyDetailConstMeta,
      argValues: [that, entry, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxyDetailConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_detail",
        argNames: ["that", "entry", "token"],
      );

  @override
  Future<void> crateApiSimpleExtensionProxyEnable(
      {required ExtensionProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        return wire.wire__crate__api__simple__ExtensionProxy_enable(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionProxyEnableConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxyEnableConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_enable",
        argNames: ["that"],
      );

  @override
  Future<Entry?> crateApiSimpleExtensionProxyFromurl(
      {required ExtensionProxy that, required String url, CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        var arg1 = cst_encode_String(url);
        var arg2 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__ExtensionProxy_fromurl(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionProxyFromurlConstMeta,
      argValues: [that, url, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxyFromurlConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_fromurl",
        argNames: ["that", "url", "token"],
      );

  @override
  Future<bool> crateApiSimpleExtensionProxyIsEnabled(
      {required ExtensionProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        return wire.wire__crate__api__simple__ExtensionProxy_is_enabled(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleExtensionProxyIsEnabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxyIsEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_is_enabled",
        argNames: ["that"],
      );

  @override
  Future<List<Entry>> crateApiSimpleExtensionProxySearch(
      {required ExtensionProxy that,
      required PlatformInt64 page,
      required String filter,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        var arg1 = cst_encode_i_64(page);
        var arg2 = cst_encode_String(filter);
        var arg3 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__ExtensionProxy_search(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionProxySearchConstMeta,
      argValues: [that, page, filter, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxySearchConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_search",
        argNames: ["that", "page", "filter", "token"],
      );

  @override
  Future<Source> crateApiSimpleExtensionProxySource(
      {required ExtensionProxy that, required Episode ep, CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
                that);
        var arg1 = cst_encode_box_autoadd_episode(ep);
        var arg2 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__ExtensionProxy_source(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_source,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtensionProxySourceConstMeta,
      argValues: [that, ep, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtensionProxySourceConstMeta =>
      const TaskConstMeta(
        debugName: "ExtensionProxy_source",
        argNames: ["that", "ep", "token"],
      );

  @override
  Future<QueueStore> crateApiSimpleQueueStoreDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__simple__QueueStore_default(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleQueueStoreDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleQueueStoreDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "QueueStore_default",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__simple__init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleInternalSendPermissionRequestAnswer(
      {required bool answer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(answer);
        return wire
            .wire__crate__api__simple__internal_send_permission_request_answer(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleInternalSendPermissionRequestAnswerConstMeta,
      argValues: [answer],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleInternalSendPermissionRequestAnswerConstMeta =>
          const TaskConstMeta(
            debugName: "internal_send_permission_request_answer",
            argNames: ["answer"],
          );

  @override
  Stream<PermissionRequest>
      crateApiSimpleInternalSetPermissionRequestListener() {
    final request = RustStreamSink<PermissionRequest>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_StreamSink_permission_request_Dco(request);
        return wire
            .wire__crate__api__simple__internal_set_permission_request_listener(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInternalSetPermissionRequestListenerConstMeta,
      argValues: [request],
      apiImpl: this,
    )));
    return request.stream;
  }

  TaskConstMeta
      get kCrateApiSimpleInternalSetPermissionRequestListenerConstMeta =>
          const TaskConstMeta(
            debugName: "internal_set_permission_request_listener",
            argNames: ["request"],
          );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CancelToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CancelToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExtensionManagerProxy => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExtensionManagerProxy => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExtensionProxy => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExtensionProxy => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_QueueStore => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_QueueStore => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  CancelToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CancelTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionManagerProxy
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionProxy
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QueueStore
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QueueStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionManagerProxy
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionManagerProxy
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionProxy
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  CancelToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CancelTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionManagerProxy
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExtensionProxy
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QueueStore
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QueueStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<PermissionRequest>
      dco_decode_StreamSink_permission_request_Dco(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CancelToken
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DataSource dco_decode_box_autoadd_data_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_data_source(raw);
  }

  @protected
  Entry dco_decode_box_autoadd_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_entry(raw);
  }

  @protected
  Episode dco_decode_box_autoadd_episode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_episode(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  LinkSource dco_decode_box_autoadd_link_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_link_source(raw);
  }

  @protected
  DataSource dco_decode_data_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DataSource_Paragraphlist(
          paragraphs: dco_decode_list_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Entry dco_decode_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Entry(
      id: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      title: dco_decode_String(arr[2]),
      mediaType: dco_decode_media_type(arr[3]),
      cover: dco_decode_opt_String(arr[4]),
      coverHeader: dco_decode_opt_Map_String_String(arr[5]),
      auther: dco_decode_opt_list_String(arr[6]),
      rating: dco_decode_opt_box_autoadd_f_32(arr[7]),
      views: dco_decode_opt_box_autoadd_f_32(arr[8]),
      length: dco_decode_opt_box_autoadd_i_64(arr[9]),
    );
  }

  @protected
  EntryDetailed dco_decode_entry_detailed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return EntryDetailed(
      id: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      title: dco_decode_String(arr[2]),
      mediaType: dco_decode_media_type(arr[3]),
      status: dco_decode_release_status(arr[4]),
      cover: dco_decode_opt_String(arr[5]),
      coverHeader: dco_decode_opt_Map_String_String(arr[6]),
      episodes: dco_decode_list_episode_list(arr[7]),
      genres: dco_decode_opt_list_String(arr[8]),
      alttitles: dco_decode_opt_list_String(arr[9]),
      auther: dco_decode_opt_list_String(arr[10]),
      rating: dco_decode_opt_box_autoadd_f_32(arr[11]),
      views: dco_decode_opt_box_autoadd_f_32(arr[12]),
      length: dco_decode_opt_box_autoadd_i_64(arr[13]),
    );
  }

  @protected
  Episode dco_decode_episode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Episode(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      cover: dco_decode_opt_String(arr[3]),
      coverHeader: dco_decode_opt_Map_String_String(arr[4]),
      timestamp: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  EpisodeList dco_decode_episode_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EpisodeList(
      title: dco_decode_String(arr[0]),
      episodes: dco_decode_list_episode(arr[1]),
    );
  }

  @protected
  ExtensionData dco_decode_extension_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ExtensionData(
      repo: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      mediaType: dco_decode_opt_list_media_type(arr[2]),
      giturl: dco_decode_opt_String(arr[3]),
      version: dco_decode_opt_String(arr[4]),
      desc: dco_decode_opt_String(arr[5]),
      author: dco_decode_opt_String(arr[6]),
      license: dco_decode_opt_String(arr[7]),
      tags: dco_decode_opt_list_String(arr[8]),
      nsfw: dco_decode_opt_box_autoadd_bool(arr[9]),
      lang: dco_decode_list_String(arr[10]),
      url: dco_decode_opt_String(arr[11]),
      icon: dco_decode_opt_String(arr[12]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  ImageListAudio dco_decode_image_list_audio(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ImageListAudio(
      link: dco_decode_String(arr[0]),
      from: dco_decode_i_64(arr[1]),
      to: dco_decode_i_64(arr[2]),
    );
  }

  @protected
  LinkSource dco_decode_link_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LinkSource_Epub(
          link: dco_decode_String(raw[1]),
        );
      case 1:
        return LinkSource_Pdf(
          link: dco_decode_String(raw[1]),
        );
      case 2:
        return LinkSource_Imagelist(
          links: dco_decode_list_String(raw[1]),
          header: dco_decode_Map_String_String(raw[2]),
          audio: dco_decode_list_image_list_audio(raw[3]),
        );
      case 3:
        return LinkSource_M3u8(
          link: dco_decode_String(raw[1]),
          sub: dco_decode_list_subtitles(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<ExtensionProxy>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Entry> dco_decode_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_entry).toList();
  }

  @protected
  List<Episode> dco_decode_list_episode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_episode).toList();
  }

  @protected
  List<EpisodeList> dco_decode_list_episode_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_episode_list).toList();
  }

  @protected
  List<ImageListAudio> dco_decode_list_image_list_audio(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_image_list_audio).toList();
  }

  @protected
  List<MediaType> dco_decode_list_media_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_media_type).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<Subtitles> dco_decode_list_subtitles(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_subtitles).toList();
  }

  @protected
  MediaType dco_decode_media_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaType.values[raw as int];
  }

  @protected
  Map<String, String>? dco_decode_opt_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_String(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  CancelToken?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
            raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  Entry? dco_decode_opt_box_autoadd_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_entry(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<MediaType>? dco_decode_opt_list_media_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_media_type(raw);
  }

  @protected
  Permission dco_decode_permission(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Permission_StoragePermission(
          path: dco_decode_String(raw[1]),
          write: dco_decode_bool(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PermissionRequest dco_decode_permission_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PermissionRequest(
      permission: dco_decode_permission(arr[0]),
      msg: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  ReleaseStatus dco_decode_release_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReleaseStatus.values[raw as int];
  }

  @protected
  Sort dco_decode_sort(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Sort.values[raw as int];
  }

  @protected
  Source dco_decode_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Source_Data(
          sourcedata: dco_decode_box_autoadd_data_source(raw[1]),
        );
      case 1:
        return Source_Directlink(
          sourcedata: dco_decode_box_autoadd_link_source(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Subtitles dco_decode_subtitles(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Subtitles(
      title: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  CancelToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CancelTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionManagerProxy
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionProxy
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  QueueStore
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QueueStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionManagerProxy
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionManagerProxy
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionProxy
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  CancelToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CancelTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionManagerProxy
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExtensionProxy
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  QueueStore
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QueueStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<PermissionRequest>
      sse_decode_StreamSink_permission_request_Dco(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CancelToken
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  DataSource sse_decode_box_autoadd_data_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_data_source(deserializer));
  }

  @protected
  Entry sse_decode_box_autoadd_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_entry(deserializer));
  }

  @protected
  Episode sse_decode_box_autoadd_episode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_episode(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_32(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  LinkSource sse_decode_box_autoadd_link_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_link_source(deserializer));
  }

  @protected
  DataSource sse_decode_data_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_paragraphs = sse_decode_list_String(deserializer);
        return DataSource_Paragraphlist(paragraphs: var_paragraphs);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Entry sse_decode_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_mediaType = sse_decode_media_type(deserializer);
    var var_cover = sse_decode_opt_String(deserializer);
    var var_coverHeader = sse_decode_opt_Map_String_String(deserializer);
    var var_auther = sse_decode_opt_list_String(deserializer);
    var var_rating = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_views = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_length = sse_decode_opt_box_autoadd_i_64(deserializer);
    return Entry(
        id: var_id,
        url: var_url,
        title: var_title,
        mediaType: var_mediaType,
        cover: var_cover,
        coverHeader: var_coverHeader,
        auther: var_auther,
        rating: var_rating,
        views: var_views,
        length: var_length);
  }

  @protected
  EntryDetailed sse_decode_entry_detailed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_mediaType = sse_decode_media_type(deserializer);
    var var_status = sse_decode_release_status(deserializer);
    var var_cover = sse_decode_opt_String(deserializer);
    var var_coverHeader = sse_decode_opt_Map_String_String(deserializer);
    var var_episodes = sse_decode_list_episode_list(deserializer);
    var var_genres = sse_decode_opt_list_String(deserializer);
    var var_alttitles = sse_decode_opt_list_String(deserializer);
    var var_auther = sse_decode_opt_list_String(deserializer);
    var var_rating = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_views = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_length = sse_decode_opt_box_autoadd_i_64(deserializer);
    return EntryDetailed(
        id: var_id,
        url: var_url,
        title: var_title,
        mediaType: var_mediaType,
        status: var_status,
        cover: var_cover,
        coverHeader: var_coverHeader,
        episodes: var_episodes,
        genres: var_genres,
        alttitles: var_alttitles,
        auther: var_auther,
        rating: var_rating,
        views: var_views,
        length: var_length);
  }

  @protected
  Episode sse_decode_episode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_cover = sse_decode_opt_String(deserializer);
    var var_coverHeader = sse_decode_opt_Map_String_String(deserializer);
    var var_timestamp = sse_decode_opt_String(deserializer);
    return Episode(
        id: var_id,
        name: var_name,
        url: var_url,
        cover: var_cover,
        coverHeader: var_coverHeader,
        timestamp: var_timestamp);
  }

  @protected
  EpisodeList sse_decode_episode_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_episodes = sse_decode_list_episode(deserializer);
    return EpisodeList(title: var_title, episodes: var_episodes);
  }

  @protected
  ExtensionData sse_decode_extension_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_repo = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_mediaType = sse_decode_opt_list_media_type(deserializer);
    var var_giturl = sse_decode_opt_String(deserializer);
    var var_version = sse_decode_opt_String(deserializer);
    var var_desc = sse_decode_opt_String(deserializer);
    var var_author = sse_decode_opt_String(deserializer);
    var var_license = sse_decode_opt_String(deserializer);
    var var_tags = sse_decode_opt_list_String(deserializer);
    var var_nsfw = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_lang = sse_decode_list_String(deserializer);
    var var_url = sse_decode_opt_String(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    return ExtensionData(
        repo: var_repo,
        name: var_name,
        mediaType: var_mediaType,
        giturl: var_giturl,
        version: var_version,
        desc: var_desc,
        author: var_author,
        license: var_license,
        tags: var_tags,
        nsfw: var_nsfw,
        lang: var_lang,
        url: var_url,
        icon: var_icon);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  ImageListAudio sse_decode_image_list_audio(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_link = sse_decode_String(deserializer);
    var var_from = sse_decode_i_64(deserializer);
    var var_to = sse_decode_i_64(deserializer);
    return ImageListAudio(link: var_link, from: var_from, to: var_to);
  }

  @protected
  LinkSource sse_decode_link_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_link = sse_decode_String(deserializer);
        return LinkSource_Epub(link: var_link);
      case 1:
        var var_link = sse_decode_String(deserializer);
        return LinkSource_Pdf(link: var_link);
      case 2:
        var var_links = sse_decode_list_String(deserializer);
        var var_header = sse_decode_Map_String_String(deserializer);
        var var_audio = sse_decode_list_image_list_audio(deserializer);
        return LinkSource_Imagelist(
            links: var_links, header: var_header, audio: var_audio);
      case 3:
        var var_link = sse_decode_String(deserializer);
        var var_sub = sse_decode_list_subtitles(deserializer);
        return LinkSource_M3u8(link: var_link, sub: var_sub);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<ExtensionProxy>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExtensionProxy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Entry> sse_decode_list_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Entry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<Episode> sse_decode_list_episode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Episode>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_episode(deserializer));
    }
    return ans_;
  }

  @protected
  List<EpisodeList> sse_decode_list_episode_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EpisodeList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_episode_list(deserializer));
    }
    return ans_;
  }

  @protected
  List<ImageListAudio> sse_decode_list_image_list_audio(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ImageListAudio>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_image_list_audio(deserializer));
    }
    return ans_;
  }

  @protected
  List<MediaType> sse_decode_list_media_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MediaType>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_media_type(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<Subtitles> sse_decode_list_subtitles(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Subtitles>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_subtitles(deserializer));
    }
    return ans_;
  }

  @protected
  MediaType sse_decode_media_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaType.values[inner];
  }

  @protected
  Map<String, String>? sse_decode_opt_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CancelToken?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Entry? sse_decode_opt_box_autoadd_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_entry(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<MediaType>? sse_decode_opt_list_media_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_media_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Permission sse_decode_permission(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_path = sse_decode_String(deserializer);
        var var_write = sse_decode_bool(deserializer);
        return Permission_StoragePermission(path: var_path, write: var_write);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PermissionRequest sse_decode_permission_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_permission = sse_decode_permission(deserializer);
    var var_msg = sse_decode_opt_String(deserializer);
    return PermissionRequest(permission: var_permission, msg: var_msg);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ReleaseStatus sse_decode_release_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ReleaseStatus.values[inner];
  }

  @protected
  Sort sse_decode_sort(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Sort.values[inner];
  }

  @protected
  Source sse_decode_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_sourcedata = sse_decode_box_autoadd_data_source(deserializer);
        return Source_Data(sourcedata: var_sourcedata);
      case 1:
        var var_sourcedata = sse_decode_box_autoadd_link_source(deserializer);
        return Source_Directlink(sourcedata: var_sourcedata);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Subtitles sse_decode_subtitles(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return Subtitles(title: var_title, url: var_url);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
      CancelToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as CancelTokenImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
      ExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionManagerProxyImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
      ExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionProxyImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
      QueueStore raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as QueueStoreImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
      ExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionManagerProxyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
      ExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionManagerProxyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
      ExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionProxyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
      CancelToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as CancelTokenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
      ExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionManagerProxyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
      ExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ExtensionProxyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
      QueueStore raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as QueueStoreImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_32(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_media_type(MediaType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_release_status(ReleaseStatus raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_sort(Sort raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CancelTokenImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          ExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionManagerProxyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          ExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionProxyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
          QueueStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as QueueStoreImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          ExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionManagerProxyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          ExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionManagerProxyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          ExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionProxyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CancelTokenImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionManagerProxy(
          ExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionManagerProxyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          ExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExtensionProxyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQueueStore(
          QueueStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as QueueStoreImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_permission_request_Dco(
      RustStreamSink<PermissionRequest> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: DcoCodec(
          decodeSuccessData: dco_decode_permission_request,
          decodeErrorData: dco_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_data_source(
      DataSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_data_source(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_entry(Entry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_episode(Episode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_episode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_link_source(
      LinkSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_link_source(self, serializer);
  }

  @protected
  void sse_encode_data_source(DataSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DataSource_Paragraphlist(paragraphs: final paragraphs):
        sse_encode_i_32(0, serializer);
        sse_encode_list_String(paragraphs, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_entry(Entry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_media_type(self.mediaType, serializer);
    sse_encode_opt_String(self.cover, serializer);
    sse_encode_opt_Map_String_String(self.coverHeader, serializer);
    sse_encode_opt_list_String(self.auther, serializer);
    sse_encode_opt_box_autoadd_f_32(self.rating, serializer);
    sse_encode_opt_box_autoadd_f_32(self.views, serializer);
    sse_encode_opt_box_autoadd_i_64(self.length, serializer);
  }

  @protected
  void sse_encode_entry_detailed(EntryDetailed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_media_type(self.mediaType, serializer);
    sse_encode_release_status(self.status, serializer);
    sse_encode_opt_String(self.cover, serializer);
    sse_encode_opt_Map_String_String(self.coverHeader, serializer);
    sse_encode_list_episode_list(self.episodes, serializer);
    sse_encode_opt_list_String(self.genres, serializer);
    sse_encode_opt_list_String(self.alttitles, serializer);
    sse_encode_opt_list_String(self.auther, serializer);
    sse_encode_opt_box_autoadd_f_32(self.rating, serializer);
    sse_encode_opt_box_autoadd_f_32(self.views, serializer);
    sse_encode_opt_box_autoadd_i_64(self.length, serializer);
  }

  @protected
  void sse_encode_episode(Episode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.cover, serializer);
    sse_encode_opt_Map_String_String(self.coverHeader, serializer);
    sse_encode_opt_String(self.timestamp, serializer);
  }

  @protected
  void sse_encode_episode_list(EpisodeList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_list_episode(self.episodes, serializer);
  }

  @protected
  void sse_encode_extension_data(ExtensionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.repo, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_list_media_type(self.mediaType, serializer);
    sse_encode_opt_String(self.giturl, serializer);
    sse_encode_opt_String(self.version, serializer);
    sse_encode_opt_String(self.desc, serializer);
    sse_encode_opt_String(self.author, serializer);
    sse_encode_opt_String(self.license, serializer);
    sse_encode_opt_list_String(self.tags, serializer);
    sse_encode_opt_box_autoadd_bool(self.nsfw, serializer);
    sse_encode_list_String(self.lang, serializer);
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.icon, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_image_list_audio(
      ImageListAudio self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.link, serializer);
    sse_encode_i_64(self.from, serializer);
    sse_encode_i_64(self.to, serializer);
  }

  @protected
  void sse_encode_link_source(LinkSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LinkSource_Epub(link: final link):
        sse_encode_i_32(0, serializer);
        sse_encode_String(link, serializer);
      case LinkSource_Pdf(link: final link):
        sse_encode_i_32(1, serializer);
        sse_encode_String(link, serializer);
      case LinkSource_Imagelist(
          links: final links,
          header: final header,
          audio: final audio
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_list_String(links, serializer);
        sse_encode_Map_String_String(header, serializer);
        sse_encode_list_image_list_audio(audio, serializer);
      case LinkSource_M3u8(link: final link, sub: final sub):
        sse_encode_i_32(3, serializer);
        sse_encode_String(link, serializer);
        sse_encode_list_subtitles(sub, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          List<ExtensionProxy> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExtensionProxy(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_entry(List<Entry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_episode(List<Episode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_episode(item, serializer);
    }
  }

  @protected
  void sse_encode_list_episode_list(
      List<EpisodeList> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_episode_list(item, serializer);
    }
  }

  @protected
  void sse_encode_list_image_list_audio(
      List<ImageListAudio> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_image_list_audio(item, serializer);
    }
  }

  @protected
  void sse_encode_list_media_type(
      List<MediaType> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_media_type(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_subtitles(
      List<Subtitles> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_subtitles(item, serializer);
    }
  }

  @protected
  void sse_encode_media_type(MediaType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_Map_String_String(
      Map<String, String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_entry(Entry? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_entry(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_media_type(
      List<MediaType>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_media_type(self, serializer);
    }
  }

  @protected
  void sse_encode_permission(Permission self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Permission_StoragePermission(path: final path, write: final write):
        sse_encode_i_32(0, serializer);
        sse_encode_String(path, serializer);
        sse_encode_bool(write, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_permission_request(
      PermissionRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_permission(self.permission, serializer);
    sse_encode_opt_String(self.msg, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_release_status(ReleaseStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sort(Sort self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_source(Source self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Source_Data(sourcedata: final sourcedata):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_data_source(sourcedata, serializer);
      case Source_Directlink(sourcedata: final sourcedata):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_link_source(sourcedata, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_subtitles(Subtitles self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class CancelTokenImpl extends RustOpaque implements CancelToken {
  // Not to be used by end users
  CancelTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CancelTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CancelToken,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CancelToken,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CancelTokenPtr,
  );
}

@sealed
class ExtensionManagerProxyImpl extends RustOpaque
    implements ExtensionManagerProxy {
  // Not to be used by end users
  ExtensionManagerProxyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExtensionManagerProxyImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ExtensionManagerProxy,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ExtensionManagerProxy,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ExtensionManagerProxyPtr,
  );

  Future<void> addFromFile({required String path}) => RustLib.instance.api
      .crateApiSimpleExtensionManagerProxyAddFromFile(that: this, path: path);

  Future<List<ExtensionProxy>> iter() =>
      RustLib.instance.api.crateApiSimpleExtensionManagerProxyIter(
        that: this,
      );
}

@sealed
class ExtensionProxyImpl extends RustOpaque implements ExtensionProxy {
  // Not to be used by end users
  ExtensionProxyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExtensionProxyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ExtensionProxy,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ExtensionProxy,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ExtensionProxyPtr,
  );

  Future<List<Entry>> browse(
          {required PlatformInt64 page,
          required Sort sort,
          CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleExtensionProxyBrowse(
          that: this, page: page, sort: sort, token: token);

  Future<ExtensionData> data() =>
      RustLib.instance.api.crateApiSimpleExtensionProxyData(
        that: this,
      );

  Future<EntryDetailed> detail({required Entry entry, CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleExtensionProxyDetail(
          that: this, entry: entry, token: token);

  Future<void> enable() =>
      RustLib.instance.api.crateApiSimpleExtensionProxyEnable(
        that: this,
      );

  Future<Entry?> fromurl({required String url, CancelToken? token}) => RustLib
      .instance.api
      .crateApiSimpleExtensionProxyFromurl(that: this, url: url, token: token);

  Future<bool> isEnabled() =>
      RustLib.instance.api.crateApiSimpleExtensionProxyIsEnabled(
        that: this,
      );

  Future<List<Entry>> search(
          {required PlatformInt64 page,
          required String filter,
          CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleExtensionProxySearch(
          that: this, page: page, filter: filter, token: token);

  Future<Source> source({required Episode ep, CancelToken? token}) =>
      RustLib.instance.api
          .crateApiSimpleExtensionProxySource(that: this, ep: ep, token: token);
}

@sealed
class QueueStoreImpl extends RustOpaque implements QueueStore {
  // Not to be used by end users
  QueueStoreImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QueueStoreImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_QueueStore,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_QueueStore,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_QueueStorePtr,
  );
}
