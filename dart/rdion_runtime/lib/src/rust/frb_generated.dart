// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/dion_runtime/data/datastructs.dart';
import 'third_party/dion_runtime/data/settings.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1853035238;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rdion_runtime',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiSimpleCancelTokenCancel({required CancelToken that});

  Future<CancelToken> crateApiSimpleCancelTokenChild(
      {required CancelToken that});

  CancelToken crateApiSimpleCancelTokenNew();

  Future<List<SourceExtensionProxy>>
      crateApiSimpleSourceExtensionManagerProxyGetExtensions(
          {required SourceExtensionManagerProxy that});

  SourceExtensionManagerProxy crateApiSimpleSourceExtensionManagerProxyNew(
      {required String path});

  Future<List<Entry>> crateApiSimpleSourceExtensionProxyBrowse(
      {required SourceExtensionProxy that,
      required PlatformInt64 page,
      required Sort sort,
      CancelToken? token});

  Future<EntryDetailed> crateApiSimpleSourceExtensionProxyDetail(
      {required SourceExtensionProxy that,
      required String entryid,
      required List<Setting> settings,
      CancelToken? token});

  Future<Entry?> crateApiSimpleSourceExtensionProxyFromurl(
      {required SourceExtensionProxy that,
      required String url,
      CancelToken? token});

  Future<ExtensionData> crateApiSimpleSourceExtensionProxyGetData(
      {required SourceExtensionProxy that});

  Future<ExtensionSetting> crateApiSimpleSourceExtensionProxyGetSetting(
      {required SourceExtensionProxy that, required String name});

  Future<List<String>> crateApiSimpleSourceExtensionProxyGetSettingsIds(
      {required SourceExtensionProxy that});

  Future<bool> crateApiSimpleSourceExtensionProxyIsEnabled(
      {required SourceExtensionProxy that});

  Future<List<Entry>> crateApiSimpleSourceExtensionProxySearch(
      {required SourceExtensionProxy that,
      required PlatformInt64 page,
      required String filter,
      CancelToken? token});

  Future<void> crateApiSimpleSourceExtensionProxySetEnabled(
      {required SourceExtensionProxy that, required bool enabled});

  Future<void> crateApiSimpleSourceExtensionProxySetSetting(
      {required SourceExtensionProxy that,
      required String name,
      required Settingvalue value});

  Future<Source> crateApiSimpleSourceExtensionProxySource(
      {required SourceExtensionProxy that,
      required String epid,
      required List<Setting> settings,
      CancelToken? token});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CancelToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CancelToken;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CancelTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DropdownItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DropdownItem;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DropdownItemPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SourceExtensionManagerProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SourceExtensionManagerProxy;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SourceExtensionManagerProxyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SourceExtensionProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SourceExtensionProxy;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SourceExtensionProxyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ValuePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiSimpleCancelTokenCancel({required CancelToken that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                that);
        return wire.wire__crate__api__simple__CancelToken_cancel(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCancelTokenCancelConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCancelTokenCancelConstMeta =>
      const TaskConstMeta(
        debugName: "CancelToken_cancel",
        argNames: ["that"],
      );

  @override
  Future<CancelToken> crateApiSimpleCancelTokenChild(
      {required CancelToken that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                that);
        return wire.wire__crate__api__simple__CancelToken_child(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCancelTokenChildConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCancelTokenChildConstMeta =>
      const TaskConstMeta(
        debugName: "CancelToken_child",
        argNames: ["that"],
      );

  @override
  CancelToken crateApiSimpleCancelTokenNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__simple__CancelToken_new();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCancelTokenNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCancelTokenNewConstMeta =>
      const TaskConstMeta(
        debugName: "CancelToken_new",
        argNames: [],
      );

  @override
  Future<List<SourceExtensionProxy>>
      crateApiSimpleSourceExtensionManagerProxyGetExtensions(
          {required SourceExtensionManagerProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
                that);
        return wire
            .wire__crate__api__simple__SourceExtensionManagerProxy_get_extensions(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiSimpleSourceExtensionManagerProxyGetExtensionsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleSourceExtensionManagerProxyGetExtensionsConstMeta =>
          const TaskConstMeta(
            debugName: "SourceExtensionManagerProxy_get_extensions",
            argNames: ["that"],
          );

  @override
  SourceExtensionManagerProxy crateApiSimpleSourceExtensionManagerProxyNew(
      {required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(path);
        return wire
            .wire__crate__api__simple__SourceExtensionManagerProxy_new(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSourceExtensionManagerProxyNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionManagerProxyNewConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionManagerProxy_new",
        argNames: ["path"],
      );

  @override
  Future<List<Entry>> crateApiSimpleSourceExtensionProxyBrowse(
      {required SourceExtensionProxy that,
      required PlatformInt64 page,
      required Sort sort,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_i_64(page);
        var arg2 = cst_encode_sort(sort);
        var arg3 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__SourceExtensionProxy_browse(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyBrowseConstMeta,
      argValues: [that, page, sort, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxyBrowseConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_browse",
        argNames: ["that", "page", "sort", "token"],
      );

  @override
  Future<EntryDetailed> crateApiSimpleSourceExtensionProxyDetail(
      {required SourceExtensionProxy that,
      required String entryid,
      required List<Setting> settings,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_String(entryid);
        var arg2 = cst_encode_list_setting(settings);
        var arg3 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__SourceExtensionProxy_detail(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_entry_detailed,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyDetailConstMeta,
      argValues: [that, entryid, settings, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxyDetailConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_detail",
        argNames: ["that", "entryid", "settings", "token"],
      );

  @override
  Future<Entry?> crateApiSimpleSourceExtensionProxyFromurl(
      {required SourceExtensionProxy that,
      required String url,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_String(url);
        var arg2 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__SourceExtensionProxy_fromurl(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyFromurlConstMeta,
      argValues: [that, url, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxyFromurlConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_fromurl",
        argNames: ["that", "url", "token"],
      );

  @override
  Future<ExtensionData> crateApiSimpleSourceExtensionProxyGetData(
      {required SourceExtensionProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        return wire.wire__crate__api__simple__SourceExtensionProxy_get_data(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_extension_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyGetDataConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxyGetDataConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_get_data",
        argNames: ["that"],
      );

  @override
  Future<ExtensionSetting> crateApiSimpleSourceExtensionProxyGetSetting(
      {required SourceExtensionProxy that, required String name}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_String(name);
        return wire.wire__crate__api__simple__SourceExtensionProxy_get_setting(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_extension_setting,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyGetSettingConstMeta,
      argValues: [that, name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxyGetSettingConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_get_setting",
        argNames: ["that", "name"],
      );

  @override
  Future<List<String>> crateApiSimpleSourceExtensionProxyGetSettingsIds(
      {required SourceExtensionProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        return wire
            .wire__crate__api__simple__SourceExtensionProxy_get_settings_ids(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyGetSettingsIdsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleSourceExtensionProxyGetSettingsIdsConstMeta =>
          const TaskConstMeta(
            debugName: "SourceExtensionProxy_get_settings_ids",
            argNames: ["that"],
          );

  @override
  Future<bool> crateApiSimpleSourceExtensionProxyIsEnabled(
      {required SourceExtensionProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        return wire.wire__crate__api__simple__SourceExtensionProxy_is_enabled(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxyIsEnabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxyIsEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_is_enabled",
        argNames: ["that"],
      );

  @override
  Future<List<Entry>> crateApiSimpleSourceExtensionProxySearch(
      {required SourceExtensionProxy that,
      required PlatformInt64 page,
      required String filter,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_i_64(page);
        var arg2 = cst_encode_String(filter);
        var arg3 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__SourceExtensionProxy_search(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxySearchConstMeta,
      argValues: [that, page, filter, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxySearchConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_search",
        argNames: ["that", "page", "filter", "token"],
      );

  @override
  Future<void> crateApiSimpleSourceExtensionProxySetEnabled(
      {required SourceExtensionProxy that, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_bool(enabled);
        return wire.wire__crate__api__simple__SourceExtensionProxy_set_enabled(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxySetEnabledConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxySetEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_set_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiSimpleSourceExtensionProxySetSetting(
      {required SourceExtensionProxy that,
      required String name,
      required Settingvalue value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_String(name);
        var arg2 = cst_encode_box_autoadd_settingvalue(value);
        return wire.wire__crate__api__simple__SourceExtensionProxy_set_setting(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxySetSettingConstMeta,
      argValues: [that, name, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxySetSettingConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_set_setting",
        argNames: ["that", "name", "value"],
      );

  @override
  Future<Source> crateApiSimpleSourceExtensionProxySource(
      {required SourceExtensionProxy that,
      required String epid,
      required List<Setting> settings,
      CancelToken? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
                that);
        var arg1 = cst_encode_String(epid);
        var arg2 = cst_encode_list_setting(settings);
        var arg3 =
            cst_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
                token);
        return wire.wire__crate__api__simple__SourceExtensionProxy_source(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_source,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSourceExtensionProxySourceConstMeta,
      argValues: [that, epid, settings, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSourceExtensionProxySourceConstMeta =>
      const TaskConstMeta(
        debugName: "SourceExtensionProxy_source",
        argNames: ["that", "epid", "settings", "token"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CancelToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CancelToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DropdownItem => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DropdownItem => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SourceExtensionManagerProxy => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SourceExtensionManagerProxy => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SourceExtensionProxy => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SourceExtensionProxy => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  CancelToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CancelTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DropdownItem
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DropdownItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SourceExtensionManagerProxy
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionManagerProxyImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SourceExtensionProxy
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SourceExtensionProxy
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CancelToken
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CancelTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SourceExtensionManagerProxy
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionManagerProxyImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SourceExtensionProxy
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  CancelToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CancelTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DropdownItem
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DropdownItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SourceExtensionManagerProxy
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionManagerProxyImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SourceExtensionProxy
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CancelToken
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CustomUI dco_decode_box_autoadd_custom_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_ui(raw);
  }

  @protected
  DataSource dco_decode_box_autoadd_data_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_data_source(raw);
  }

  @protected
  Entry dco_decode_box_autoadd_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_entry(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  LinkSource dco_decode_box_autoadd_link_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_link_source(raw);
  }

  @protected
  SettingUI dco_decode_box_autoadd_setting_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_setting_ui(raw);
  }

  @protected
  Settingvalue dco_decode_box_autoadd_settingvalue(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settingvalue(raw);
  }

  @protected
  CustomUI dco_decode_custom_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomUI_Text(
          text: dco_decode_String(raw[1]),
        );
      case 1:
        return CustomUI_Image(
          image: dco_decode_String(raw[1]),
          header: dco_decode_opt_Map_String_String_None(raw[2]),
        );
      case 2:
        return CustomUI_Link(
          link: dco_decode_String(raw[1]),
          label: dco_decode_opt_String(raw[2]),
        );
      case 3:
        return CustomUI_TimeStamp(
          timestamp: dco_decode_String(raw[1]),
          display: dco_decode_timestamp_type(raw[2]),
        );
      case 4:
        return CustomUI_EntryCard(
          entry: dco_decode_box_autoadd_entry(raw[1]),
        );
      case 5:
        return CustomUI_Column(
          children: dco_decode_list_custom_ui(raw[1]),
        );
      case 6:
        return CustomUI_Row(
          children: dco_decode_list_custom_ui(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DataSource dco_decode_data_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DataSource_Paragraphlist(
          paragraphs: dco_decode_list_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Entry dco_decode_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Entry(
      id: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      title: dco_decode_String(arr[2]),
      mediaType: dco_decode_media_type(arr[3]),
      cover: dco_decode_opt_String(arr[4]),
      coverHeader: dco_decode_opt_Map_String_String_None(arr[5]),
      author: dco_decode_opt_list_String(arr[6]),
      rating: dco_decode_opt_box_autoadd_f_32(arr[7]),
      views: dco_decode_opt_box_autoadd_f_32(arr[8]),
      length: dco_decode_opt_box_autoadd_i_32(arr[9]),
    );
  }

  @protected
  EntryDetailed dco_decode_entry_detailed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 19)
      throw Exception('unexpected arr length: expect 19 but see ${arr.length}');
    return EntryDetailed(
      id: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      title: dco_decode_String(arr[2]),
      author: dco_decode_opt_list_String(arr[3]),
      ui: dco_decode_opt_box_autoadd_custom_ui(arr[4]),
      meta: dco_decode_opt_list_meta_data(arr[5]),
      mediaType: dco_decode_media_type(arr[6]),
      status: dco_decode_release_status(arr[7]),
      description: dco_decode_String(arr[8]),
      language: dco_decode_String(arr[9]),
      cover: dco_decode_opt_String(arr[10]),
      coverHeader: dco_decode_opt_Map_String_String_None(arr[11]),
      episodes: dco_decode_list_episode(arr[12]),
      genres: dco_decode_opt_list_String(arr[13]),
      alttitles: dco_decode_opt_list_String(arr[14]),
      rating: dco_decode_opt_box_autoadd_f_32(arr[15]),
      views: dco_decode_opt_box_autoadd_f_32(arr[16]),
      length: dco_decode_opt_box_autoadd_i_32(arr[17]),
      settings: dco_decode_opt_list_setting(arr[18]),
    );
  }

  @protected
  Episode dco_decode_episode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Episode(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      cover: dco_decode_opt_String(arr[3]),
      coverHeader: dco_decode_opt_Map_String_String_None(arr[4]),
      timestamp: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  ExtensionData dco_decode_extension_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExtensionData(
      id: dco_decode_String(arr[0]),
      repo: dco_decode_opt_String(arr[1]),
      name: dco_decode_String(arr[2]),
      mediaType: dco_decode_opt_list_media_type(arr[3]),
      giturl: dco_decode_opt_String(arr[4]),
      version: dco_decode_opt_String(arr[5]),
      desc: dco_decode_opt_String(arr[6]),
      author: dco_decode_opt_String(arr[7]),
      license: dco_decode_opt_String(arr[8]),
      tags: dco_decode_opt_list_String(arr[9]),
      nsfw: dco_decode_opt_box_autoadd_bool(arr[10]),
      lang: dco_decode_list_String(arr[11]),
      url: dco_decode_opt_String(arr[12]),
      icon: dco_decode_opt_String(arr[13]),
    );
  }

  @protected
  ExtensionSetting dco_decode_extension_setting(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ExtensionSetting(
      setting: dco_decode_setting(arr[0]),
      settingtype: dco_decode_settingtype(arr[1]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  ImageListAudio dco_decode_image_list_audio(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ImageListAudio(
      link: dco_decode_String(arr[0]),
      from: dco_decode_i_32(arr[1]),
      to: dco_decode_i_32(arr[2]),
    );
  }

  @protected
  LinkSource dco_decode_link_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LinkSource_Epub(
          link: dco_decode_String(raw[1]),
        );
      case 1:
        return LinkSource_Pdf(
          link: dco_decode_String(raw[1]),
        );
      case 2:
        return LinkSource_Imagelist(
          links: dco_decode_list_String(raw[1]),
          header: dco_decode_opt_Map_String_String_None(raw[2]),
          audio: dco_decode_opt_list_image_list_audio(raw[3]),
        );
      case 3:
        return LinkSource_M3u8(
          link: dco_decode_String(raw[1]),
          sub: dco_decode_list_subtitles(raw[2]),
        );
      case 4:
        return LinkSource_Mp3(
          chapters: dco_decode_list_url_chapter(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<DropdownItem>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem)
        .toList();
  }

  @protected
  List<SourceExtensionProxy>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CustomUI> dco_decode_list_custom_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_custom_ui).toList();
  }

  @protected
  List<Entry> dco_decode_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_entry).toList();
  }

  @protected
  List<Episode> dco_decode_list_episode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_episode).toList();
  }

  @protected
  List<ImageListAudio> dco_decode_list_image_list_audio(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_image_list_audio).toList();
  }

  @protected
  List<MediaType> dco_decode_list_media_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_media_type).toList();
  }

  @protected
  List<MetaData> dco_decode_list_meta_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_meta_data).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<Setting> dco_decode_list_setting(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_setting).toList();
  }

  @protected
  List<Subtitles> dco_decode_list_subtitles(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_subtitles).toList();
  }

  @protected
  List<UrlChapter> dco_decode_list_url_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_url_chapter).toList();
  }

  @protected
  MediaType dco_decode_media_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaType.values[raw as int];
  }

  @protected
  MetaData dco_decode_meta_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MetaData(
      key: dco_decode_String(arr[0]),
      value:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
              arr[1]),
    );
  }

  @protected
  Map<String, String>? dco_decode_opt_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_String_None(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  CancelToken?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
            raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  CustomUI? dco_decode_opt_box_autoadd_custom_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_custom_ui(raw);
  }

  @protected
  Entry? dco_decode_opt_box_autoadd_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_entry(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  SettingUI? dco_decode_opt_box_autoadd_setting_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_setting_ui(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<ImageListAudio>? dco_decode_opt_list_image_list_audio(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_image_list_audio(raw);
  }

  @protected
  List<MediaType>? dco_decode_opt_list_media_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_media_type(raw);
  }

  @protected
  List<MetaData>? dco_decode_opt_list_meta_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_meta_data(raw);
  }

  @protected
  List<Setting>? dco_decode_opt_list_setting(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_setting(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  ReleaseStatus dco_decode_release_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReleaseStatus.values[raw as int];
  }

  @protected
  Setting dco_decode_setting(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Setting(
      val: dco_decode_settingvalue(arr[0]),
      ui: dco_decode_opt_box_autoadd_setting_ui(arr[1]),
    );
  }

  @protected
  SettingUI dco_decode_setting_ui(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SettingUI_PathSelection(
          label: dco_decode_String(raw[1]),
          pickfolder: dco_decode_bool(raw[2]),
        );
      case 1:
        return SettingUI_Slider(
          label: dco_decode_String(raw[1]),
          min: dco_decode_f_64(raw[2]),
          max: dco_decode_f_64(raw[3]),
          step: dco_decode_f_64(raw[4]),
        );
      case 2:
        return SettingUI_Checkbox(
          label: dco_decode_String(raw[1]),
        );
      case 3:
        return SettingUI_Textbox(
          label: dco_decode_String(raw[1]),
        );
      case 4:
        return SettingUI_Dropdown(
          label: dco_decode_String(raw[1]),
          options:
              dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
                  raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Settingtype dco_decode_settingtype(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Settingtype.values[raw as int];
  }

  @protected
  Settingvalue dco_decode_settingvalue(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Settingvalue_String(
          val: dco_decode_String(raw[1]),
          defaultVal: dco_decode_String(raw[2]),
        );
      case 1:
        return Settingvalue_Number(
          val: dco_decode_f_64(raw[1]),
          defaultVal: dco_decode_f_64(raw[2]),
        );
      case 2:
        return Settingvalue_Boolean(
          val: dco_decode_bool(raw[1]),
          defaultVal: dco_decode_bool(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Sort dco_decode_sort(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Sort.values[raw as int];
  }

  @protected
  Source dco_decode_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Source_Data(
          sourcedata: dco_decode_box_autoadd_data_source(raw[1]),
        );
      case 1:
        return Source_Directlink(
          sourcedata: dco_decode_box_autoadd_link_source(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Subtitles dco_decode_subtitles(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Subtitles(
      title: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
    );
  }

  @protected
  TimestampType dco_decode_timestamp_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TimestampType.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UrlChapter dco_decode_url_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UrlChapter(
      title: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  CancelToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CancelTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DropdownItem
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DropdownItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionManagerProxy
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionProxy
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Value
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionProxy
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CancelToken
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CancelTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionManagerProxy
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionProxy
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  CancelToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CancelTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DropdownItem
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DropdownItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionManagerProxy
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionManagerProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SourceExtensionProxy
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SourceExtensionProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Value
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CancelToken
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CustomUI sse_decode_box_autoadd_custom_ui(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_ui(deserializer));
  }

  @protected
  DataSource sse_decode_box_autoadd_data_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_data_source(deserializer));
  }

  @protected
  Entry sse_decode_box_autoadd_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_entry(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  LinkSource sse_decode_box_autoadd_link_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_link_source(deserializer));
  }

  @protected
  SettingUI sse_decode_box_autoadd_setting_ui(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_setting_ui(deserializer));
  }

  @protected
  Settingvalue sse_decode_box_autoadd_settingvalue(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settingvalue(deserializer));
  }

  @protected
  CustomUI sse_decode_custom_ui(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_text = sse_decode_String(deserializer);
        return CustomUI_Text(text: var_text);
      case 1:
        var var_image = sse_decode_String(deserializer);
        var var_header = sse_decode_opt_Map_String_String_None(deserializer);
        return CustomUI_Image(image: var_image, header: var_header);
      case 2:
        var var_link = sse_decode_String(deserializer);
        var var_label = sse_decode_opt_String(deserializer);
        return CustomUI_Link(link: var_link, label: var_label);
      case 3:
        var var_timestamp = sse_decode_String(deserializer);
        var var_display = sse_decode_timestamp_type(deserializer);
        return CustomUI_TimeStamp(
            timestamp: var_timestamp, display: var_display);
      case 4:
        var var_entry = sse_decode_box_autoadd_entry(deserializer);
        return CustomUI_EntryCard(entry: var_entry);
      case 5:
        var var_children = sse_decode_list_custom_ui(deserializer);
        return CustomUI_Column(children: var_children);
      case 6:
        var var_children = sse_decode_list_custom_ui(deserializer);
        return CustomUI_Row(children: var_children);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DataSource sse_decode_data_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_paragraphs = sse_decode_list_String(deserializer);
        return DataSource_Paragraphlist(paragraphs: var_paragraphs);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Entry sse_decode_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_mediaType = sse_decode_media_type(deserializer);
    var var_cover = sse_decode_opt_String(deserializer);
    var var_coverHeader = sse_decode_opt_Map_String_String_None(deserializer);
    var var_author = sse_decode_opt_list_String(deserializer);
    var var_rating = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_views = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_length = sse_decode_opt_box_autoadd_i_32(deserializer);
    return Entry(
        id: var_id,
        url: var_url,
        title: var_title,
        mediaType: var_mediaType,
        cover: var_cover,
        coverHeader: var_coverHeader,
        author: var_author,
        rating: var_rating,
        views: var_views,
        length: var_length);
  }

  @protected
  EntryDetailed sse_decode_entry_detailed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_author = sse_decode_opt_list_String(deserializer);
    var var_ui = sse_decode_opt_box_autoadd_custom_ui(deserializer);
    var var_meta = sse_decode_opt_list_meta_data(deserializer);
    var var_mediaType = sse_decode_media_type(deserializer);
    var var_status = sse_decode_release_status(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_language = sse_decode_String(deserializer);
    var var_cover = sse_decode_opt_String(deserializer);
    var var_coverHeader = sse_decode_opt_Map_String_String_None(deserializer);
    var var_episodes = sse_decode_list_episode(deserializer);
    var var_genres = sse_decode_opt_list_String(deserializer);
    var var_alttitles = sse_decode_opt_list_String(deserializer);
    var var_rating = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_views = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_length = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_settings = sse_decode_opt_list_setting(deserializer);
    return EntryDetailed(
        id: var_id,
        url: var_url,
        title: var_title,
        author: var_author,
        ui: var_ui,
        meta: var_meta,
        mediaType: var_mediaType,
        status: var_status,
        description: var_description,
        language: var_language,
        cover: var_cover,
        coverHeader: var_coverHeader,
        episodes: var_episodes,
        genres: var_genres,
        alttitles: var_alttitles,
        rating: var_rating,
        views: var_views,
        length: var_length,
        settings: var_settings);
  }

  @protected
  Episode sse_decode_episode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_cover = sse_decode_opt_String(deserializer);
    var var_coverHeader = sse_decode_opt_Map_String_String_None(deserializer);
    var var_timestamp = sse_decode_opt_String(deserializer);
    return Episode(
        id: var_id,
        name: var_name,
        url: var_url,
        cover: var_cover,
        coverHeader: var_coverHeader,
        timestamp: var_timestamp);
  }

  @protected
  ExtensionData sse_decode_extension_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_repo = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_mediaType = sse_decode_opt_list_media_type(deserializer);
    var var_giturl = sse_decode_opt_String(deserializer);
    var var_version = sse_decode_opt_String(deserializer);
    var var_desc = sse_decode_opt_String(deserializer);
    var var_author = sse_decode_opt_String(deserializer);
    var var_license = sse_decode_opt_String(deserializer);
    var var_tags = sse_decode_opt_list_String(deserializer);
    var var_nsfw = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_lang = sse_decode_list_String(deserializer);
    var var_url = sse_decode_opt_String(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    return ExtensionData(
        id: var_id,
        repo: var_repo,
        name: var_name,
        mediaType: var_mediaType,
        giturl: var_giturl,
        version: var_version,
        desc: var_desc,
        author: var_author,
        license: var_license,
        tags: var_tags,
        nsfw: var_nsfw,
        lang: var_lang,
        url: var_url,
        icon: var_icon);
  }

  @protected
  ExtensionSetting sse_decode_extension_setting(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_setting = sse_decode_setting(deserializer);
    var var_settingtype = sse_decode_settingtype(deserializer);
    return ExtensionSetting(setting: var_setting, settingtype: var_settingtype);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  ImageListAudio sse_decode_image_list_audio(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_link = sse_decode_String(deserializer);
    var var_from = sse_decode_i_32(deserializer);
    var var_to = sse_decode_i_32(deserializer);
    return ImageListAudio(link: var_link, from: var_from, to: var_to);
  }

  @protected
  LinkSource sse_decode_link_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_link = sse_decode_String(deserializer);
        return LinkSource_Epub(link: var_link);
      case 1:
        var var_link = sse_decode_String(deserializer);
        return LinkSource_Pdf(link: var_link);
      case 2:
        var var_links = sse_decode_list_String(deserializer);
        var var_header = sse_decode_opt_Map_String_String_None(deserializer);
        var var_audio = sse_decode_opt_list_image_list_audio(deserializer);
        return LinkSource_Imagelist(
            links: var_links, header: var_header, audio: var_audio);
      case 3:
        var var_link = sse_decode_String(deserializer);
        var var_sub = sse_decode_list_subtitles(deserializer);
        return LinkSource_M3u8(link: var_link, sub: var_sub);
      case 4:
        var var_chapters = sse_decode_list_url_chapter(deserializer);
        return LinkSource_Mp3(chapters: var_chapters);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<DropdownItem>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DropdownItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<SourceExtensionProxy>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SourceExtensionProxy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CustomUI> sse_decode_list_custom_ui(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CustomUI>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_custom_ui(deserializer));
    }
    return ans_;
  }

  @protected
  List<Entry> sse_decode_list_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Entry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<Episode> sse_decode_list_episode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Episode>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_episode(deserializer));
    }
    return ans_;
  }

  @protected
  List<ImageListAudio> sse_decode_list_image_list_audio(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ImageListAudio>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_image_list_audio(deserializer));
    }
    return ans_;
  }

  @protected
  List<MediaType> sse_decode_list_media_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MediaType>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_media_type(deserializer));
    }
    return ans_;
  }

  @protected
  List<MetaData> sse_decode_list_meta_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MetaData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_meta_data(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<Setting> sse_decode_list_setting(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Setting>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_setting(deserializer));
    }
    return ans_;
  }

  @protected
  List<Subtitles> sse_decode_list_subtitles(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Subtitles>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_subtitles(deserializer));
    }
    return ans_;
  }

  @protected
  List<UrlChapter> sse_decode_list_url_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UrlChapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_url_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  MediaType sse_decode_media_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaType.values[inner];
  }

  @protected
  MetaData sse_decode_meta_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            deserializer);
    return MetaData(key: var_key, value: var_value);
  }

  @protected
  Map<String, String>? sse_decode_opt_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_String_None(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CancelToken?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CustomUI? sse_decode_opt_box_autoadd_custom_ui(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_custom_ui(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Entry? sse_decode_opt_box_autoadd_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_entry(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SettingUI? sse_decode_opt_box_autoadd_setting_ui(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_setting_ui(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ImageListAudio>? sse_decode_opt_list_image_list_audio(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_image_list_audio(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<MediaType>? sse_decode_opt_list_media_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_media_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<MetaData>? sse_decode_opt_list_meta_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_meta_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Setting>? sse_decode_opt_list_setting(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_setting(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ReleaseStatus sse_decode_release_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ReleaseStatus.values[inner];
  }

  @protected
  Setting sse_decode_setting(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_val = sse_decode_settingvalue(deserializer);
    var var_ui = sse_decode_opt_box_autoadd_setting_ui(deserializer);
    return Setting(val: var_val, ui: var_ui);
  }

  @protected
  SettingUI sse_decode_setting_ui(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_label = sse_decode_String(deserializer);
        var var_pickfolder = sse_decode_bool(deserializer);
        return SettingUI_PathSelection(
            label: var_label, pickfolder: var_pickfolder);
      case 1:
        var var_label = sse_decode_String(deserializer);
        var var_min = sse_decode_f_64(deserializer);
        var var_max = sse_decode_f_64(deserializer);
        var var_step = sse_decode_f_64(deserializer);
        return SettingUI_Slider(
            label: var_label, min: var_min, max: var_max, step: var_step);
      case 2:
        var var_label = sse_decode_String(deserializer);
        return SettingUI_Checkbox(label: var_label);
      case 3:
        var var_label = sse_decode_String(deserializer);
        return SettingUI_Textbox(label: var_label);
      case 4:
        var var_label = sse_decode_String(deserializer);
        var var_options =
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
                deserializer);
        return SettingUI_Dropdown(label: var_label, options: var_options);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Settingtype sse_decode_settingtype(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Settingtype.values[inner];
  }

  @protected
  Settingvalue sse_decode_settingvalue(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_val = sse_decode_String(deserializer);
        var var_defaultVal = sse_decode_String(deserializer);
        return Settingvalue_String(val: var_val, defaultVal: var_defaultVal);
      case 1:
        var var_val = sse_decode_f_64(deserializer);
        var var_defaultVal = sse_decode_f_64(deserializer);
        return Settingvalue_Number(val: var_val, defaultVal: var_defaultVal);
      case 2:
        var var_val = sse_decode_bool(deserializer);
        var var_defaultVal = sse_decode_bool(deserializer);
        return Settingvalue_Boolean(val: var_val, defaultVal: var_defaultVal);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Sort sse_decode_sort(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Sort.values[inner];
  }

  @protected
  Source sse_decode_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_sourcedata = sse_decode_box_autoadd_data_source(deserializer);
        return Source_Data(sourcedata: var_sourcedata);
      case 1:
        var var_sourcedata = sse_decode_box_autoadd_link_source(deserializer);
        return Source_Directlink(sourcedata: var_sourcedata);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Subtitles sse_decode_subtitles(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return Subtitles(title: var_title, url: var_url);
  }

  @protected
  TimestampType sse_decode_timestamp_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TimestampType.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UrlChapter sse_decode_url_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return UrlChapter(title: var_title, url: var_url);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
      CancelToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as CancelTokenImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
      DropdownItem raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DropdownItemImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
      SourceExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionManagerProxyImpl)
        .frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
      SourceExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionProxyImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
      Value raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ValueImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
      SourceExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionProxyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
      CancelToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as CancelTokenImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
      SourceExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionManagerProxyImpl)
        .frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
      SourceExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionProxyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
      CancelToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as CancelTokenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
      DropdownItem raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DropdownItemImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
      SourceExtensionManagerProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionManagerProxyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
      SourceExtensionProxy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SourceExtensionProxyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
      Value raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ValueImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_32(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_media_type(MediaType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_release_status(ReleaseStatus raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_settingtype(Settingtype raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_sort(Sort raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_timestamp_type(TimestampType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CancelTokenImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          DropdownItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DropdownItemImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          SourceExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionManagerProxyImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SourceExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionProxyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ValueImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SourceExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionProxyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CancelTokenImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          SourceExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionManagerProxyImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SourceExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionProxyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CancelTokenImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          DropdownItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DropdownItemImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionManagerProxy(
          SourceExtensionManagerProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionManagerProxyImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          SourceExtensionProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SourceExtensionProxyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ValueImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_ui(
      CustomUI self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_ui(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_data_source(
      DataSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_data_source(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_entry(Entry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_link_source(
      LinkSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_link_source(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_setting_ui(
      SettingUI self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_setting_ui(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settingvalue(
      Settingvalue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settingvalue(self, serializer);
  }

  @protected
  void sse_encode_custom_ui(CustomUI self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomUI_Text(text: final text):
        sse_encode_i_32(0, serializer);
        sse_encode_String(text, serializer);
      case CustomUI_Image(image: final image, header: final header):
        sse_encode_i_32(1, serializer);
        sse_encode_String(image, serializer);
        sse_encode_opt_Map_String_String_None(header, serializer);
      case CustomUI_Link(link: final link, label: final label):
        sse_encode_i_32(2, serializer);
        sse_encode_String(link, serializer);
        sse_encode_opt_String(label, serializer);
      case CustomUI_TimeStamp(
          timestamp: final timestamp,
          display: final display
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(timestamp, serializer);
        sse_encode_timestamp_type(display, serializer);
      case CustomUI_EntryCard(entry: final entry):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_entry(entry, serializer);
      case CustomUI_Column(children: final children):
        sse_encode_i_32(5, serializer);
        sse_encode_list_custom_ui(children, serializer);
      case CustomUI_Row(children: final children):
        sse_encode_i_32(6, serializer);
        sse_encode_list_custom_ui(children, serializer);
    }
  }

  @protected
  void sse_encode_data_source(DataSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DataSource_Paragraphlist(paragraphs: final paragraphs):
        sse_encode_i_32(0, serializer);
        sse_encode_list_String(paragraphs, serializer);
    }
  }

  @protected
  void sse_encode_entry(Entry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_media_type(self.mediaType, serializer);
    sse_encode_opt_String(self.cover, serializer);
    sse_encode_opt_Map_String_String_None(self.coverHeader, serializer);
    sse_encode_opt_list_String(self.author, serializer);
    sse_encode_opt_box_autoadd_f_32(self.rating, serializer);
    sse_encode_opt_box_autoadd_f_32(self.views, serializer);
    sse_encode_opt_box_autoadd_i_32(self.length, serializer);
  }

  @protected
  void sse_encode_entry_detailed(EntryDetailed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_list_String(self.author, serializer);
    sse_encode_opt_box_autoadd_custom_ui(self.ui, serializer);
    sse_encode_opt_list_meta_data(self.meta, serializer);
    sse_encode_media_type(self.mediaType, serializer);
    sse_encode_release_status(self.status, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.language, serializer);
    sse_encode_opt_String(self.cover, serializer);
    sse_encode_opt_Map_String_String_None(self.coverHeader, serializer);
    sse_encode_list_episode(self.episodes, serializer);
    sse_encode_opt_list_String(self.genres, serializer);
    sse_encode_opt_list_String(self.alttitles, serializer);
    sse_encode_opt_box_autoadd_f_32(self.rating, serializer);
    sse_encode_opt_box_autoadd_f_32(self.views, serializer);
    sse_encode_opt_box_autoadd_i_32(self.length, serializer);
    sse_encode_opt_list_setting(self.settings, serializer);
  }

  @protected
  void sse_encode_episode(Episode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.cover, serializer);
    sse_encode_opt_Map_String_String_None(self.coverHeader, serializer);
    sse_encode_opt_String(self.timestamp, serializer);
  }

  @protected
  void sse_encode_extension_data(ExtensionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_opt_String(self.repo, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_list_media_type(self.mediaType, serializer);
    sse_encode_opt_String(self.giturl, serializer);
    sse_encode_opt_String(self.version, serializer);
    sse_encode_opt_String(self.desc, serializer);
    sse_encode_opt_String(self.author, serializer);
    sse_encode_opt_String(self.license, serializer);
    sse_encode_opt_list_String(self.tags, serializer);
    sse_encode_opt_box_autoadd_bool(self.nsfw, serializer);
    sse_encode_list_String(self.lang, serializer);
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_String(self.icon, serializer);
  }

  @protected
  void sse_encode_extension_setting(
      ExtensionSetting self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_setting(self.setting, serializer);
    sse_encode_settingtype(self.settingtype, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_image_list_audio(
      ImageListAudio self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.link, serializer);
    sse_encode_i_32(self.from, serializer);
    sse_encode_i_32(self.to, serializer);
  }

  @protected
  void sse_encode_link_source(LinkSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LinkSource_Epub(link: final link):
        sse_encode_i_32(0, serializer);
        sse_encode_String(link, serializer);
      case LinkSource_Pdf(link: final link):
        sse_encode_i_32(1, serializer);
        sse_encode_String(link, serializer);
      case LinkSource_Imagelist(
          links: final links,
          header: final header,
          audio: final audio
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_list_String(links, serializer);
        sse_encode_opt_Map_String_String_None(header, serializer);
        sse_encode_opt_list_image_list_audio(audio, serializer);
      case LinkSource_M3u8(link: final link, sub: final sub):
        sse_encode_i_32(3, serializer);
        sse_encode_String(link, serializer);
        sse_encode_list_subtitles(sub, serializer);
      case LinkSource_Mp3(chapters: final chapters):
        sse_encode_i_32(4, serializer);
        sse_encode_list_url_chapter(chapters, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          List<DropdownItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          List<SourceExtensionProxy> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSourceExtensionProxy(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_custom_ui(
      List<CustomUI> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_custom_ui(item, serializer);
    }
  }

  @protected
  void sse_encode_list_entry(List<Entry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_episode(List<Episode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_episode(item, serializer);
    }
  }

  @protected
  void sse_encode_list_image_list_audio(
      List<ImageListAudio> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_image_list_audio(item, serializer);
    }
  }

  @protected
  void sse_encode_list_media_type(
      List<MediaType> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_media_type(item, serializer);
    }
  }

  @protected
  void sse_encode_list_meta_data(
      List<MetaData> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_meta_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_setting(List<Setting> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_setting(item, serializer);
    }
  }

  @protected
  void sse_encode_list_subtitles(
      List<Subtitles> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_subtitles(item, serializer);
    }
  }

  @protected
  void sse_encode_list_url_chapter(
      List<UrlChapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_url_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_media_type(MediaType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_meta_data(MetaData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
        self.value, serializer);
  }

  @protected
  void sse_encode_opt_Map_String_String_None(
      Map<String, String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_String_None(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          CancelToken? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCancelToken(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_custom_ui(
      CustomUI? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_custom_ui(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_entry(Entry? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_entry(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_setting_ui(
      SettingUI? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_setting_ui(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_image_list_audio(
      List<ImageListAudio>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_image_list_audio(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_media_type(
      List<MediaType>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_media_type(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_meta_data(
      List<MetaData>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_meta_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_setting(
      List<Setting>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_setting(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_release_status(ReleaseStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_setting(Setting self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settingvalue(self.val, serializer);
    sse_encode_opt_box_autoadd_setting_ui(self.ui, serializer);
  }

  @protected
  void sse_encode_setting_ui(SettingUI self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SettingUI_PathSelection(
          label: final label,
          pickfolder: final pickfolder
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(label, serializer);
        sse_encode_bool(pickfolder, serializer);
      case SettingUI_Slider(
          label: final label,
          min: final min,
          max: final max,
          step: final step
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(label, serializer);
        sse_encode_f_64(min, serializer);
        sse_encode_f_64(max, serializer);
        sse_encode_f_64(step, serializer);
      case SettingUI_Checkbox(label: final label):
        sse_encode_i_32(2, serializer);
        sse_encode_String(label, serializer);
      case SettingUI_Textbox(label: final label):
        sse_encode_i_32(3, serializer);
        sse_encode_String(label, serializer);
      case SettingUI_Dropdown(label: final label, options: final options):
        sse_encode_i_32(4, serializer);
        sse_encode_String(label, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDropdownItem(
            options, serializer);
    }
  }

  @protected
  void sse_encode_settingtype(Settingtype self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_settingvalue(Settingvalue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Settingvalue_String(val: final val, defaultVal: final defaultVal):
        sse_encode_i_32(0, serializer);
        sse_encode_String(val, serializer);
        sse_encode_String(defaultVal, serializer);
      case Settingvalue_Number(val: final val, defaultVal: final defaultVal):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(val, serializer);
        sse_encode_f_64(defaultVal, serializer);
      case Settingvalue_Boolean(val: final val, defaultVal: final defaultVal):
        sse_encode_i_32(2, serializer);
        sse_encode_bool(val, serializer);
        sse_encode_bool(defaultVal, serializer);
    }
  }

  @protected
  void sse_encode_sort(Sort self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_source(Source self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Source_Data(sourcedata: final sourcedata):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_data_source(sourcedata, serializer);
      case Source_Directlink(sourcedata: final sourcedata):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_link_source(sourcedata, serializer);
    }
  }

  @protected
  void sse_encode_subtitles(Subtitles self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_timestamp_type(TimestampType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_url_chapter(UrlChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class CancelTokenImpl extends RustOpaque implements CancelToken {
  // Not to be used by end users
  CancelTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CancelTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CancelToken,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CancelToken,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CancelTokenPtr,
  );

  Future<void> cancel() => RustLib.instance.api.crateApiSimpleCancelTokenCancel(
        that: this,
      );

  Future<CancelToken> child() =>
      RustLib.instance.api.crateApiSimpleCancelTokenChild(
        that: this,
      );
}

@sealed
class DropdownItemImpl extends RustOpaque implements DropdownItem {
  // Not to be used by end users
  DropdownItemImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DropdownItemImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DropdownItem,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DropdownItem,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DropdownItemPtr,
  );
}

@sealed
class SourceExtensionManagerProxyImpl extends RustOpaque
    implements SourceExtensionManagerProxy {
  // Not to be used by end users
  SourceExtensionManagerProxyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SourceExtensionManagerProxyImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_SourceExtensionManagerProxy,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_SourceExtensionManagerProxy,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_SourceExtensionManagerProxyPtr,
  );

  Future<List<SourceExtensionProxy>> getExtensions() => RustLib.instance.api
          .crateApiSimpleSourceExtensionManagerProxyGetExtensions(
        that: this,
      );
}

@sealed
class SourceExtensionProxyImpl extends RustOpaque
    implements SourceExtensionProxy {
  // Not to be used by end users
  SourceExtensionProxyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SourceExtensionProxyImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_SourceExtensionProxy,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_SourceExtensionProxy,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SourceExtensionProxyPtr,
  );

  Future<List<Entry>> browse(
          {required PlatformInt64 page,
          required Sort sort,
          CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxyBrowse(
          that: this, page: page, sort: sort, token: token);

  Future<EntryDetailed> detail(
          {required String entryid,
          required List<Setting> settings,
          CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxyDetail(
          that: this, entryid: entryid, settings: settings, token: token);

  Future<Entry?> fromurl({required String url, CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxyFromurl(
          that: this, url: url, token: token);

  Future<ExtensionData> getData() =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxyGetData(
        that: this,
      );

  Future<ExtensionSetting> getSetting({required String name}) =>
      RustLib.instance.api
          .crateApiSimpleSourceExtensionProxyGetSetting(that: this, name: name);

  Future<List<String>> getSettingsIds() =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxyGetSettingsIds(
        that: this,
      );

  Future<bool> isEnabled() =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxyIsEnabled(
        that: this,
      );

  Future<List<Entry>> search(
          {required PlatformInt64 page,
          required String filter,
          CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxySearch(
          that: this, page: page, filter: filter, token: token);

  Future<void> setEnabled({required bool enabled}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxySetEnabled(
          that: this, enabled: enabled);

  Future<void> setSetting(
          {required String name, required Settingvalue value}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxySetSetting(
          that: this, name: name, value: value);

  Future<Source> source(
          {required String epid,
          required List<Setting> settings,
          CancelToken? token}) =>
      RustLib.instance.api.crateApiSimpleSourceExtensionProxySource(
          that: this, epid: epid, settings: settings, token: token);
}

@sealed
class ValueImpl extends RustOpaque implements Value {
  // Not to be used by end users
  ValueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ValueImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Value,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Value,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ValuePtr,
  );
}
