// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

import 'dart:convert';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'source.dart';
part 'extension.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `hash`, `hash`

/// flutter_rust_bridge:non_opaque
class ExtensionData {
  final String id;
  final String name;
  final String url;
  final String icon;
  final String? desc;
  final List<String> author;
  final List<String> tags;
  final List<String> lang;
  final bool nsfw;
  final Set<MediaType> mediaType;
  final Set<ExtensionType> extensionType;
  final String? repo;
  final String version;
  final String license;
  final bool compatible;

  const ExtensionData({
    required this.id,
    required this.name,
    required this.url,
    required this.icon,
    this.desc,
    required this.author,
    required this.tags,
    required this.lang,
    required this.nsfw,
    required this.mediaType,
    required this.extensionType,
    this.repo,
    required this.version,
    required this.license,
    required this.compatible,
  });

  static Future<ExtensionData> default_() =>
      RustLib.instance.api.dionRuntimeDataExtensionExtensionDataDefault();

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      url.hashCode ^
      icon.hashCode ^
      desc.hashCode ^
      author.hashCode ^
      tags.hashCode ^
      lang.hashCode ^
      nsfw.hashCode ^
      mediaType.hashCode ^
      extensionType.hashCode ^
      repo.hashCode ^
      version.hashCode ^
      license.hashCode ^
      compatible.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExtensionData &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          url == other.url &&
          icon == other.icon &&
          desc == other.desc &&
          author == other.author &&
          tags == other.tags &&
          lang == other.lang &&
          nsfw == other.nsfw &&
          mediaType == other.mediaType &&
          extensionType == other.extensionType &&
          repo == other.repo &&
          version == other.version &&
          license == other.license &&
          compatible == other.compatible;
}

@freezed
sealed class ExtensionType with _$ExtensionType {
  const ExtensionType._();

  const factory ExtensionType.entryProvider({
    required bool hasSearch,
  }) = ExtensionType_EntryProvider;
  const factory ExtensionType.entryDetailedProvider({
    required List<String> idTypes,
  }) = ExtensionType_EntryDetailedProvider;
  const factory ExtensionType.sourceProvider({
    required List<String> idTypes,
  }) = ExtensionType_SourceProvider;
  const factory ExtensionType.sourceProcessor({
    required Set<SourceType> sourcetypes,
    required Set<SourceOpenType> opentype,
  }) = ExtensionType_SourceProcessor;
  const factory ExtensionType.entryProcessor({
    required bool triggerMapEntry,
    required bool triggerOnEntryActivity,
  }) = ExtensionType_EntryProcessor;
  const factory ExtensionType.urlHandler({
    required List<String> urlPatterns,
  }) = ExtensionType_URLHandler;
}

/// flutter_rust_bridge:non_opaque
enum SourceOpenType {
  download,
  stream,
  ;

  static Future<SourceOpenType> default_() =>
      RustLib.instance.api.dionRuntimeDataExtensionSourceOpenTypeDefault();
}
