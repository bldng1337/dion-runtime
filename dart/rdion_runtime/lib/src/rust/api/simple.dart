// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../third_party/dion_runtime/data/datastructs.dart';
import '../third_party/dion_runtime/data/settings.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `from`

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelToken>>
abstract class CancelToken implements RustOpaqueInterface {
  Future<void> cancel();

  Future<CancelToken> child();

  factory CancelToken() => RustLib.instance.api.crateApiSimpleCancelTokenNew();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SourceExtensionManagerProxy>>
abstract class SourceExtensionManagerProxy implements RustOpaqueInterface {
  Future<List<SourceExtensionProxy>> getExtensions();

  factory SourceExtensionManagerProxy({required String path}) =>
      RustLib.instance.api
          .crateApiSimpleSourceExtensionManagerProxyNew(path: path);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SourceExtensionProxy>>
abstract class SourceExtensionProxy implements RustOpaqueInterface {
  Future<List<Entry>> browse(
      {required PlatformInt64 page, required Sort sort, CancelToken? token});

  Future<EntryDetailed> detail(
      {required String entryid,
      required Map<String, Setting> settings,
      CancelToken? token});

  Future<Entry?> fromurl({required String url, CancelToken? token});

  Future<ExtensionData> getData();

  Future<ExtensionSetting> getSetting({required String name});

  Future<List<String>> getSettingsIds();

  Future<bool> isEnabled();

  Future<List<Entry>> search(
      {required PlatformInt64 page,
      required String filter,
      CancelToken? token});

  Future<void> setEnabled({required bool enabled});

  Future<void> setSetting({required String name, required Settingvalue value});

  Future<Source> source(
      {required String epid,
      required Map<String, Setting> settings,
      CancelToken? token});
}
